{"createdAt":"2025-01-15T14:45:12.143Z","updatedAt":"2025-01-20T20:34:56.000Z","id":"ECv5Y9wkkgb6NXdM","name":"ispartnersllc.com - Weekly Task Report 📝","active":true,"nodes":[{"parameters":{"operation":"getAll","team":"8402285","space":"90090491534","folder":"90171429336","list":"901700155913","filters":{"statuses":["in review","doing","done","blocked","to do"],"subtasks":true}},"type":"n8n-nodes-base.clickUp","typeVersion":1,"position":[240,0],"id":"a65e3a45-ace5-4337-b44b-3e9853b1d876","name":"Getting ISP's Tasks","notesInFlow":true,"credentials":{"clickUpApi":{"id":"slBwFS9XTOvzT7rj","name":"searchactions.com"}}},{"parameters":{"assignments":{"assignments":[{"id":"a3449640-20d0-4793-a49a-c2a438317e63","name":"id","value":"={{ $json.id }}","type":"string"},{"id":"91cabb4b-2075-421f-b2f0-5a953e04980b","name":"name","value":"={{ $json.name }}","type":"string"},{"id":"f5e2ce28-8cc3-4ee5-93f5-18635e97b36f","name":"parent_id","value":"={{ $json.top_level_parent }}","type":"string"},{"id":"f1b6c672-1354-4434-b278-127d32057983","name":"date_closed","value":"={{ $json.date_done ? $json.date_done : $json.date_closed ? $json.date_closed : null }}","type":"number"},{"id":"28c6de3d-c72e-4f7d-8e1b-9d9f8b9f50e8","name":"status","value":"={{ $json.status.status }}","type":"string"},{"id":"41912f38-2403-4f0c-b856-44fa91e42950","name":"custom_fields","value":"={{ $json.custom_fields }}","type":"object"},{"id":"cfed1798-235b-4ac4-ba77-db186f4b7de2","name":"description","value":"={{ $json.description }}","type":"string"}]},"options":{"ignoreConversionErrors":true}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[440,0],"id":"57fe9d8d-86e6-4d9e-95c7-4bdf71afa3f8","name":"Extracting necessary values","notesInFlow":true},{"parameters":{"jsCode":"let tasks = $input.all()\n\n// ---------------- EXTRACTING JSON   ------------------\nconst converted = []\nfor(t of tasks){\n  converted.push(t.json)\n}\ntasks = converted\n\n// ----------------- FINDING PARENT NAME ------------------\nfor(task of tasks){\n  const parent_task = tasks.find(t => t.id === task.parent_id)\n  task.parent_task_name = parent_task ? parent_task.name : null\n}\n\n\n// ----------------- FINDING TASK TYPE --------------------- \nfor(t of tasks){\n  const task = t\n  let task_type_name = null\n  let task_type_id = null\n  for(field of task.custom_fields){\n    if(field.id === 'bb1e9573-2d91-48a9-9b55-0b6aa228b71b'){\n      const options = field.type_config.options\n      const type = options.filter(option => option.orderindex === field.value);\n      if (type.length > 0) {\n        task_type_name = type[0].name;\n        task_type_id = type[0].id\n      }\n    }\n  }\n  task.type_name = task_type_name\n  //task.type_id = task_type_id\n  delete task.custom_fields\n}\n\n\n// --------------- FINDING TASK TYPE FOR SUBTASKS --------------------\nfor(t of tasks){\n  if(t.parent_id){\n    const parent_task = tasks.find(task => task.id == t.parent_id);\n    let new_type = 'Not Found'\n    if(parent_task){\n      new_type = parent_task.type_name\n    }else{\n      console.log('Parent task not found')\n    }\n    t.type_name = new_type\n  }\n}\n// ------------------ CONVERTING DATE TO STRING --------------------\nfor (let t of tasks) {\n  let date_string = '';\n  if (t.date_closed) {\n    const date = new Date(t.date_closed);\n    date_string = date.toLocaleDateString('en-US'); \n  }\n  t.date_closed_string = date_string;\n}\n// ---------- REMOVING TO DO TASKS -----------------------\ntasks = tasks.filter(task => task.status !== 'to do')\n// ---------- FILTERING DONE TASKS THAT CLOSED THIS WEEK ------------\nfunction getTasksClosedThisWeek(tasks) {\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 (Sunday) to 6 (Saturday)\n\n    // Find last Saturday\n    const lastSaturday = new Date(today);\n    lastSaturday.setDate(today.getDate() - dayOfWeek - 1 + (dayOfWeek === 6 ? 7 : 0)); // Adjust if today is Saturday\n\n    // Normalize lastSaturday and today to 00:00:00 time for accurate comparison\n    lastSaturday.setHours(0, 0, 0, 0);\n    today.setHours(23, 59, 59, 999);\n\n    return tasks.filter(task => {\n        if (task.date_closed) {\n            const closedDate = new Date(parseInt(task.date_closed, 10)); // Convert timestamp to Date\n            return closedDate >= lastSaturday && closedDate <= today;\n        }\n        return true; // Include tasks without a `date_closed`\n    });\n}\ntasks = getTasksClosedThisWeek(tasks)\n// -------- GROUPING THEM BY TYPE -------------------\nconst groupedByType = tasks.reduce((acc, task) => {\n\n  const category = task.type_name || \"No Category\";\n\n  if (!acc[category]) {\n    acc[category] = [];\n  }\n\n  acc[category].push(task);\n  return acc;\n}, {});\n\n\nconst sortedGroupedByType = Object.entries(groupedByType)\n  .sort(([keyA], [keyB]) => (keyA === \"No Category\" ? 1 : keyB === \"No Category\" ? -1 : 0))\n  .reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n\ntasks = sortedGroupedByType;\n\n\n// ---------- ORDERING THEM BY STATUS --------------------\nfunction sortTasksByStatus(tasks) {\n    const statusOrder = { \"done\": 1, \"doing\": 2, \"in review\": 3 };\n\n    const sortedData = {};\n\n    for (const [category, taskList] of Object.entries(tasks)) {\n        sortedData[category] = taskList.sort((a, b) => {\n            return (statusOrder[a.status] || 4) - (statusOrder[b.status] || 4);\n        });\n    }\n\n    return sortedData;\n}\ntasks = sortTasksByStatus(tasks)\n\n// CONVERTING BACK TO FLAT ARRAY\nfunction convertToFlatArray(tasksObj) {\n    let flatArray = [];\n\n    for (const [category, tasks] of Object.entries(tasksObj)) {\n        tasks.forEach(task => {\n            flatArray.push({\n                ...task, // Keep all original task properties\n                type_name: category // Add category as a new property\n            });\n        });\n    }\n\n    return flatArray;\n}\n\ntasks = convertToFlatArray(tasks)\nreturn tasks\n  \n\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[640,0],"id":"2625c747-482b-4671-b06d-095d11a1d672","name":"Formatting Tasks"},{"parameters":{"operation":"create","documentId":{"__rl":true,"value":"16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M","mode":"list","cachedResultName":"ISP Weekly Task Report Test","cachedResultUrl":"https://docs.google.com/spreadsheets/d/16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M/edit?usp=drivesdk"},"title":"={{ $now.format('dd-MM-yyyy') }}","options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[1520,320],"id":"22f7e25d-ce99-4ebd-8cd2-2e2d1e71a9a9","name":"Creating a new sheet","notesInFlow":true,"credentials":{"googleSheetsOAuth2Api":{"id":"odX86nuSEs99BXpl","name":"searchactions.com"}}},{"parameters":{"operation":"appendOrUpdate","documentId":{"__rl":true,"value":"16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M","mode":"list","cachedResultName":"ISP Weekly Task Report Test","cachedResultUrl":"https://docs.google.com/spreadsheets/d/16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"={{ $('Creating a new sheet').item.json.sheetId }}","mode":"id"},"columns":{"mappingMode":"autoMapInputData","value":{},"matchingColumns":[],"schema":[{"id":"Name","displayName":"Name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Date Closed","displayName":"Date Closed","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Task Type","displayName":"Task Type","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}]},"options":{"handlingExtraData":"insertInNewColumn"}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[1880,320],"id":"fe80e07c-d88f-494a-94d6-562c7923cce2","name":"Adding in new rows","notesInFlow":true,"credentials":{"googleSheetsOAuth2Api":{"id":"odX86nuSEs99BXpl","name":"searchactions.com"}}},{"parameters":{"jsCode":"const tasks = $('Formatting Tasks').all()\n\nconst formatted = []\n\nfor(task of tasks){\n  task = task.json\n\n  formatted.push({\n    \"Task Name\": task.name,\n    \"Parent Task Name\": task.parent_task_name,\n    \"Description\": task.description,\n    \"Status\": task.status,\n    \"Closed Date\": task.date_closed_string,\n    \"Task Type\": task.type_name\n  })\n\n}\n\nreturn formatted"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1700,320],"id":"dca37fd7-b511-463b-9bd9-f4095c9dcaa1","name":"Formatting for Spreadsheet"},{"parameters":{"jsCode":"let tasks = []\nfor(task of $input.all()){\n  tasks.push(task.json)\n}\n\ntasks = tasks.filter(task => task.status === \"done\")\n\n\nfunction generateQuickChartDataset(tasks) {\n    const datasetMap = new Map();\n    const labelsSet = new Set();\n    \n    tasks.forEach(task => {\n        const dateClosed = task.date_closed_string || \"No closed date\";\n        labelsSet.add(dateClosed);\n        \n        if (!datasetMap.has(task.type_name)) {\n            datasetMap.set(task.type_name, new Map());\n        }\n        \n        const typeData = datasetMap.get(task.type_name);\n        typeData.set(dateClosed, (typeData.get(dateClosed) || 0) + 1);\n    });\n    \n    const labels = Array.from(labelsSet).sort();\n    \n    const datasets = Array.from(datasetMap.entries()).map(([label, data]) => {\n        return {\n            label,\n            data: labels.map(date => data.get(date) || 0)\n        };\n    });\n    \n    return { labels, datasets };\n}\nconst grouped = generateQuickChartDataset(tasks)\nreturn {\n    \"type\":'bar',\n    \"data\": grouped\n  }\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,0],"id":"e8fb339e-fe7a-45ef-8963-31771718bd43","name":"Quickchart query"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const input = $('Formatting Tasks').all()\n\nconst tasks = []\n\nfor(task of input){\n  tasks.push(task.json)\n}\n\n\nfunction groupTasksByTypeAndStatus(tasks) {\n    let groupedTasks = {};\n    \n    tasks.forEach(task => {\n        if (!groupedTasks[task.type_name]) {\n            groupedTasks[task.type_name] = {};\n        }\n        \n        if (!groupedTasks[task.type_name][task.status]) {\n            groupedTasks[task.type_name][task.status] = [];\n        }\n        \n        groupedTasks[task.type_name][task.status].push(task);\n    });\n    \n    return groupedTasks;\n}\n\n\nreturn groupTasksByTypeAndStatus(tasks);"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1520,-260],"id":"e56f251a-ba32-4039-958e-7353e01eec8a","name":"Formatting for Slack"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const input = $json\nconst elements = []\nconst capitalize = str => str.charAt(0).toUpperCase() + str.slice(1);\nfor(category of Object.keys(input)){\n  elements.push(`{\n\t\t\t\"type\": \"rich_text\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"rich_text_section\",\n\t\t\t\t\t\"elements\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"${category}:\",\n\t\t\t\t\t\t\t\"style\": {\n\t\t\t\t\t\t\t\t\"bold\": true\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t}`)\n for(status of Object.keys(input[category])){\n  const tasks_for_status = input[category][status]\n  const task_strings = []\n  for(task of tasks_for_status){\n    task_strings.push(`{\"type\": \"rich_text_section\",\"elements\": [{\n\t\t\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\t\t\"text\": \"${task.name.replace(/\\\"/g, '\\\\\"')}\"\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}`)\n  }\n \n  elements.push(`\n{\n\t\t\t\"type\": \"rich_text\",\n\t\t\t\"elements\": [\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"rich_text_section\",\n\t\t\t\t\t\"elements\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t\t\t\t\"text\": \"${capitalize(status)}:\"\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"type\": \"rich_text_list\",\n\t\t\t\t\t\"style\": \"bullet\",\n\t\t\t\t\t\"indent\": 0,\n\t\t\t\t\t\"elements\": [${task_strings.join(',')}]\n\t\t\t\t}\n\t\t\t]\n\t\t}\n  `)\n }\n}\n\n\nreturn {string: elements.join(',').replace(/[\\n\\r]/g, '')};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1720,-260],"id":"7a148d83-8db5-447f-8aff-3e365275d02e","name":"Creating Slack List Block"},{"parameters":{"jsCode":"const plot = JSON.stringify($input.first().json);\n\nreturn {\n  url: `https://quickchart.io/chart?chart=${Buffer.from(plot).toString('base64')}&backgroundColor=white&width=500&height=300&devicePixelRatio=1.0&format=webp&version=2.9.3&encoding=base64`\n};"},"id":"65ee6fbd-fd9f-4031-a3fa-dd413f6f4a78","name":"Generating Graph URL","type":"n8n-nodes-base.code","typeVersion":2,"position":[1140,0]},{"parameters":{"authentication":"oAuth2","select":"channel","channelId":{"__rl":true,"value":"C04HDK04TA8","mode":"list","cachedResultName":"ispartners"},"messageType":"block","blocksUi":"={\"blocks\":[\t{\n\t\t\t\"type\": \"header\",\n\t\t\t\"text\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"📝 Weekly task report [{{ new Date(new Date().setDate(new Date().getDate() - (new Date().getDay() + 1) % 7)).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' }) }} - {{ $now.format('LL/dd/yyyy') }}]\",\n\t\t\t\t\"emoji\": true\n\t\t\t}\n\t\t},{\n\t\t\t\"type\": \"image\",\n\t\t\t\"title\": {\n\t\t\t\t\"type\": \"plain_text\",\n\t\t\t\t\"text\": \"Graph showing done tasks by date\",\n\t\t\t\t\"emoji\": true\n\t\t\t},\n\t\t\t\"image_url\": \"{{ $('Generating Graph URL').item.json.url }}\",\n\t\t\t\"alt_text\": \"Graph\"\n\t\t},{{ $json.string }}]}","otherOptions":{}},"type":"n8n-nodes-base.slack","typeVersion":2.3,"position":[1940,-260],"id":"dc6cad14-979e-4510-b2c6-f7c0fbdf197a","name":"Sending Slack Message","webhookId":"9fc5883a-1e8d-48b0-957f-5539fbde7b31","notesInFlow":true,"credentials":{"slackOAuth2Api":{"id":"iF3XhGlpnAhFKqPO","name":"searchactions.com"}}},{"parameters":{"mode":"runOnceForEachItem","jsCode":"// Add a new field called 'myNewField' to the JSON of the item\n\nconst input = $('Formatting Tasks').all()\nconst tasks = []\nconst url = $json.url\n\nfor(task of input){\n  tasks.push(task.json)\n}\nreturn {tasks,url}"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1520,0],"id":"99c59bd0-b114-4eb3-9536-b470e195e1cf","name":"Formatting for the Database"},{"parameters":{"tableId":"Weekly Report","fieldsUi":{"fieldValues":[{"fieldId":"tasks","fieldValue":"={{ $json.tasks}}"},{"fieldId":"graph_url","fieldValue":"={{ $json.url }}"}]}},"type":"n8n-nodes-base.supabase","typeVersion":1,"position":[1740,0],"id":"247f802a-2bb9-43e9-b960-bcb215186452","name":"Adding to the database","notesInFlow":true,"credentials":{"supabaseApi":{"id":"BlAz42gKV3x5caZZ","name":"ispartnersllc.com - Weekly task report "}}},{"parameters":{"content":"# Google Spreadsheet","height":260,"width":640},"type":"n8n-nodes-base.stickyNote","position":[1460,220],"typeVersion":1,"id":"746eab47-b8d2-4946-a5ca-272b3f53bed8","name":"Sticky Note"},{"parameters":{"content":"# Supabase database","height":260,"width":640},"type":"n8n-nodes-base.stickyNote","position":[1460,-80],"typeVersion":1,"id":"e6edf215-b291-45eb-9d90-3fb537512e01","name":"Sticky Note1"},{"parameters":{"content":"# Slack\n","height":260,"width":640},"type":"n8n-nodes-base.stickyNote","position":[1460,-360],"typeVersion":1,"id":"c4877830-9f67-4ce5-971a-5005305aefed","name":"Sticky Note2"},{"parameters":{"rule":{"interval":[{"field":"weeks","triggerAtDay":[5],"triggerAtHour":14}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-40,0],"id":"7a829006-daf4-4002-a6b6-583a3b85e36a","name":"Schedule Trigger"}],"connections":{"Getting ISP's Tasks":{"main":[[{"node":"Extracting necessary values","type":"main","index":0}]]},"Extracting necessary values":{"main":[[{"node":"Formatting Tasks","type":"main","index":0}]]},"Formatting Tasks":{"main":[[{"node":"Quickchart query","type":"main","index":0}]]},"Creating a new sheet":{"main":[[{"node":"Formatting for Spreadsheet","type":"main","index":0}]]},"Formatting for Spreadsheet":{"main":[[{"node":"Adding in new rows","type":"main","index":0}]]},"Quickchart query":{"main":[[{"node":"Generating Graph URL","type":"main","index":0}]]},"Adding in new rows":{"main":[[]]},"Formatting for Slack":{"main":[[{"node":"Creating Slack List Block","type":"main","index":0}]]},"Creating Slack List Block":{"main":[[{"node":"Sending Slack Message","type":"main","index":0}]]},"Generating Graph URL":{"main":[[{"node":"Formatting for the Database","type":"main","index":0},{"node":"Creating a new sheet","type":"main","index":0},{"node":"Formatting for Slack","type":"main","index":0}]]},"Formatting for the Database":{"main":[[{"node":"Adding to the database","type":"main","index":0}]]},"Adding to the database":{"main":[[]]},"Schedule Trigger":{"main":[[{"node":"Getting ISP's Tasks","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":null,"pinData":{},"versionId":"57f343f7-6958-4a95-8e77-0f7d48b1f736","triggerCount":1,"tags":[{"createdAt":"2024-09-16T17:47:31.046Z","updatedAt":"2024-09-16T17:47:31.046Z","id":"S6G5nzOVVSQAgvEd","name":"ispartnersllc.com"}]}