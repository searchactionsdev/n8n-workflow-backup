{"createdAt":"2025-01-15T14:45:12.143Z","updatedAt":"2025-01-16T23:35:40.000Z","id":"ECv5Y9wkkgb6NXdM","name":"ispartnersllc.com - Weekly Task Report 📝","active":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"e6b96557-52d1-47a8-8503-784ad7c708c0","name":"When clicking ‘Test workflow’"},{"parameters":{"operation":"getAll","team":"8402285","space":"90090491534","folder":"90171429336","list":"901700155913","filters":{"statuses":["in review","doing","done","blocked","to do"],"subtasks":true}},"type":"n8n-nodes-base.clickUp","typeVersion":1,"position":[240,0],"id":"a65e3a45-ace5-4337-b44b-3e9853b1d876","name":"Getting ISP's Tasks","notesInFlow":true,"credentials":{"clickUpApi":{"id":"slBwFS9XTOvzT7rj","name":"searchactions.com"}}},{"parameters":{"assignments":{"assignments":[{"id":"a3449640-20d0-4793-a49a-c2a438317e63","name":"id","value":"={{ $json.id }}","type":"string"},{"id":"91cabb4b-2075-421f-b2f0-5a953e04980b","name":"name","value":"={{ $json.name }}","type":"string"},{"id":"f5e2ce28-8cc3-4ee5-93f5-18635e97b36f","name":"parent_id","value":"={{ $json.top_level_parent }}","type":"string"},{"id":"f1b6c672-1354-4434-b278-127d32057983","name":"date_closed","value":"={{ $json.date_done ? $json.date_done : $json.date_closed ? $json.date_closed : null }}","type":"number"},{"id":"28c6de3d-c72e-4f7d-8e1b-9d9f8b9f50e8","name":"status","value":"={{ $json.status.status }}","type":"string"},{"id":"41912f38-2403-4f0c-b856-44fa91e42950","name":"custom_fields","value":"={{ $json.custom_fields }}","type":"object"}]},"options":{"ignoreConversionErrors":true}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[540,0],"id":"57fe9d8d-86e6-4d9e-95c7-4bdf71afa3f8","name":"Extracting necessary values","notesInFlow":true},{"parameters":{"jsCode":"let tasks = $input.all()\n\n// ---------------- EXTRACTING JSON   ------------------\nconst converted = []\nfor(t of tasks){\n  converted.push(t.json)\n}\ntasks = converted\n\n// ----------------- FINDING PARENT NAME ------------------\nfor(task of tasks){\n  const parent_task = tasks.find(t => t.id === task.parent_id)\n  task.parent_task_name = parent_task ? parent_task.name : null\n}\n\n\n// ----------------- FINDING TASK TYPE --------------------- \nfor(t of tasks){\n  const task = t\n  let task_type_name = null\n  let task_type_id = null\n  for(field of task.custom_fields){\n    if(field.id === 'bb1e9573-2d91-48a9-9b55-0b6aa228b71b'){\n      const options = field.type_config.options\n      const type = options.filter(option => option.orderindex === field.value);\n      if (type.length > 0) {\n        task_type_name = type[0].name;\n        task_type_id = type[0].id\n      }\n    }\n  }\n  task.type_name = task_type_name\n  //task.type_id = task_type_id\n  delete task.custom_fields\n}\n\n\n// --------------- FINDING TASK TYPE FOR SUBTASKS --------------------\nfor(t of tasks){\n  if(t.parent_id){\n    const parent_task = tasks.find(task => task.id == t.parent_id);\n    let new_type = 'Not Found'\n    if(parent_task){\n      new_type = parent_task.type_name\n    }else{\n      console.log('Parent task not found')\n    }\n    t.type_name = new_type\n  }\n}\n// ------------------ CONVERTING DATE TO STRING --------------------\nfor(t of tasks){\n  let date_string = ''\n  if(t.date_closed){\n    const date = new Date(t.date_closed)\n    date_string = date.toLocaleString()\n  }\n  t.date_closed_string = date_string\n}\n// ---------- REMOVING TO DO TASKS -----------------------\ntasks = tasks.filter(task => task.status !== 'to do')\n// ---------- FILTERING DONE TASKS THAT CLOSED THIS WEEK ------------\nfunction getTasksClosedThisWeek(tasks) {\n    const today = new Date();\n    const dayOfWeek = today.getDay(); // 0 (Sunday) to 6 (Saturday)\n\n    // Find last Saturday\n    const lastSaturday = new Date(today);\n    lastSaturday.setDate(today.getDate() - dayOfWeek - 1 + (dayOfWeek === 6 ? 7 : 0)); // Adjust if today is Saturday\n\n    // Normalize lastSaturday and today to 00:00:00 time for accurate comparison\n    lastSaturday.setHours(0, 0, 0, 0);\n    today.setHours(23, 59, 59, 999);\n\n    return tasks.filter(task => {\n        if (task.date_closed) {\n            const closedDate = new Date(parseInt(task.date_closed, 10)); // Convert timestamp to Date\n            return closedDate >= lastSaturday && closedDate <= today;\n        }\n        return true; // Include tasks without a `date_closed`\n    });\n}\ntasks = getTasksClosedThisWeek(tasks)\n// -------- GROUPING THEM BY TYPE -------------------\nconst groupedByType = tasks.reduce((acc, task) => {\n\n  const category = task.type_name || \"No Category\";\n\n  if (!acc[category]) {\n    acc[category] = [];\n  }\n\n  acc[category].push(task);\n  return acc;\n}, {});\n\n\nconst sortedGroupedByType = Object.entries(groupedByType)\n  .sort(([keyA], [keyB]) => (keyA === \"No Category\" ? 1 : keyB === \"No Category\" ? -1 : 0))\n  .reduce((acc, [key, value]) => {\n    acc[key] = value;\n    return acc;\n  }, {});\n\ntasks = sortedGroupedByType;\n\n\n// ---------- ORDERING THEM BY STATUS --------------------\nfunction sortTasksByStatus(tasks) {\n    const statusOrder = { \"done\": 1, \"doing\": 2, \"in review\": 3 };\n\n    const sortedData = {};\n\n    for (const [category, taskList] of Object.entries(tasks)) {\n        sortedData[category] = taskList.sort((a, b) => {\n            return (statusOrder[a.status] || 4) - (statusOrder[b.status] || 4);\n        });\n    }\n\n    return sortedData;\n}\ntasks = sortTasksByStatus(tasks)\n\n// CONVERTING BACK TO FLAT ARRAY\nfunction convertToFlatArray(tasksObj) {\n    let flatArray = [];\n\n    for (const [category, tasks] of Object.entries(tasksObj)) {\n        tasks.forEach(task => {\n            flatArray.push({\n                ...task, // Keep all original task properties\n                type_name: category // Add category as a new property\n            });\n        });\n    }\n\n    return flatArray;\n}\n\ntasks = convertToFlatArray(tasks)\nreturn tasks\n  \n\n\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[860,0],"id":"2625c747-482b-4671-b06d-095d11a1d672","name":"Formatting Tasks"},{"parameters":{"operation":"create","documentId":{"__rl":true,"value":"16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M","mode":"list","cachedResultName":"ISP Weekly Task Report Test","cachedResultUrl":"https://docs.google.com/spreadsheets/d/16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M/edit?usp=drivesdk"},"title":"={{ $now.format('dd-MM-yyyy') }}","options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[1000,260],"id":"22f7e25d-ce99-4ebd-8cd2-2e2d1e71a9a9","name":"Creating a new sheet","notesInFlow":true,"credentials":{"googleSheetsOAuth2Api":{"id":"odX86nuSEs99BXpl","name":"searchactions.com"}}},{"parameters":{"operation":"appendOrUpdate","documentId":{"__rl":true,"value":"16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M","mode":"list","cachedResultName":"ISP Weekly Task Report Test","cachedResultUrl":"https://docs.google.com/spreadsheets/d/16sFRf_9UF13wsdlVRKl0oJ6p_MJMzT-m1WqXQChRO6M/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"={{ $('Creating a new sheet').item.json.sheetId }}","mode":"id"},"columns":{"mappingMode":"autoMapInputData","value":{},"matchingColumns":[],"schema":[{"id":"Name","displayName":"Name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Status","displayName":"Status","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Date Closed","displayName":"Date Closed","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"Task Type","displayName":"Task Type","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}]},"options":{}},"type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[1360,260],"id":"fe80e07c-d88f-494a-94d6-562c7923cce2","name":"Adding in new rows","notesInFlow":true,"credentials":{"googleSheetsOAuth2Api":{"id":"odX86nuSEs99BXpl","name":"searchactions.com"}}},{"parameters":{"jsCode":"const tasks = $('Formatting Tasks').all()\n\nconst formatted = []\n\nfor(task of tasks){\n  task = task.json\n\n  formatted.push({\n    \"Task Name\": task.name,\n    \"Parent Task Name\": task.parent_task_name,\n    \"Status\": task.status,\n    \"Closed Date\": task.date_closed_string,\n    \"Task Type\": task.type_name\n  })\n\n}\n\nreturn formatted"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1180,260],"id":"dca37fd7-b511-463b-9bd9-f4095c9dcaa1","name":"Formatting for Spreadsheet"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Getting ISP's Tasks","type":"main","index":0}]]},"Getting ISP's Tasks":{"main":[[{"node":"Extracting necessary values","type":"main","index":0}]]},"Extracting necessary values":{"main":[[{"node":"Formatting Tasks","type":"main","index":0}]]},"Formatting Tasks":{"main":[[{"node":"Creating a new sheet","type":"main","index":0}]]},"Creating a new sheet":{"main":[[{"node":"Formatting for Spreadsheet","type":"main","index":0}]]},"Formatting for Spreadsheet":{"main":[[{"node":"Adding in new rows","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"c7cc06f5-d641-4f27-b483-dab4e3952bd1","triggerCount":0,"tags":[{"createdAt":"2024-09-16T17:47:31.046Z","updatedAt":"2024-09-16T17:47:31.046Z","id":"S6G5nzOVVSQAgvEd","name":"ispartnersllc.com"}]}