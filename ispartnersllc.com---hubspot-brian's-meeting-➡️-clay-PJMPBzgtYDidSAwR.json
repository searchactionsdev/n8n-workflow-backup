{"createdAt":"2024-11-21T14:52:36.967Z","updatedAt":"2025-01-09T18:02:35.000Z","id":"PJMPBzgtYDidSAwR","name":"ispartnersllc.com - HubSpot Brian's Meeting ➡️ Clay","active":false,"nodes":[{"parameters":{"authentication":"appToken","operation":"search","returnAll":true,"filterGroupsUi":{"filterGroupsValues":[{"filtersUi":{"filterValues":[{"propertyName":"engagements_last_meeting_booked|datetime","operator":"HAS_PROPERTY"}]}}]},"additionalFields":{"properties":["hs_latest_meeting_activity","engagements_last_meeting_booked","company","associatedcompanyid","email"]}},"id":"8d44f217-11af-4734-9240-5bced39183a6","name":"HubSpot","type":"n8n-nodes-base.hubspot","typeVersion":2.1,"position":[-3760,320],"credentials":{"hubspotAppToken":{"id":"B4qJi5bVNVRoRnuV","name":"ispartnersllc.com Hubspot App Token"}}},{"parameters":{"mode":"runOnceForEachItem","jsCode":"let today = new Date();\nlet meetingDate = new Date($input.item.json.properties.engagements_last_meeting_booked);\n\nif ( meetingDate.getUTCDate() === today.getUTCDate() && \n     meetingDate.getUTCMonth() === today.getUTCMonth() && \n     meetingDate.getUTCFullYear() === today.getUTCFullYear() )\n{\n    return $input.item;\n}\nreturn null;"},"id":"4f2efc0a-9284-4856-9f48-3a97dd9ae908","name":"Filtering the meetings that are happening today","type":"n8n-nodes-base.code","typeVersion":2,"position":[-3560,320],"notesInFlow":true,"notes":"Filtering upcoming meetings "},{"parameters":{"url":"=https://api.hubapi.com/crm/v3/objects/meetings/{{ $json['associations.meetings.results'].id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"properties","value":"hs_meeting_title,hubspot_owner_id, hs_meeting_start_time"}]},"sendHeaders":true,"headerParameters":{"parameters":[{"name":"properties\t","value":"subject,startTime,location,hs_internal_meeting_notes"}]},"options":{}},"id":"282f5c0d-1371-4dd3-9282-1d199358d502","name":"Getting meeting details","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-2940,320],"credentials":{"httpHeaderAuth":{"id":"nytETEFuvbGxgFnr","name":"ispartnersllc.com HubSpot API KEY"}}},{"parameters":{"assignments":{"assignments":[{"id":"6786fcba-61f9-4d2b-a73e-3a75dd25f904","name":"meeting_owner_id","value":"={{ $json.properties.hubspot_owner_id }}","type":"string"},{"id":"4884ac0d-186e-4824-9a6e-944b65fbc0ed","name":"email","value":"={{ $('Gathering all meeting data').item.json.properties.email }}","type":"string"},{"id":"acd67b15-5282-4ba3-a4d1-2e6d5862ded8","name":"first_name","value":"={{ $('Gathering all meeting data').item.json.properties.firstname }}","type":"string"},{"id":"cbe54e60-3079-4806-ba2e-df78bb3c94d8","name":"last_name","value":"={{ $('Gathering all meeting data').item.json.properties.lastname }}","type":"string"},{"id":"1d55af32-963b-41bf-bdde-e7d564353273","name":"meeting_creation_date","value":"={{ $json.properties.hs_createdate }}","type":"string"},{"id":"405a5ff2-5530-4292-84e2-477a303e45a2","name":"meeting_start_time","value":"={{ $json.properties.hs_meeting_start_time }}","type":"string"},{"id":"bae6a174-65fa-4cad-8e21-d73e83215f23","name":"company_id","value":"={{ $('Split Out Meetings').item.json.properties.associatedcompanyid }}","type":"string"},{"id":"8cc3236e-96da-46bf-b897-2ec9a2099499","name":"how_can_we_help_you","value":"={{ $('Split Out Meetings').item.json.properties.how_can_we_help_you_ }}","type":"string"},{"id":"02967c83-9f20-4d46-b3f3-40b5e7361616","name":"hs_analytics_first_url","value":"={{ $('Split Out Meetings').item.json.properties.hs_analytics_first_url }}","type":"string"},{"id":"398cfa5f-7dc4-4caf-8ae1-cba76a2ac7a5","name":"lifecyclestage","value":"={{ $('Split Out Meetings').item.json.properties.lifecyclestage }}","type":"string"},{"id":"7cb64778-0d47-40ef-80c2-1e236ccb5a04","name":"company","value":"={{ $('Split Out Meetings').item.json.properties.company }}","type":"string"},{"id":"c583f8a8-3c83-468c-8353-143d754c9bf6","name":"hubspot_id","value":"={{ $json.properties.hs_object_id }}","type":"string"}]},"options":{}},"id":"260235ac-e4b5-4d88-a1be-d653cfbac916","name":"Combining data","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-2720,320]},{"parameters":{"compare":"selectedFields","fieldsToCompare":"email","options":{}},"id":"44d5b3ca-71c2-4851-8300-9d5427f33ac1","name":"Remove Duplicates","type":"n8n-nodes-base.removeDuplicates","typeVersion":2,"position":[-2340,320]},{"parameters":{"mode":"runOnceForEachItem","jsCode":"let today = new Date();\nlet meetingDate = new Date($input.item.json.meeting_start_time);\n\nif ( meetingDate.getUTCDate() === today.getUTCDate() && \n     meetingDate.getUTCMonth() === today.getUTCMonth() && \n     meetingDate.getUTCFullYear() === today.getUTCFullYear() )\n{\n    return $input.item;\n}\nreturn null;\n//return $input.item"},"id":"514a75cd-346f-474c-8023-fedb1bf2f3e5","name":"Checking meeting time","type":"n8n-nodes-base.code","typeVersion":2,"position":[-2160,320]},{"parameters":{"content":"* HubSpot ID\n* Email\n* First Name\n* Last Name\n* Company Name\n* Lifecyclestage\n* Form Message\n* hs_analytics_first_url","height":488.35259117585633,"width":234.34101033141536,"color":4},"id":"81bb0506-ddb2-4701-8d1c-83414652552d","name":"Sticky Note32","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-3800,120]},{"parameters":{"content":"Meeting time","height":501.5133419141348,"width":247.55373583843252,"color":4},"id":"ea2673dc-4bb1-4232-acf4-c834dbeee460","name":"Sticky Note33","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-3000,140]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"b72ddecb-fadd-45a6-83bc-8199472a9d16","leftValue":"={{ $json.meeting_owner_id }}","rightValue":"46387901","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"id":"dc4a1e64-b098-4b20-ad30-ed74d94d2475","name":"Meetings Brian Created","type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-2540,320],"notesInFlow":true,"notes":"Filtering Contacts that have meeting with Brian"},{"parameters":{"operation":"get","tableId":"Website Visitors from Clay","filters":{"conditions":[{"keyName":"email","keyValue":"={{ $('Checking meeting time').item.json.email }}"}]}},"id":"11790ce5-49f4-4dd5-8fe3-17c69c6873c8","name":"Checking if that Contact already exists","type":"n8n-nodes-base.supabase","typeVersion":1,"position":[-1280,380],"alwaysOutputData":true,"credentials":{"supabaseApi":{"id":"JnOOMQVbYErXRwA0","name":"Supabase (Website Visitors - ICP)"}}},{"parameters":{"authentication":"appToken","resource":"company","operation":"get","companyId":{"__rl":true,"value":"={{ $json.company_id }}","mode":"id"},"additionalFields":{}},"id":"b0ac7ac7-7df6-439b-a6db-5c5a5d84de16","name":"Comapny Domain","type":"n8n-nodes-base.hubspot","typeVersion":2.1,"position":[-1980,320],"alwaysOutputData":false,"executeOnce":false,"credentials":{"hubspotAppToken":{"id":"B4qJi5bVNVRoRnuV","name":"ispartnersllc.com Hubspot App Token"}},"onError":"continueRegularOutput"},{"parameters":{"content":"Domain","height":512.5759345794393,"width":221,"color":4},"id":"2c5598d0-ecd4-4f0e-b93d-10e601fbd6ba","name":"Sticky Note34","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-2040,160]},{"parameters":{"fieldToSplitOut":"associations.meetings.results","include":"selectedOtherFields","fieldsToInclude":"id, properties","options":{}},"id":"54aa69d1-5366-4b08-90b6-1aed7e698a42","name":"Split Out Meetings","type":"n8n-nodes-base.splitOut","typeVersion":1,"position":[-3140,320]},{"parameters":{"url":"=https://api.hubapi.com/crm/v3/objects/CONTACT/{{ $json.id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendQuery":true,"queryParameters":{"parameters":[{"name":"associations","value":"MEETING"},{"name":"properties","value":"company,associatedcompanyid , email, firstname, lastname,lifecyclestage, how_can_we_help_you_,hs_analytics_first_url"}]},"options":{}},"id":"25c223f0-eb60-4ece-82c5-a35d460cc74f","name":"Gathering all meeting data","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-3340,320],"credentials":{"httpHeaderAuth":{"id":"nytETEFuvbGxgFnr","name":"ispartnersllc.com HubSpot API KEY"},"httpBasicAuth":{"id":"MYs3SrDlLPv5MDmI","name":"ispartnerslls.com HubSpot API Key"}}},{"parameters":{"assignments":{"assignments":[{"id":"cdce1b33-fda9-4e37-afe0-ecd8131bc4c6","name":"email","value":"={{ $('Checking meeting time').item.json.email }}","type":"string"},{"id":"ff509f2f-8db2-46d2-b08d-a5661f6e8032","name":"first_name","value":"={{ $('Checking meeting time').item.json.first_name }}","type":"string"},{"id":"391d57a7-6fc4-4b03-870d-d368b56d8a93","name":"last_name","value":"={{ $('Checking meeting time').item.json.last_name }}","type":"string"},{"id":"02919f6b-3100-4eb1-99ab-d8669bfdcfbd","name":"hubspot_id","value":"={{ $('Checking meeting time').item.json.hubspot_id }}","type":"string"},{"id":"db054108-18bf-458a-9eba-b2c187c229fb","name":"lifecyclestage","value":"={{ $('Checking meeting time').item.json.lifecyclestage }}","type":"string"},{"id":"519c3d31-0a89-4981-8693-ef8d8013b534","name":"hs_analytics_first_url","value":"={{ $('Checking meeting time').item.json.hs_analytics_first_url }}","type":"string"},{"id":"7a8bfd71-8894-4f6b-9791-fdd650ba544f","name":"how_can_we_help_you","value":"={{ $('Checking meeting time').item.json.how_can_we_help_you }}","type":"string"},{"id":"ef08c2ca-72e7-4768-a932-1f7e2da95431","name":"company","value":"={{ $('Checking meeting time').item.json.company }}","type":"string"},{"id":"9bcf2bb0-130d-4f7b-a722-7005ca194dd2","name":"domain","value":"={{ $json.properties.domain.value }}","type":"string"},{"id":"8a80ecc5-ba75-4f09-b227-2b53c5a29606","name":"meeting_start_time","value":"={{ $('Checking meeting time').item.json.meeting_start_time }}","type":"string"},{"id":"1cfd6e6b-ab2d-44db-b532-18388d8fa751","name":"hubspot_id","value":"={{ $('Checking meeting time').item.json.hubspot_id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1740,320],"id":"eefef7e5-b7f5-4db5-8ba5-fd70f7b31bdb","name":"Setting Company Domain"},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[-1480,260],"id":"9e78c9f0-4f48-4b61-b9e1-0e62feef2f9a","name":"Loop Over Items"},{"parameters":{"assignments":{"assignments":[{"id":"26c999a0-a4e8-4e39-a75f-64245ba326f4","name":"meeting_time","value":"={{ $('Setting Company Domain').item.json.meeting_start_time }}","type":"string"},{"id":"937bee0a-b00a-4bd8-9681-9a7c73623df9","name":"lifecycle_stage","value":"={{ $('Setting Company Domain').item.json.lifecyclestage }}","type":"string"},{"id":"763fc813-e28f-4d67-bbdb-7a437e29064e","name":"form_message","value":"={{ $('Setting Company Domain').item.json.how_can_we_help_you }}","type":"string"},{"id":"3d39f36a-27f9-4157-9a46-5c75c7646b81","name":"email","value":"={{ $('Setting Company Domain').item.json.email }}","type":"string"},{"id":"90bed8be-c850-4ac2-9d40-c5c66d02497c","name":"first_name","value":"={{ $('Setting Company Domain').item.json.first_name }}","type":"string"},{"id":"41aad432-fdc8-4c57-afc2-dc7fff8b2962","name":"last_name","value":"={{ $('Setting Company Domain').item.json.last_name }}","type":"string"},{"id":"f538d3e8-5449-4d9f-bfee-4e72d807a837","name":"hs_analytics_first_url","value":"={{ $('Setting Company Domain').item.json.hs_analytics_first_url }}","type":"string"},{"id":"2d69e30f-f8de-49ba-8ec8-98d2e777fbcb","name":"domain","value":"={{ $('Setting Company Domain').item.json.domain }}","type":"string"},{"id":"98594d0a-63c3-4bf3-9287-cbd994be3a1e","name":"company","value":"={{ $('Setting Company Domain').item.json.company }}","type":"string"},{"id":"c2bcfbee-8dcb-4c86-881c-eb031e6f6202","name":"hubspot_id","value":"={{ $('Setting Company Domain').item.json.hubspot_id }}","type":"string"},{"id":"4d4c3212-ac29-4f35-839e-194ba224f5f9","name":"is_in_database ","value":"={{ $json.id }}","type":"string"}]},"options":{}},"id":"f1382327-b083-4312-8c34-0ce1c812bdfc","name":"Formating for Clay","type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-1080,380]},{"parameters":{"content":"# HubSpot integration\n## Data needed for Clay\n* Meeting time ✔\n* Lifecyclestage ✔\n* Form Message (How can we help you) ✔\n* Email ✔\n* First Name ✔\n* Last Name ✔\n* Source (which in the washing machine, we'll have to set it to HubSpot) IN THE WASHING MASHINE \n* hs_analytics_first_url (HS Analytics First URL) ✔\n* Company ✔\n* Domain ✔\n* HubSpot ID ✔","height":1284,"width":4615},"id":"7a11d041-dbe0-477e-80d0-8eff0635b349","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-4120,-260]},{"parameters":{"method":"POST","url":"https://api.leadmagic.io/email-finder","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"first_name\": \"{{ $json.first_name || \"\" }}\",\n  \"last_name\": \"{{ $json.last_name || \"\" }}\",\n  \"company_name\": \"{{ $('Is not in Clay ?').item.json.company}}\"\n}","options":{}},"id":"94b227b6-d7c6-443f-9701-5cc82a05c857","name":"Person Enrichment","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-380,180],"credentials":{"httpHeaderAuth":{"id":"DStPfj1QdkdAfw2x","name":"searchactions.com (Lead Magic v2)"}},"onError":"continueRegularOutput"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8bfc996d-b13b-416c-9c5d-48d0fdf5ac16","leftValue":"={{ $json['is_in_database '] }}","rightValue":"false","operator":{"type":"string","operation":"notExists","singleValue":true}},{"id":"1b26ce9d-c400-464c-ba3f-84114455dc1e","leftValue":"={{ $json['is_in_database '] }}","rightValue":"","operator":{"type":"string","operation":"empty","singleValue":true}}],"combinator":"or"},"options":{}},"id":"43aa15f8-e893-469e-8ada-6f9f823a96f9","name":"Is not in Clay ?","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[-1080,200],"alwaysOutputData":false},{"parameters":{"jsCode":"// Iterate through each incoming item\nfor (let item of items) {\n    // Access 'First Name' and 'Last Name' directly from the top-level of the item\n    const firstName = item.json['First Name'] ? item.json['First Name'].trim() : '';\n    const lastName = item.json['Last Name'] ? item.json['Last Name'].trim() : '';\n    \n    // Combine first name and last name to create 'Full Name Modified'\n    let fullNameModified = `${firstName} ${lastName}`.trim();\n    \n    // Assign 'Full Name Modified' to the top-level of the item\n    item.json['Full Name Modified'] = fullNameModified;\n    \n    // If either first name or last name is missing, handle it (e.g., by setting to empty or log)\n    if (!firstName && !lastName) {\n        item.json['Full Name Modified'] = '';\n    }\n}\n\n// Return the modified items to n8n\nreturn items;\n"},"id":"4db0ce38-c0f4-43d2-9c24-5e792057489a","name":"Set Full Name","type":"n8n-nodes-base.code","typeVersion":2,"position":[-580,180]},{"parameters":{"language":"python","pythonCode":"import re\nfrom datetime import datetime, timezone\nfrom urllib.parse import urlparse, urlunparse\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG, format='%(message)s')\n\n# Helper Functions\ndef preprocess(name):\n    \"\"\"Strip leading and trailing whitespace from a name.\"\"\"\n    return name.strip()\n\ndef remove_legal_designations(name):\n    \"\"\"Remove legal designations from company names.\"\"\"\n    patterns = [\n        r',?\\s*(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\.?$',\n        r'^(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\s+',\n        r'\\s+\\(.*\\)$'\n    ]\n    for pattern in patterns:\n        name = re.sub(pattern, '', name, flags=re.IGNORECASE)\n    return name.strip()\n\ndef remove_generic_descriptors(name):\n    \"\"\"Remove generic descriptors from company names.\"\"\"\n    generic_terms = [\n        \"Group\", \"Holdings\", \"Media\", \"Solutions\", \"Services\", \"Systems\",\n        \"Technologies\", \"International\", \"Incorporated\", \"Associates\", \"Partners\",\n        \"Enterprises\", \"Industries\", \"Limited\", \"Global\", \"Network\", \"Corporation\",\n        \"Investment\", \"Ventures\", \"Consulting\", \"Logistics\", \"Management\"\n    ]\n    words = name.split()\n    while words and words[-1].strip().lower() in [term.lower() for term in generic_terms]:\n        words.pop()\n    return \" \".join(words)\n\ndef simplify_educational_institution(name):\n    \"\"\"Simplify names of educational institutions.\"\"\"\n    EDUCATIONAL_KEYWORDS = {\"university\", \"college\", \"institute\", \"school\"}\n    words = name.lower().split()\n    for i, word in enumerate(words):\n        if word in EDUCATIONAL_KEYWORDS:\n            return \" \".join(words[:i+1]).title()\n    return name\n\ndef handle_religious_organizations(name):\n    \"\"\"Handle names of religious organizations.\"\"\"\n    RELIGIOUS_KEYWORDS = {\"church\", \"temple\", \"mosque\", \"synagogue\", \"ministry\", \"chapel\"}\n    words = name.split()\n    if any(keyword in name.lower() for keyword in RELIGIOUS_KEYWORDS):\n        return \" \".join(words[:6])\n    return name\n\ndef handle_government_departments(name):\n    \"\"\"Handle names of government departments.\"\"\"\n    GOVERNMENT_KEYWORDS = {\"department\", \"agency\", \"bureau\", \"office\", \"administration\"}\n    words = name.split()\n    if any(keyword in name.lower() for keyword in GOVERNMENT_KEYWORDS):\n        return \" \".join(words[:8])\n    return name\n\ndef normalize_capitalization(name):\n    \"\"\"Normalize capitalization of words in a name.\"\"\"\n    words = name.split()\n    normalized_words = []\n    for word in words:\n        if word.isupper() and len(word) > 1:\n            if word.upper() in [\"NYC\", \"IBM\", \"USA\", \"UK\"]:\n                normalized_words.append(word.upper())\n            else:\n                normalized_words.append(word.capitalize())\n        else:\n            normalized_words.append(word)\n    return \" \".join(normalized_words)\n\ndef modify_company_name(name):\n    \"\"\"Modify company name by applying various normalization functions.\"\"\"\n    name = preprocess(name)\n    name = remove_legal_designations(name)\n    name = remove_generic_descriptors(name)\n    name = simplify_educational_institution(name)\n    name = handle_religious_organizations(name)\n    name = handle_government_departments(name)\n    name = normalize_capitalization(name)\n    return name.strip()\n\ndef remove_trailing_phrases(title):\n    \"\"\"Remove trailing phrases starting with specific prepositions.\"\"\"\n    words = title.split()\n    for i, word in enumerate(words):\n        if word.lower() in ['at', 'for', 'with', 'by', 'in'] and i > 0:\n            return ' '.join(words[:i])\n    return title\n\ndef extract_main_area(area_text):\n    \"\"\"Extract the main area of responsibility from a text.\"\"\"\n    keywords = [\n        'Cloud Infrastructure', 'Cloud', 'Infrastructure', 'Security', 'Compliance',\n        'Growth', 'Marketing', 'Finance', 'Operations', 'Recreation', 'Communications',\n        'Outreach', 'Employee Benefits', 'Well-Being'\n    ]\n    matched_keywords = [keyword for keyword in keywords if keyword.lower() in area_text.lower()]\n    if matched_keywords:\n        return matched_keywords[0]\n    else:\n        phrases = area_text.split()\n        return ' '.join(phrases[:2])\n\ndef normalize_job_title(title):\n    \"\"\"Normalize job titles to a consistent format.\"\"\"\n    if not title or not isinstance(title, str):\n        logging.debug(\"Title is empty, None, or not a string.\")\n        return ''\n    logging.debug(f\"Original title: '{title}'\")\n    \n    # Convert to title case\n    title = title.title()\n    logging.debug(f\"Title case: '{title}'\")\n    \n    # Remove any text before '|'\n    if '|' in title:\n        parts = [part.strip() for part in title.split('|')]\n        # Keywords that indicate a job title\n        job_keywords = ['Founder', 'CEO', 'Manager', 'Director', 'Engineer', 'Officer', 'VP', 'Head', 'Chief', 'Partner']\n        for part in parts:\n            if any(keyword.lower() in part.lower() for keyword in job_keywords):\n                title = part\n                logging.debug(f\"Selected job title part: '{title}'\")\n                break\n        else:\n            title = parts[-1]\n            logging.debug(f\"No job keyword found. Defaulted to last part: '{title}'\")\n    \n    # Remove trailing phrases starting with prepositions\n    original_title = title\n    title = remove_trailing_phrases(title)\n    if title != original_title:\n        logging.debug(f\"Removed trailing phrase: '{title}'\")\n    \n    # Remove common prefixes\n    prefixes = [\n        'Senior', 'Sr\\.?', 'Junior', 'Jr\\.?', 'Lead', 'Principal', 'Global',\n        'Collaborator', 'Associate', 'Assistant'\n    ]\n    for prefix in prefixes:\n        pattern = r'^' + prefix + r'\\s+'\n        new_title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Removed prefix '{prefix}': '{new_title}'\")\n            title = new_title\n    \n    # Split at commas and rearrange if needed\n    if ',' in title:\n        parts = [part.strip() for part in title.split(',')]\n        if len(parts) >= 2:\n            role = parts[0]\n            area = ', '.join(parts[1:])\n            # Extract main area\n            main_area = extract_main_area(area)\n            # Construct the title\n            title = f\"{role} of {main_area}\"\n            logging.debug(f\"Constructed title: '{title}'\")\n        else:\n            title = parts[0]\n            logging.debug(f\"Removed text after comma: '{title}'\")\n    \n    # Simplify specific titles\n    title_mappings = [\n        (r'Head,?\\s+(.*)', r'Head of \\1'),\n        (r'Vice President\\s+(.*)', r'VP of \\1'),\n        (r'Vice President$', 'Vice President'),\n        (r'Vp', 'VP'),\n        (r'^(Manager|Director)\\s+Of\\s+(.*)', r'\\1 of \\2'),\n        (r'^(Manager|Director)\\s+(.*)', r'\\1 of \\2'),\n        # Retain 'Chief X Officer' as is\n        # (r'Chief\\s+(\\w+)\\s+Officer$', r'Chief \\1 Officer'),\n        (r'Global\\s+(.*)', r'\\1'),\n    ]\n    for pattern, replacement in title_mappings:\n        new_title = re.sub(pattern, replacement, title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Applied mapping '{pattern}' -> '{replacement}': '{new_title}'\")\n            title = new_title\n    \n    # Remove redundant words only if they are standalone\n    redundant_words = ['The', 'I&D', 'Licensed', 'Va']\n    for word in redundant_words:\n        pattern = r'\\b' + re.escape(word) + r'\\b'\n        new_title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Removed redundant word '{word}': '{new_title}'\")\n            title = new_title\n    \n    # Handle taglines\n    if re.search(r'\\b(Helping|Building|Creating|Providing)\\b', title, flags=re.IGNORECASE):\n        logging.debug(\"Title appears to be a tagline. Normalizing to empty string.\")\n        return ''\n    \n    # Remove extra spaces\n    title = re.sub(r'\\s+', ' ', title).strip()\n    logging.debug(f\"Cleaned up extra spaces: '{title}'\")\n    \n    # Capitalize proper nouns\n    title = ' '.join([word if word.isupper() else word.capitalize() for word in title.split()])\n    \n    # Limit to first five words\n    words = title.split()\n    if len(words) > 5:\n        title = ' '.join(words[:5])\n        logging.debug(f\"Limited to first five words: '{title}'\")\n    \n    logging.debug(f\"Final normalized title: '{title}'\")\n    logging.debug(\"===================================\")\n    \n    return title\n\ndef normalize_state(state):\n    \"\"\"Convert full state names to their abbreviations.\"\"\"\n    state_dict = {\n        'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n        'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n        'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n        'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n        'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',\n        'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n        'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',\n        'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\n        'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',\n        'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n        'District of Columbia': 'DC'\n    }\n    \n    state = state.strip().title()\n    \n    if len(state) == 2 and state.isalpha():\n        return state.upper()\n    \n    if state in state_dict:\n        return state_dict[state]\n    \n    return state\n\ndef is_us_state(state):\n    \"\"\"Check if the state abbreviation is a valid US state.\"\"\"\n    us_states = set([\n        'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',\n        'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',\n        'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',\n        'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',\n        'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY',\n        'DC'\n    ])\n    return state.upper() in us_states\n\ndef format_phone_number(phone):\n    \"\"\"Format phone numbers to a standardized format.\"\"\"\n    if not phone or not isinstance(phone, str):\n        return ''\n    digits = re.sub(r'\\D', '', phone)\n    \n    if len(digits) < 10:\n        return ''\n    \n    if len(digits) == 10:\n        return f'+1-{digits[:3]}-{digits[3:6]}-{digits[6:]}'\n    elif len(digits) == 11 and digits[0] == '1':\n        return f'+{digits[0]}-{digits[1:4]}-{digits[4:7]}-{digits[7:]}'\n    \n    return f'+{digits[:2]}-{digits[2:5]}-{digits[5:8]}-{digits[8:]}'\n\ndef extract_domain(url):\n    \"\"\"Extract the domain from a URL.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    if not url.startswith(('http://', 'https://')):\n        url = 'http://' + url\n    match = re.search(r'://(www\\.)?([^/:]+)', url)\n    if match:\n        domain = match.group(2)\n        return domain.lower()\n    else:\n        return ''\n\ndef extract_root_domain(url):\n    \"\"\"Extract the root domain from a URL.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    if not url.startswith(('http://', 'https://')):\n        url = 'http://' + url\n    parsed_url = urlparse(url)\n    domain_parts = parsed_url.netloc.split('.')\n    if len(domain_parts) > 2:\n        return '.'.join(domain_parts[-2:])\n    return parsed_url.netloc\n\ndef clean_url(url):\n    \"\"\"Clean a URL by removing query parameters and fragments.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    parsed_url = urlparse(url)\n    # Remove query parameters and fragments\n    cleaned_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path.rstrip('/'), '', '', ''))\n    return cleaned_url\n\ndef identify_provider(data):\n    \"\"\"Identify the data provider based on unique fields.\"\"\"\n    if data.get('hubspot_id'):\n        return 'HubSpot'\n    elif 'vvid' in data and 'companyDomain' in data:\n        return 'Vector'\n    elif 'Company Name' in data and 'Website' in data:\n        return 'RB2B'\n    elif 'oir_source' in data or ('person' in data and 'organization' in data):\n        return 'OpenSend'\n    return 'Unknown'\n\ndef get_unified_fields(data, provider, timestamp):\n    \"\"\"Extract and unify fields from different providers.\"\"\"\n    unified = {}\n    unified['In Hubspot'] = bool(data.get('hubspot_id'))\n    \n    # Normalize the job title based on provider\n    if provider == 'HubSpot':\n        first_name = data.get('first_name', '')\n        last_name = data.get('last_name', '')\n        unified['Company Name Modified'] = data.get('company', '')\n        unified['Company Email 1 Modified'] = data.get('email', '')\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = ''\n        unified['LinkedIn Profile Modified'] = ''\n        unified['City Modified'] = ''\n        unified['State Modified'] = ''\n        unified['Country Modified'] = ''\n        unified['Root Domain Modified'] = extract_root_domain(data.get('domain', ''))\n        unified['Industry Modified'] = ''\n        unified['Job Title Modified'] = ''\n        unified['Page Visited Modified'] = clean_url(data.get('hs_analytics_first_url', ''))\n    elif provider == 'Vector':\n        first_name = data.get('firstName', '')\n        last_name = data.get('lastName', '')\n        unified['Company Name Modified'] = data.get('company', '')\n        unified['Company Email 1 Modified'] = data.get('externalId', '')\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = format_phone_number(data.get('phone', ''))\n        unified['LinkedIn Profile Modified'] = data.get('linkedinUrl', '')\n        location = data.get('location', '').split(', ')\n        unified['City Modified'] = location[0] if len(location) > 0 else ''\n        unified['State Modified'] = normalize_state(location[1] if len(location) > 1 else '')\n        unified['Country Modified'] = 'United States' if is_us_state(unified['State Modified']) else ''\n        unified['Root Domain Modified'] = extract_root_domain(data.get('companyDomain', ''))\n        unified['Industry Modified'] = data.get('industry', '')\n        unified['Job Title Modified'] = normalize_job_title(data.get('title', ''))\n        unified['Page Visited Modified'] = clean_url(data.get('pageUrl', ''))\n    elif provider == 'RB2B':\n        first_name = data.get('First Name', '')\n        last_name = data.get('Last Name', '')\n        unified['Company Name Modified'] = data.get('Company Name', '')\n        unified['Company Email 1 Modified'] = data.get('Business Email', '')\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = format_phone_number(data.get('Phone', ''))\n        unified['LinkedIn Profile Modified'] = data.get('Linked In URL', '')\n        unified['City Modified'] = data.get('City', '')\n        unified['State Modified'] = normalize_state(data.get('State', ''))\n        unified['Country Modified'] = 'United States' if is_us_state(unified['State Modified']) else ''\n        unified['Root Domain Modified'] = extract_root_domain(data.get('Website', ''))\n        unified['Industry Modified'] = data.get('Industry', '')\n        unified['Job Title Modified'] = normalize_job_title(data.get('Title', ''))\n        unified['Page Visited Modified'] = clean_url(data.get('Captured URL', ''))\n    elif provider == 'OpenSend':\n        person_data = data.get('person', {})\n        first_name = person_data.get('first_name', '')\n        last_name = person_data.get('last_name', '')\n        unified['Company Name Modified'] = data.get('organization', {}).get('name', '')\n        \n        emails = data.get('emails', [])\n        work_emails = [email['email'] for email in emails if email.get('label', '').lower() == 'work']\n        \n        if work_emails and data.get('email') == work_emails[0]:\n            unified['Company Email 1 Modified'] = work_emails[0]\n        elif work_emails:\n            unified['Company Email 1 Modified'] = work_emails[0]\n        else:\n            unified['Company Email 1 Modified'] = next((email['email'] for email in emails if 'email' in email), '')\n        \n        personal_emails = [email['email'] for email in emails if email.get('label', '').lower() == 'personal']\n        unified['Personal Email 1 Modified'] = personal_emails[0] if personal_emails else ''\n        \n        org_phone_numbers = data.get('organization', {}).get('phone_numbers', [])\n        if isinstance(org_phone_numbers, list):\n            org_phone = org_phone_numbers[0] if len(org_phone_numbers) > 0 else ''\n        else:\n            org_phone = org_phone_numbers\n        unified['Phone - Company Modified'] = format_phone_number(org_phone)\n        \n        person_phone_numbers = person_data.get('phone_numbers', [])\n        if isinstance(person_phone_numbers, list):\n            person_phone = person_phone_numbers[0] if len(person_phone_numbers) > 0 else ''\n        else:\n            person_phone = person_phone_numbers\n        unified['Phone - Personal Modified'] = format_phone_number(person_phone)\n        \n        unified['LinkedIn Profile Modified'] = person_data.get('urls', {}).get('linkedin', '')\n        unified['City Modified'] = person_data.get('location', {}).get('city', '')\n        unified['State Modified'] = normalize_state(person_data.get('location', {}).get('state', ''))\n        unified['Country Modified'] = person_data.get('location', {}).get('country', '')\n        if not unified['Country Modified'] and is_us_state(unified['State Modified']):\n            unified['Country Modified'] = 'United States'\n        unified['Root Domain Modified'] = extract_root_domain(data.get('organization', {}).get('domain', ''))\n        unified['Industry Modified'] = data.get('organization', {}).get('industry', '')\n        unified['Job Title Modified'] = normalize_job_title(person_data.get('title', ''))\n        unified['Page Visited Modified'] = clean_url(data.get('sourceUrl', ''))\n    else:\n        first_name = ''\n        last_name = ''\n        unified['Company Name Modified'] = ''\n        unified['Company Email 1 Modified'] = ''\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = ''\n        unified['LinkedIn Profile Modified'] = ''\n        unified['City Modified'] = ''\n        unified['State Modified'] = ''\n        unified['Country Modified'] = ''\n        unified['Root Domain Modified'] = ''\n        unified['Industry Modified'] = ''\n        unified['Job Title Modified'] = ''\n        unified['Page Visited Modified'] = ''\n    \n    if provider in ['Vector', 'RB2B', 'OpenSend', 'HubSpot']:\n        full_name = f\"{first_name.strip()} {last_name.strip()}\".strip()\n        unified['First Name Modified'] = first_name.strip()\n        unified['Last Name Modified'] = last_name.strip()\n        unified['Full Name Modified'] = full_name\n    else:\n        unified['Full Name Modified'] = ''\n    \n    unified['Timestamp Modified'] = timestamp\n    return unified\n\ndef get_company_info(data):\n    \"\"\"Retrieve company name and domain based on the provider.\"\"\"\n    provider = identify_provider(data)\n    \n    if provider == 'HubSpot':\n        company_name = data.get('company', '')\n        domain = data.get('domain', '')\n    elif provider == 'Vector':\n        company_name = data.get('company', '')\n        domain = data.get('companyDomain', '')\n    elif provider == 'RB2B':\n        company_name = data.get('Company Name', '')\n        domain = data.get('Website', '')\n    elif provider == 'OpenSend':\n        company_name = data.get('organization', {}).get('name', '')\n        domain = data.get('organization', {}).get('domain', '')\n    else:\n        company_name = ''\n        domain = ''\n    \n    return company_name, domain, provider\n\ndef get_current_timestamp():\n    \"\"\"Get the current UTC timestamp in ISO format.\"\"\"\n    return datetime.now(timezone.utc).isoformat()\n\n# Main processing loop\nfor item in items:\n    data = item.get('json', {})\n    \n    if 'body' in data:\n        data = data['body']\n    \n    company_name, domain, provider = get_company_info(data)\n    domain_extracted = extract_domain(domain)\n    root_domain = extract_root_domain(domain_extracted)\n    \n    if company_name:\n        modified_name = modify_company_name(company_name)\n    else:\n        modified_name = ''\n    \n    verified = bool(root_domain and modified_name and root_domain.lower() in modified_name.lower().replace(' ', ''))\n    timestamp = get_current_timestamp()\n    unified_fields = get_unified_fields(data, provider, timestamp)\n    \n    data['normalized_company_name'] = modified_name\n    data['company_name_verified'] = verified\n    data['data_provider'] = provider\n    data['timestamp'] = timestamp\n    \n    for key, value in unified_fields.items():\n        data[key] = value\n    \n    item['json'] = data\n\nreturn items"},"id":"8bf1e7fd-0077-4c03-8cf0-7d2c0c59fee6","name":"Washing Machine","type":"n8n-nodes-base.code","typeVersion":2,"position":[-760,180],"alwaysOutputData":true},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"87654353-3a28-4379-8139-145f02a0c935","leftValue":"={{ $('Washing Machine').item.json['Page Visited Modified'] || $('Set Full Name').item.json['Page Visited Modified'] }}","rightValue":"=data-breach-2024\n","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"looseTypeValidation":true,"options":{"ignoreCase":true}},"id":"18cf1945-b7ae-4764-a97b-c323b6ba70c0","name":"Healthcare Article?","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[20,180],"retryOnFail":true,"maxTries":5,"notesInFlow":false,"alwaysOutputData":false},{"parameters":{"method":"POST","url":"https://api.leadmagic.io/mobile-finder","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"work_email\":\"{{ $json.email }}\" ,\n  \"personal_email\": \"{{ $json.email }}\"\n}","options":{}},"id":"e86fac5d-afc0-48c2-bfc7-1b03a5f08d87","name":"Phone Number Finder","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-200,180],"credentials":{"httpHeaderAuth":{"id":"DStPfj1QdkdAfw2x","name":"searchactions.com (Lead Magic v2)"}},"onError":"continueRegularOutput"},{"parameters":{"method":"POST","url":"https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-9be62fa1-b8c9-4474-a26b-b36ebad8dcbb","sendBody":true,"bodyParameters":{"parameters":[{"name":"timestamp","value":"={{ $('Washing Machine').item.json['Timestamp Modified'] }}"},{"name":"First Name","value":"={{ $('Washing Machine').item.json['First Name Modified'] }}"},{"name":"Last Name","value":"={{$('Washing Machine').item.json['Last Name Modified'] }}"},{"name":"Page Visited","value":"={{$('Washing Machine').item.json['Page Visited Modified']||$('Washing Machine').item.json[\"pageUrl\"] || $('Washing Machine').item.json[\"sourceUrl\"] || $('Washing Machine').item.json[\"webPageUrl\"] || $('Washing Machine').item.json[\"Page Visited Modified\"] || \"No URL available\"}}\n"},{"name":"Page Title (Webhook)","value":"="},{"name":"LinkedIn - Person","value":"="},{"name":"Job Title - Person","value":"="},{"name":"Website","value":"={{$('Person Enrichment').item.json.domain || $('Set Full Name').item.json.domain ||$('Washing Machine').item.json.domain }}"},{"name":"Work Email","value":"={{ $json.email  ||  $('Washing Machine').item.json.email }}\n"},{"name":"Company Name","value":"={{ $('Washing Machine').item.json['organization.name'] ||$('Set Full Name').item.json['Company Name Modified']  || $json.company_name  }}"},{"name":"Company (Normalized)","value":"={{ $json.normalized_company_name || $('Washing Machine').item.json.normalized_company_name }}\n"},{"name":"LinkedIn - Company","value":"="},{"name":"Source","value":"={{ $('Set Full Name').item.json.data_provider || $json.data_provider || $('Washing Machine').item.json.data_provider }}"},{"name":"Country","value":"={{ $('Person Enrichment').item.json.company_location.country }}"},{"name":"Vvid","value":"={{ $json.vvid  || \"\"}}"},{"name":"Facebook - Person","value":"="},{"name":"Twitter - Person","value":"="},{"name":"Github - Person","value":"="},{"name":"Phone - Person","value":"={{ $('Phone Number Finder').item.json.mobile_number ||$('Phone Number Finder').item.json.message }}"},{"name":"Phone 2 - Person","value":"={{ $('Phone Number Finder').item.json.mobile_number ||$('Phone Number Finder').item.json.message }}"},{"name":"Facebook - Company","value":"={{ $('Person Enrichment').item.json.company_facebook_url }}"},{"name":"Instagram - Company","value":"="},{"name":"Monster - Company","value":"="},{"name":"Company - Pitchbook","value":"="},{"name":"Company - Crunchbase","value":"="},{"name":"Company - Angellist","value":"="},{"name":"Company - Indeed","value":"="},{"name":"Company - Glassdoor","value":"="},{"name":"Phone - Company","value":"="},{"name":"Phone 2 - Company","value":"="},{"name":"Company Size","value":"={{ $('Person Enrichment').item.json.company_size }}"},{"name":"oir_source","value":"="},{"name":"Industry","value":"={{ $('Person Enrichment').item.json.company_industry }}"},{"name":"In Hubspot","value":"={{ $('Washing Machine').item.json['In Hubspot'] || $('Set Full Name').item.json['In Hubspot'] }}"},{"name":"Twitter Company","value":"={{ $('Person Enrichment').item.json.company_twitter_url }}"},{"name":"Domain is Catchall","value":"={{ $('Person Enrichment').item.json.is_domain_catch_all }}"},{"name":"Company Founded","value":"={{ $('Person Enrichment').item.json.company_founded }}"},{"name":"City","value":"={{ $('Person Enrichment').item.json.company_location.locality }}"},{"name":"State","value":"={{ $('Person Enrichment').item.json.company_location.region }}"},{"name":"Country","value":"={{ $('Person Enrichment').item.json.company_location.country }}"},{"name":"Zip","value":"={{ $('Person Enrichment').item.json.company_location.postal_code }}"},{"name":"=GEO","value":"={{ $('Person Enrichment').item.json.company_location.geo }}"},{"name":"Technical - IP","value":"="},{"name":"Technical - Email Status","value":"={{ $('Person Enrichment').item.json.status }}"},{"name":"Technical - MX Record","value":"={{ $('Person Enrichment').item.json.mx_record }}"},{"name":"Technical - Mail Provider","value":"={{ $('Person Enrichment').item.json.mx_provider }}"},{"name":"Technical - MX Security Gate","value":"={{ $('Person Enrichment').item.json.mx_record }}"},{"name":"Email Verification Warning","value":"={{ $json.message }}"},{"name":"Domain","value":"={{ $('Person Enrichment').item.json.domain || $('Set Full Name').item.json.domain }}"},{"name":"Full Name","value":"={{ $('Set Full Name').item.json[\"Full Name Modified\"] || $('Washing Machine').item.json[\"Full Name Modified\"] }}"},{"name":"Hs Object Id","value":"={{ $('Set Full Name').item.json.hubspot_id }}"},{"name":"Hs (Meeting Time)","value":"={{ $('Is not in Clay ?').item.json.meeting_time }}"},{"name":"Hs (Form Message)","value":"={{ $('Is not in Clay ?').item.json.form_message }}"},{"name":"Lifecyclestage","value":"={{ $('Is not in Clay ?').item.json.lifecycle_stage }}"}]},"options":{}},"id":"ab9bdc6d-6993-40e4-b2e2-e8d7894f9122","name":"Clay - Table","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[260,320],"alwaysOutputData":true},{"parameters":{"method":"POST","url":"https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-e15bc196-47b6-40f7-adf2-094a23bcc8df","sendBody":true,"bodyParameters":{"parameters":[{"name":"timestamp","value":"={{ $('Washing Machine').item.json['Timestamp Modified'] }}"},{"name":"First Name","value":"={{ $('Washing Machine').item.json['First Name Modified'] }}"},{"name":"Last Name","value":"={{$('Washing Machine').item.json['Last Name Modified'] }}"},{"name":"Page Visited","value":"={{$('Washing Machine').item.json['Page Visited Modified']||$('Washing Machine').item.json[\"pageUrl\"] || $('Washing Machine').item.json[\"sourceUrl\"] || $('Washing Machine').item.json[\"webPageUrl\"] || $('Washing Machine').item.json[\"Page Visited Modified\"] || \"No URL available\"}}\n"},{"name":"Page Title (Webhook)","value":"="},{"name":"LinkedIn - Person","value":"="},{"name":"Job Title - Person","value":"="},{"name":"Website","value":"={{$('Person Enrichment').item.json.domain || $('Set Full Name').item.json.domain ||$('Washing Machine').item.json.domain }}"},{"name":"Work Email","value":"={{ $json.email  ||  $('Washing Machine').item.json.email }}\n"},{"name":"Company Name","value":"={{ $('Washing Machine').item.json['organization.name'] ||$('Set Full Name').item.json['Company Name Modified']  || $json.company_name  }}"},{"name":"Company (Normalized)","value":"={{ $json.normalized_company_name || $('Washing Machine').item.json.normalized_company_name }}\n"},{"name":"LinkedIn - Company","value":"="},{"name":"Source","value":"={{ $('Set Full Name').item.json.data_provider || $json.data_provider || $('Washing Machine').item.json.data_provider }}"},{"name":"Country","value":"={{ $('Person Enrichment').item.json.company_location.country }}"},{"name":"Vvid","value":"={{ $json.vvid  || \"\"}}"},{"name":"Facebook - Person","value":"="},{"name":"Twitter - Person","value":"="},{"name":"Github - Person","value":"="},{"name":"Phone - Person","value":"={{ $('Phone Number Finder').item.json.mobile_number ||$('Phone Number Finder').item.json.message }}"},{"name":"Phone 2 - Person","value":"={{ $('Phone Number Finder').item.json.mobile_number ||$('Phone Number Finder').item.json.message }}"},{"name":"Facebook - Company","value":"={{ $('Person Enrichment').item.json.company_facebook_url }}"},{"name":"Instagram - Company","value":"="},{"name":"Monster - Company","value":"="},{"name":"Company - Pitchbook","value":"="},{"name":"Company - Crunchbase","value":"="},{"name":"Company - Angellist","value":"="},{"name":"Company - Indeed","value":"="},{"name":"Company - Glassdoor","value":"="},{"name":"Phone - Company","value":"="},{"name":"Phone 2 - Company","value":"="},{"name":"Company Size","value":"={{ $('Person Enrichment').item.json.company_size }}"},{"name":"oir_source","value":"="},{"name":"Industry","value":"={{ $('Person Enrichment').item.json.company_industry }}"},{"name":"In Hubspot","value":"={{ $('Washing Machine').item.json['In Hubspot'] || $('Set Full Name').item.json['In Hubspot'] }}"},{"name":"Twitter Company","value":"={{ $('Person Enrichment').item.json.company_twitter_url }}"},{"name":"Domain is Catchall","value":"={{ $('Person Enrichment').item.json.is_domain_catch_all }}"},{"name":"Company Founded","value":"={{ $('Person Enrichment').item.json.company_founded }}"},{"name":"City","value":"={{ $('Person Enrichment').item.json.company_location.locality }}"},{"name":"State","value":"={{ $('Person Enrichment').item.json.company_location.region }}"},{"name":"Country","value":"={{ $('Person Enrichment').item.json.company_location.country }}"},{"name":"Zip","value":"={{ $('Person Enrichment').item.json.company_location.postal_code }}"},{"name":"=GEO","value":"={{ $('Person Enrichment').item.json.company_location.geo }}"},{"name":"Technical - IP","value":"="},{"name":"Technical - Email Status","value":"={{ $('Person Enrichment').item.json.status }}"},{"name":"Technical - MX Record","value":"={{ $('Person Enrichment').item.json.mx_record }}"},{"name":"Technical - Mail Provider","value":"={{ $('Person Enrichment').item.json.mx_provider }}"},{"name":"Technical - MX Security Gate","value":"={{ $('Person Enrichment').item.json.mx_record }}"},{"name":"Email Verification Warning","value":"={{ $json.message }}"},{"name":"Domain","value":"={{ $('Person Enrichment').item.json.domain || $('Set Full Name').item.json.domain }}"},{"name":"Full Name","value":"={{ $('Set Full Name').item.json[\"Full Name Modified\"] || $('Washing Machine').item.json[\"Full Name Modified\"] }}"},{"name":"Hs Object Id","value":"={{ $('Set Full Name').item.json.hubspot_id }}"},{"name":"Hs (Meeting Time)","value":"={{ $('Is not in Clay ?').item.json.meeting_time }}"},{"name":"Hs (Form Message)","value":"={{ $('Is not in Clay ?').item.json.form_message }}"},{"name":"Lifecyclestage","value":"={{ $('Is not in Clay ?').item.json.lifecycle_stage }}"}]},"options":{}},"id":"9286c333-c726-4254-b934-d4c2a7895834","name":"Clay - Table - Non ICP","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[260,40],"alwaysOutputData":true},{"parameters":{"rule":{"interval":[{"field":"hours"}]}},"id":"abcf9671-0eaf-4fc8-ba15-cc8cd148dc80","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-4020,320]}],"connections":{"HubSpot":{"main":[[{"node":"Filtering the meetings that are happening today","type":"main","index":0}]]},"Filtering the meetings that are happening today":{"main":[[{"node":"Gathering all meeting data","type":"main","index":0}]]},"Getting meeting details":{"main":[[{"node":"Combining data","type":"main","index":0}]]},"Combining data":{"main":[[{"node":"Meetings Brian Created","type":"main","index":0}]]},"Remove Duplicates":{"main":[[{"node":"Checking meeting time","type":"main","index":0}]]},"Checking meeting time":{"main":[[{"node":"Comapny Domain","type":"main","index":0}]]},"Meetings Brian Created":{"main":[[{"node":"Remove Duplicates","type":"main","index":0}]]},"Checking if that Contact already exists":{"main":[[{"node":"Formating for Clay","type":"main","index":0}]]},"Comapny Domain":{"main":[[{"node":"Setting Company Domain","type":"main","index":0}]]},"Split Out Meetings":{"main":[[{"node":"Getting meeting details","type":"main","index":0}]]},"Gathering all meeting data":{"main":[[{"node":"Split Out Meetings","type":"main","index":0}]]},"Setting Company Domain":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Is not in Clay ?","type":"main","index":0}],[{"node":"Checking if that Contact already exists","type":"main","index":0}]]},"Formating for Clay":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Is not in Clay ?":{"main":[[{"node":"Washing Machine","type":"main","index":0}]]},"Set Full Name":{"main":[[{"node":"Person Enrichment","type":"main","index":0}]]},"Washing Machine":{"main":[[{"node":"Set Full Name","type":"main","index":0}]]},"Healthcare Article?":{"main":[[{"node":"Clay - Table - Non ICP","type":"main","index":0}],[{"node":"Clay - Table","type":"main","index":0}]]},"Person Enrichment":{"main":[[{"node":"Phone Number Finder","type":"main","index":0}]]},"Phone Number Finder":{"main":[[{"node":"Healthcare Article?","type":"main","index":0}]]},"Schedule Trigger":{"main":[[{"node":"HubSpot","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"90b50661-42b9-404f-80db-0eb4a84623fa","triggerCount":1,"tags":[{"createdAt":"2024-09-16T17:47:31.046Z","updatedAt":"2024-09-16T17:47:31.046Z","id":"S6G5nzOVVSQAgvEd","name":"ispartnersllc.com"}]}