{"createdAt":"2024-10-04T15:47:54.360Z","updatedAt":"2024-12-19T18:03:01.000Z","id":"42JcwTTXWwZq6dBT","name":"ispartnersllc.com - RB2B, Opensend, Vector to Google Sheets copy","active":false,"nodes":[{"parameters":{"operation":"appendOrUpdate","documentId":{"__rl":true,"value":"1Ct_1EZrHQ5pe6Qi60S_Ca0lr3P7Tzyqc5fiD2eltEcY","mode":"list","cachedResultName":"ispartnersllc.com-Website-Leads-V3","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1Ct_1EZrHQ5pe6Qi60S_Ca0lr3P7Tzyqc5fiD2eltEcY/edit?usp=drivesdk"},"sheetName":{"__rl":true,"value":"gid=0","mode":"list","cachedResultName":"Website Visitors","cachedResultUrl":"https://docs.google.com/spreadsheets/d/1Ct_1EZrHQ5pe6Qi60S_Ca0lr3P7Tzyqc5fiD2eltEcY/edit#gid=0"},"columns":{"mappingMode":"defineBelow","value":{"Timestamp Modified":"={{ $json.body['Timestamp Modified'] }}","data_provider":"={{ $json.body.data_provider }}","company_name_verified":"={{ $json.body.company_name_verified }}","normalized_company_name":"={{ $json.body.normalized_company_name }}","Company Name Modified":"={{ $json.body['Company Name Modified'] }}","First Name Modified":"={{ $json.body['First Name Modified'] }}","Last Name Modified":"={{ $json.body['Last Name Modified'] }}","Job Title Modified":"={{ $json.body['Job Title Modified'] }}","City Modified":"={{ $json.body['City Modified'] }}","State Modified":"={{ $json.body['State Modified'] }}","Country Modified":"={{ $json.body['Country Modified'] }}","LinkedIn Profile Modified":"={{ $json.body['LinkedIn Profile Modified'] }}","Phone Number Modified":"={{ $json.body['Phone Number Modified'] }}","organization.urls.facebook":"={{ $json.body['organization.urls.facebook'] }}","organization.urls.website":"={{ $json.body['organization.urls.website'] }}","organization.urls.linkedin":"={{ $json.body['organization.urls.linkedin'] }}","organization.urls.instagram":"={{ $json.body['organization.urls.instagram'] }}","person.urls.linkedin":"={{ $json.body['person.urls.linkedin'] }}","person.urls.twitter":"={{ $json.body['person.urls.twitter'] }}","emails.0.email":"={{ $json.body.emails[0].email }}","emails.1.email":"={{ $json.body.emails[1].email }}","sourceDomain":"={{ $json.body.sourceDomain }}","sourceUrl":"={{ $json.body.sourceUrl }}","Industry":"={{ $json.body.organization.industry }}","userGeolocation":"={{ $json.body.userGeolocation }}","userAgent":"={{ $json.body.userAgent }}","Phone Number":"={{ $json.body['Phone Number Modified'] }}","Country":"={{ $json.body.organization.location.country }}","State":"={{ $json.body.person.location.state }}"},"matchingColumns":["Timestamp Modified"],"schema":[{"id":"timestamp","displayName":"timestamp","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"data_provider","displayName":"data_provider","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"normalized_company_name","displayName":"normalized_company_name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"company_name_verified","displayName":"company_name_verified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"company","displayName":"company","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"companyDomain","displayName":"companyDomain","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Industry","displayName":"Industry","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Employee Count","displayName":"Employee Count","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Estimated Revenue","displayName":"Estimated Revenue","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"First Name","displayName":"First Name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Last Name","displayName":"Last Name","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Title","displayName":"Title","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Business Email","displayName":"Business Email","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"LinkedIn URL","displayName":"LinkedIn URL","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"City","displayName":"City","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"State","displayName":"State","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Zipcode","displayName":"Zipcode","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Country","displayName":"Country","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Phone Number","displayName":"Phone Number","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Captured URL","displayName":"Captured URL","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Referrer","displayName":"Referrer","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Tags","displayName":"Tags","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"vvid","displayName":"vvid","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"External Id","displayName":"External Id","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Seen At","displayName":"Seen At","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"userGeolocation","displayName":"userGeolocation","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"userAgent","displayName":"userAgent","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"userIp","displayName":"userIp","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Personal Email","displayName":"Personal Email","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.twitter","displayName":"organization.urls.twitter","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.facebook","displayName":"organization.urls.facebook","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.instagram","displayName":"organization.urls.instagram","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.linkedin","displayName":"organization.urls.linkedin","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"sourceDomain","displayName":"sourceDomain","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"sourceUrl","displayName":"sourceUrl","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"emails.0.email","displayName":"emails.0.email","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"emails.1.email","displayName":"emails.1.email","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"person.urls.linkedin","displayName":"person.urls.linkedin","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"person.urls.twitter","displayName":"person.urls.twitter","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.website","displayName":"organization.urls.website","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.linkedin","displayName":"organization.urls.linkedin","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.twitter","displayName":"organization.urls.twitter","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"organization.urls.facebook","displayName":"organization.urls.facebook","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"headers","displayName":"headers","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":true},{"id":"Company Name Modified","displayName":"Company Name Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Contact Email Modified","displayName":"Contact Email Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"First Name Modified","displayName":"First Name Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Last Name Modified","displayName":"Last Name Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Job Title Modified","displayName":"Job Title Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Phone Number Modified","displayName":"Phone Number Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"LinkedIn Profile Modified","displayName":"LinkedIn Profile Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"City Modified","displayName":"City Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false},{"id":"State Modified","displayName":"State Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Country Modified","displayName":"Country Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"IP Address Modified","displayName":"IP Address Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true},{"id":"Timestamp Modified","displayName":"Timestamp Modified","required":false,"defaultMatch":false,"display":true,"type":"string","canBeUsedToMatch":true,"removed":false}]},"options":{}},"id":"5fef7c1f-1105-484f-8db2-db2e37f72295","name":"Google Sheets","type":"n8n-nodes-base.googleSheets","typeVersion":4.5,"position":[120,900],"credentials":{"googleSheetsOAuth2Api":{"id":"odX86nuSEs99BXpl","name":"searchactions.com"}}},{"parameters":{"jsCode":"// Get all input items\nconst items = $input.all();\n\nitems.forEach(item => {\n    let data = item.json || {};\n    let title = data['Job Title Modified'] || '';\n\n    // Normalize the title\n    const normalizedTitle = normalizeJobTitle(title);\n\n    // Update the data with the normalized title\n    data['Normalized Title'] = normalizedTitle;\n\n    // Assign the modified data back to the item\n    item.json = data;\n});\n\n// Return the modified items\nreturn items;\n\nfunction normalizeJobTitle(title) {\n    // Convert to title case\n    title = title.toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase());\n\n    // Split at commas, pipes, or dashes and keep the most relevant part\n    const parts = title.split(/[,|\\-]/).map(part => part.trim());\n    title = parts[0]; // Adjust as needed\n\n    // Remove common prefixes and suffixes\n    const prefixes = ['Senior', 'Sr\\\\.?', 'Junior', 'Jr\\\\.?', 'Lead', 'Principal', 'Chief', 'Global', 'Collaborator'];\n    prefixes.forEach(prefix => {\n        const regex = new RegExp('^' + prefix + '\\\\s+', 'i');\n        title = title.replace(regex, '');\n    });\n    const suffixes = ['Officer', 'Executive'];\n    suffixes.forEach(suffix => {\n        const regex = new RegExp('\\\\s+' + suffix + '$', 'i');\n        title = title.replace(regex, '');\n    });\n\n    // Simplify specific titles\n    const mappings = [\n        { pattern: /^Head,?\\s+(.*)$/i, replacement: 'Head of $1' },\n        //{ pattern: /Vice President/i, replacement: 'VP' }, // Keep as 'Vice President'\n        { pattern: /Vp/i, replacement: 'Vice President' },\n        { pattern: /^Manager,?\\s+(.*)$/i, replacement: 'Manager' },\n        { pattern: /^Director,?\\s+(.*)$/i, replacement: 'Director' },\n        { pattern: /^Chief\\s+(\\w+)\\s+Officer$/i, replacement: '$1' },\n        { pattern: /^Global\\s+(.*)$/i, replacement: '$1' },\n    ];\n\n    mappings.forEach(mapping => {\n        title = title.replace(mapping.pattern, mapping.replacement);\n    });\n\n    // Special handling for 'VP'\n    title = title.replace(/^Vice President\\s+(\\w+)/i, 'VP of $1');\n\n    // Remove redundant words\n    const redundantWords = ['And', 'Of', 'The', 'I&D'];\n    redundantWords.forEach(word => {\n        const regex = new RegExp('\\\\b' + word + '\\\\b', 'gi');\n        title = title.replace(regex, '');\n    });\n\n    // Remove extra spaces\n    title = title.replace(/\\s+/g, ' ').trim();\n\n    // Limit to first four words\n    title = title.split(' ').slice(0, 4).join(' ');\n\n    return title;\n}\n"},"id":"adac093d-7f76-461c-af55-558eb4ce5727","name":"Normalize Job Title","type":"n8n-nodes-base.code","typeVersion":2,"position":[-660,160]},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"828a7ce4-9ff1-4cf7-8c94-5a191ae24e0b","leftValue":"={{ $('Washing Machine').item.json['Company Email 1 Modified'] || $('Washing Machine').item.json['Personal Email 1 Modified'] }}\n","rightValue":false,"operator":{"type":"boolean","operation":"notEquals"}}],"combinator":"and"},"looseTypeValidation":true,"options":{}},"id":"9b821de0-1a04-4542-8dc2-47d3ad9d1475","name":"Does Email Exist?","type":"n8n-nodes-base.filter","typeVersion":2.2,"position":[-620,20],"alwaysOutputData":true,"onError":"continueErrorOutput"},{"parameters":{},"id":"828b6287-7e00-4f9e-9285-ce22c093bd61","name":"Wait","type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[520,660],"webhookId":"92bdc025-608c-4620-a43d-258b31e5c3b8"},{"parameters":{"multipleMethods":true,"httpMethod":["POST"],"path":"8a5d82f8-1c3b-49d7-aa6a-5b4281f1dbf5","responseMode":"lastNode","responseData":"allEntries","options":{}},"id":"aada0913-6188-421a-845c-16aa24c9d88c","name":"Webhook","type":"n8n-nodes-base.webhook","position":[220,20],"webhookId":"8a5d82f8-1c3b-49d7-aa6a-5b4281f1dbf5","typeVersion":1},{"parameters":{"mode":"combine","advanced":true,"mergeByFields":{"values":[{"field1":"body.email","field2":"Company Email 1 Modified"}]},"joinMode":"keepEverything","options":{"multipleMatches":"all"}},"id":"4d7ceb2b-0d62-4240-816a-18c438048f7e","name":"Merge Node 1","type":"n8n-nodes-base.merge","typeVersion":3,"position":[1340,1380],"alwaysOutputData":false},{"parameters":{"language":"python","pythonCode":"import re\nfrom datetime import datetime, timezone\nfrom urllib.parse import urlparse, urlunparse\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG, format='%(message)s')\n\n# Helper Functions\ndef preprocess(name):\n    \"\"\"Strip leading and trailing whitespace from a name.\"\"\"\n    return name.strip()\n\ndef remove_legal_designations(name):\n    \"\"\"Remove legal designations from company names.\"\"\"\n    patterns = [\n        r',?\\s*(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\.?$',\n        r'^(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\s+',\n        r'\\s+\\(.*\\)$'\n    ]\n    for pattern in patterns:\n        name = re.sub(pattern, '', name, flags=re.IGNORECASE)\n    return name.strip()\n\ndef remove_generic_descriptors(name):\n    \"\"\"Remove generic descriptors from company names.\"\"\"\n    generic_terms = [\n        \"Group\", \"Holdings\", \"Media\", \"Solutions\", \"Services\", \"Systems\",\n        \"Technologies\", \"International\", \"Incorporated\", \"Associates\", \"Partners\",\n        \"Enterprises\", \"Industries\", \"Limited\", \"Global\", \"Network\", \"Corporation\",\n        \"Investment\", \"Ventures\", \"Consulting\", \"Logistics\", \"Management\"\n    ]\n    words = name.split()\n    while words and words[-1].strip().lower() in [term.lower() for term in generic_terms]:\n        words.pop()\n    return \" \".join(words)\n\ndef simplify_educational_institution(name):\n    \"\"\"Simplify names of educational institutions.\"\"\"\n    EDUCATIONAL_KEYWORDS = {\"university\", \"college\", \"institute\", \"school\"}\n    words = name.lower().split()\n    for i, word in enumerate(words):\n        if word in EDUCATIONAL_KEYWORDS:\n            return \" \".join(words[:i+1]).title()\n    return name\n\ndef handle_religious_organizations(name):\n    \"\"\"Handle names of religious organizations.\"\"\"\n    RELIGIOUS_KEYWORDS = {\"church\", \"temple\", \"mosque\", \"synagogue\", \"ministry\", \"chapel\"}\n    words = name.split()\n    if any(keyword in name.lower() for keyword in RELIGIOUS_KEYWORDS):\n        return \" \".join(words[:6])\n    return name\n\ndef handle_government_departments(name):\n    \"\"\"Handle names of government departments.\"\"\"\n    GOVERNMENT_KEYWORDS = {\"department\", \"agency\", \"bureau\", \"office\", \"administration\"}\n    words = name.split()\n    if any(keyword in name.lower() for keyword in GOVERNMENT_KEYWORDS):\n        return \" \".join(words[:8])\n    return name\n\ndef normalize_capitalization(name):\n    \"\"\"Normalize capitalization of words in a name.\"\"\"\n    words = name.split()\n    normalized_words = []\n    for word in words:\n        if word.isupper() and len(word) > 1:\n            if word.upper() in [\"NYC\", \"IBM\", \"USA\", \"UK\"]:\n                normalized_words.append(word.upper())\n            else:\n                normalized_words.append(word.capitalize())\n        else:\n            normalized_words.append(word)\n    return \" \".join(normalized_words)\n\ndef modify_company_name(name):\n    \"\"\"Modify company name by applying various normalization functions.\"\"\"\n    name = preprocess(name)\n    name = remove_legal_designations(name)\n    name = remove_generic_descriptors(name)\n    name = simplify_educational_institution(name)\n    name = handle_religious_organizations(name)\n    name = handle_government_departments(name)\n    name = normalize_capitalization(name)\n    return name.strip()\n\ndef remove_trailing_phrases(title):\n    \"\"\"Remove trailing phrases starting with specific prepositions.\"\"\"\n    words = title.split()\n    for i, word in enumerate(words):\n        if word.lower() in ['at', 'for', 'with', 'by', 'in'] and i > 0:\n            return ' '.join(words[:i])\n    return title\n\ndef extract_main_area(area_text):\n    \"\"\"Extract the main area of responsibility from a text.\"\"\"\n    keywords = [\n        'Cloud Infrastructure', 'Cloud', 'Infrastructure', 'Security', 'Compliance',\n        'Growth', 'Marketing', 'Finance', 'Operations', 'Recreation', 'Communications',\n        'Outreach', 'Employee Benefits', 'Well-Being'\n    ]\n    matched_keywords = [keyword for keyword in keywords if keyword.lower() in area_text.lower()]\n    if matched_keywords:\n        return matched_keywords[0]\n    else:\n        phrases = area_text.split()\n        return ' '.join(phrases[:2])\n\ndef normalize_job_title(title):\n    \"\"\"Normalize job titles to a consistent format.\"\"\"\n    if not title or not isinstance(title, str):\n        logging.debug(\"Title is empty, None, or not a string.\")\n        return ''\n    logging.debug(f\"Original title: '{title}'\")\n    \n    # Convert to title case\n    title = title.title()\n    logging.debug(f\"Title case: '{title}'\")\n    \n    # Remove any text before '|'\n    if '|' in title:\n        parts = [part.strip() for part in title.split('|')]\n        # Keywords that indicate a job title\n        job_keywords = ['Founder', 'CEO', 'Manager', 'Director', 'Engineer', 'Officer', 'VP', 'Head', 'Chief', 'Partner']\n        for part in parts:\n            if any(keyword.lower() in part.lower() for keyword in job_keywords):\n                title = part\n                logging.debug(f\"Selected job title part: '{title}'\")\n                break\n        else:\n            title = parts[-1]\n            logging.debug(f\"No job keyword found. Defaulted to last part: '{title}'\")\n    \n    # Remove trailing phrases starting with prepositions\n    original_title = title\n    title = remove_trailing_phrases(title)\n    if title != original_title:\n        logging.debug(f\"Removed trailing phrase: '{title}'\")\n    \n    # Remove common prefixes\n    prefixes = [\n        'Senior', 'Sr\\.?', 'Junior', 'Jr\\.?', 'Lead', 'Principal', 'Global',\n        'Collaborator', 'Associate', 'Assistant'\n    ]\n    for prefix in prefixes:\n        pattern = r'^' + prefix + r'\\s+'\n        new_title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Removed prefix '{prefix}': '{new_title}'\")\n            title = new_title\n    \n    # Split at commas and rearrange if needed\n    if ',' in title:\n        parts = [part.strip() for part in title.split(',')]\n        if len(parts) >= 2:\n            role = parts[0]\n            area = ', '.join(parts[1:])\n            # Extract main area\n            main_area = extract_main_area(area)\n            # Construct the title\n            title = f\"{role} of {main_area}\"\n            logging.debug(f\"Constructed title: '{title}'\")\n        else:\n            title = parts[0]\n            logging.debug(f\"Removed text after comma: '{title}'\")\n    \n    # Simplify specific titles\n    title_mappings = [\n        (r'Head,?\\s+(.*)', r'Head of \\1'),\n        (r'Vice President\\s+(.*)', r'VP of \\1'),\n        (r'Vice President$', 'Vice President'),\n        (r'Vp', 'VP'),\n        (r'^(Manager|Director)\\s+Of\\s+(.*)', r'\\1 of \\2'),\n        (r'^(Manager|Director)\\s+(.*)', r'\\1 of \\2'),\n        # Retain 'Chief X Officer' as is\n        # (r'Chief\\s+(\\w+)\\s+Officer$', r'Chief \\1 Officer'),\n        (r'Global\\s+(.*)', r'\\1'),\n    ]\n    for pattern, replacement in title_mappings:\n        new_title = re.sub(pattern, replacement, title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Applied mapping '{pattern}' -> '{replacement}': '{new_title}'\")\n            title = new_title\n    \n    # Remove redundant words only if they are standalone\n    redundant_words = ['The', 'I&D', 'Licensed', 'Va']\n    for word in redundant_words:\n        pattern = r'\\b' + re.escape(word) + r'\\b'\n        new_title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Removed redundant word '{word}': '{new_title}'\")\n            title = new_title\n    \n    # Handle taglines\n    if re.search(r'\\b(Helping|Building|Creating|Providing)\\b', title, flags=re.IGNORECASE):\n        logging.debug(\"Title appears to be a tagline. Normalizing to empty string.\")\n        return ''\n    \n    # Remove extra spaces\n    title = re.sub(r'\\s+', ' ', title).strip()\n    logging.debug(f\"Cleaned up extra spaces: '{title}'\")\n    \n    # Capitalize proper nouns\n    title = ' '.join([word if word.isupper() else word.capitalize() for word in title.split()])\n    \n    # Limit to first five words\n    words = title.split()\n    if len(words) > 5:\n        title = ' '.join(words[:5])\n        logging.debug(f\"Limited to first five words: '{title}'\")\n    \n    logging.debug(f\"Final normalized title: '{title}'\")\n    logging.debug(\"===================================\")\n    \n    return title\n\ndef normalize_state(state):\n    \"\"\"Convert full state names to their abbreviations.\"\"\"\n    state_dict = {\n        'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n        'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n        'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n        'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n        'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',\n        'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n        'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',\n        'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\n        'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',\n        'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n        'District of Columbia': 'DC'\n    }\n    \n    state = state.strip().title()\n    \n    if len(state) == 2 and state.isalpha():\n        return state.upper()\n    \n    if state in state_dict:\n        return state_dict[state]\n    \n    return state\n\ndef is_us_state(state):\n    \"\"\"Check if the state abbreviation is a valid US state.\"\"\"\n    us_states = set([\n        'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',\n        'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',\n        'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',\n        'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',\n        'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY',\n        'DC'\n    ])\n    return state.upper() in us_states\n\ndef format_phone_number(phone):\n    \"\"\"Format phone numbers to a standardized format.\"\"\"\n    if not phone or not isinstance(phone, str):\n        return ''\n    digits = re.sub(r'\\D', '', phone)\n    \n    if len(digits) < 10:\n        return ''\n    \n    if len(digits) == 10:\n        return f'+1-{digits[:3]}-{digits[3:6]}-{digits[6:]}'\n    elif len(digits) == 11 and digits[0] == '1':\n        return f'+{digits[0]}-{digits[1:4]}-{digits[4:7]}-{digits[7:]}'\n    \n    return f'+{digits[:2]}-{digits[2:5]}-{digits[5:8]}-{digits[8:]}'\n\ndef extract_domain(url):\n    \"\"\"Extract the domain from a URL.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    if not url.startswith(('http://', 'https://')):\n        url = 'http://' + url\n    match = re.search(r'://(www\\.)?([^/:]+)', url)\n    if match:\n        domain = match.group(2)\n        return domain.lower()\n    else:\n        return ''\n\ndef extract_root_domain(url):\n    \"\"\"Extract the root domain from a URL.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    if not url.startswith(('http://', 'https://')):\n        url = 'http://' + url\n    parsed_url = urlparse(url)\n    domain_parts = parsed_url.netloc.split('.')\n    if len(domain_parts) > 2:\n        return '.'.join(domain_parts[-2:])\n    return parsed_url.netloc\n\ndef clean_url(url):\n    \"\"\"Clean a URL by removing query parameters and fragments.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    parsed_url = urlparse(url)\n    # Remove query parameters and fragments\n    cleaned_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path.rstrip('/'), '', '', ''))\n    return cleaned_url\n\ndef identify_provider(data):\n    \"\"\"Identify the data provider based on unique fields.\"\"\"\n    if 'vvid' in data and 'companyDomain' in data:\n        return 'Vector'\n    elif 'Company Name' in data and 'Website' in data:\n        return 'RB2B'\n    elif 'oir_source' in data:\n        return 'OpenSend'\n    else:\n        # Additional check for OpenSend based on presence of 'person' and 'organization'\n        if 'person' in data and 'organization' in data:\n            return 'OpenSend'\n        return 'Unknown'\n\ndef get_unified_fields(data, provider, timestamp):\n    \"\"\"Extract and unify fields from different providers.\"\"\"\n    unified = {}\n    \n    unified['In Hubspot'] = 'hs_object_id' in data.get('properties', {})\n    \n    # Normalize the job title\n    if provider == 'Vector':\n        original_title = data.get('title', '')\n    elif provider == 'RB2B':\n        original_title = data.get('Title', '')\n    elif provider == 'OpenSend':\n        original_title = data.get('person', {}).get('title', '')\n    else:\n        original_title = ''\n    \n    normalized_title = normalize_job_title(original_title)\n    unified['Job Title Modified'] = normalized_title\n\n    # Clean the Page Visited URL\n    if provider == 'Vector':\n        page_url = data.get('pageUrl', '')\n    elif provider == 'RB2B':\n        page_url = data.get('Captured URL', '')\n    elif provider == 'OpenSend':\n        page_url = data.get('sourceUrl', '')\n    else:\n        page_url = ''\n    \n    cleaned_page_url = clean_url(page_url)\n    unified['Page Visited Modified'] = cleaned_page_url\n\n    # Initialize variables for first name and last name\n    first_name = ''\n    last_name = ''\n\n    if provider == 'Vector':\n        first_name = data.get('firstName', '')\n        last_name = data.get('lastName', '')\n        unified['Company Name Modified'] = data.get('company', '')\n        unified['Company Email 1 Modified'] = data.get('externalId', '')\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = format_phone_number(data.get('phone', ''))\n        unified['LinkedIn Profile Modified'] = data.get('linkedinUrl', '')\n        location = data.get('location', '').split(', ')\n        unified['City Modified'] = location[0] if len(location) > 0 else ''\n        unified['State Modified'] = normalize_state(location[1] if len(location) > 1 else '')\n        unified['Country Modified'] = 'United States' if is_us_state(unified['State Modified']) else ''\n        unified['Root Domain Modified'] = extract_root_domain(data.get('companyDomain', ''))\n        unified['Industry Modified'] = data.get('industry', '')\n\n    elif provider == 'RB2B':\n        first_name = data.get('First Name', '')\n        last_name = data.get('Last Name', '')\n        unified['Company Name Modified'] = data.get('Company Name', '')\n        unified['Company Email 1 Modified'] = data.get('Business Email', '')\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = format_phone_number(data.get('Phone', ''))\n        unified['LinkedIn Profile Modified'] = data.get('Linked In URL', '')\n        unified['City Modified'] = data.get('City', '')\n        unified['State Modified'] = normalize_state(data.get('State', ''))\n        unified['Country Modified'] = 'United States' if is_us_state(unified['State Modified']) else ''\n        unified['Root Domain Modified'] = extract_root_domain(data.get('Website', ''))\n        unified['Industry Modified'] = data.get('Industry', '')\n\n    elif provider == 'OpenSend':\n        person_data = data.get('person', {})\n        first_name = person_data.get('first_name', '')\n        last_name = person_data.get('last_name', '')\n        unified['Company Name Modified'] = data.get('organization', {}).get('name', '')\n        \n        emails = data.get('emails', [])\n        work_emails = [email['email'] for email in emails if email.get('label', '').lower() == 'work']\n        \n        if work_emails and data.get('email') == work_emails[0]:\n            unified['Company Email 1 Modified'] = work_emails[0]\n        elif work_emails:\n            unified['Company Email 1 Modified'] = work_emails[0]\n        else:\n            unified['Company Email 1 Modified'] = next((email['email'] for email in emails if 'email' in email), '')\n        \n        personal_emails = [email['email'] for email in emails if email.get('label', '').lower() == 'personal']\n        unified['Personal Email 1 Modified'] = personal_emails[0] if personal_emails else ''\n        \n        # Extract phone numbers from organization and person\n        org_phone_numbers = data.get('organization', {}).get('phone_numbers', [])\n        if isinstance(org_phone_numbers, list):\n            org_phone = org_phone_numbers[0] if len(org_phone_numbers) > 0 else ''\n        else:\n            org_phone = org_phone_numbers\n        unified['Phone - Company Modified'] = format_phone_number(org_phone)\n        \n        person_phone_numbers = person_data.get('phone_numbers', [])\n        if isinstance(person_phone_numbers, list):\n            person_phone = person_phone_numbers[0] if len(person_phone_numbers) > 0 else ''\n        else:\n            person_phone = person_phone_numbers\n        unified['Phone - Personal Modified'] = format_phone_number(person_phone)\n        \n        unified['LinkedIn Profile Modified'] = person_data.get('urls', {}).get('linkedin', '')\n        unified['City Modified'] = person_data.get('location', {}).get('city', '')\n        unified['State Modified'] = normalize_state(person_data.get('location', {}).get('state', ''))\n        unified['Country Modified'] = person_data.get('location', {}).get('country', '')\n        if not unified['Country Modified'] and is_us_state(unified['State Modified']):\n            unified['Country Modified'] = 'United States'\n        unified['Root Domain Modified'] = extract_root_domain(data.get('organization', {}).get('domain', ''))\n        unified['Industry Modified'] = data.get('organization', {}).get('industry', '')\n    \n    else:\n        # Default case if provider is unknown\n        first_name = ''\n        last_name = ''\n        # Set other fields to empty or default values as needed\n        unified['Company Name Modified'] = ''\n        unified['Company Email 1 Modified'] = ''\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = ''\n        unified['LinkedIn Profile Modified'] = ''\n        unified['City Modified'] = ''\n        unified['State Modified'] = ''\n        unified['Country Modified'] = ''\n        unified['Root Domain Modified'] = ''\n        unified['Industry Modified'] = ''\n    \n    # Create the Full Name Modified field\n    if provider in ['Vector', 'RB2B', 'OpenSend']:\n        full_name = f\"{first_name.strip()} {last_name.strip()}\".strip()\n        unified['First Name Modified'] = first_name.strip()\n        unified['Last Name Modified'] = last_name.strip()\n        unified['Full Name Modified'] = full_name\n    else:\n        unified['Full Name Modified'] = ''\n    \n    unified['Timestamp Modified'] = timestamp\n\n    return unified\n\ndef get_company_info(data):\n    \"\"\"Retrieve company name and domain based on the provider.\"\"\"\n    provider = identify_provider(data)\n    \n    if provider == 'Vector':\n        company_name = data.get('company', '')\n        domain = data.get('companyDomain', '')\n    elif provider == 'RB2B':\n        company_name = data.get('Company Name', '')\n        domain = data.get('Website', '')\n    elif provider == 'OpenSend':\n        company_name = data.get('organization', {}).get('name', '')\n        domain = data.get('organization', {}).get('domain', '')\n    else:\n        company_name = ''\n        domain = ''\n    \n    return company_name, domain, provider\n\ndef get_current_timestamp():\n    \"\"\"Get the current UTC timestamp in ISO format.\"\"\"\n    return datetime.now(timezone.utc).isoformat()\n\n# Main processing loop\nfor item in items:\n    data = item.get('json', {})\n    \n    # If data is nested under 'body', extract it\n    if 'body' in data:\n        data = data['body']\n    \n    # Retrieve company name, domain, and provider\n    company_name, domain, provider = get_company_info(data)\n    \n    # Extract domain and root domain\n    domain_extracted = extract_domain(domain)\n    root_domain = extract_root_domain(domain_extracted)\n    \n    # Modify company name\n    if company_name:\n        modified_name = modify_company_name(company_name)\n    else:\n        modified_name = ''\n    \n    # Verify if the domain is part of the company name\n    if root_domain and modified_name and root_domain.lower() in modified_name.lower().replace(' ', ''):\n        verified = True\n    else:\n        verified = False\n    \n    # Get the current timestamp\n    timestamp = get_current_timestamp()\n    \n    # Extract and unify fields\n    unified_fields = get_unified_fields(data, provider, timestamp)\n    \n    # Update data with normalized fields\n    data['normalized_company_name'] = modified_name\n    data['company_name_verified'] = verified\n    data['data_provider'] = provider\n    data['timestamp'] = timestamp\n    \n    # Merge unified fields into data\n    for key, value in unified_fields.items():\n        data[key] = value\n    \n    # Assign the updated data back to the item\n    item['json'] = data\n\n# Return the modified items to n8n\nreturn items\n"},"id":"b4a4ca69-f059-4c72-9d16-4d6b0447ef1e","name":"Washing Machine","type":"n8n-nodes-base.code","typeVersion":2,"position":[220,220],"alwaysOutputData":true},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"87654353-3a28-4379-8139-145f02a0c935","leftValue":"={{ $json.datas[0].contact.emails[0].status }}","rightValue":"UNDELIVERABLE","operator":{"type":"string","operation":"notContains"}},{"id":"4d688c1e-d291-49be-a780-249392f35a19","leftValue":"={{ $json.datas[0].contact.emails[0].email }}","rightValue":"","operator":{"type":"string","operation":"exists","singleValue":true}}],"combinator":"and"},"options":{"ignoreCase":true}},"id":"20a4b345-11f7-4ca5-b2e8-a54e765aa5db","name":"Email Exists and is Deliverable?","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[920,660]},{"parameters":{"jsCode":"// Iterate through each incoming item\nfor (let item of items) {\n    // Access the 'datas' array within each item\n    const datas = item.json.datas;\n    \n    // Initialize 'Full Name Modified' as an empty string\n    let fullNameModified = '';\n    \n    // Check if 'datas' exists and is an array\n    if (datas && Array.isArray(datas) && datas.length > 0) {\n        // Iterate through each data entry in 'datas'\n        for (let dataEntry of datas) {\n            // Access the 'contact' object\n            const contact = dataEntry.contact;\n            \n            // Check if 'contact' exists\n            if (contact) {\n                // Extract first name and last name, defaulting to empty strings if undefined\n                const firstName = contact.firstname ? contact.firstname.trim() : '';\n                const lastName = contact.lastname ? contact.lastname.trim() : '';\n                \n                // Combine first name and last name to create 'Full Name Modified'\n                fullNameModified = `${firstName} ${lastName}`.trim();\n                \n                // Assign 'Full Name Modified' to the top-level of the item\n                item.json['Full Name Modified'] = fullNameModified;\n                \n                // If you have multiple 'datas' entries and want to concatenate full names:\n                // Uncomment the following lines:\n                // if (fullNameModified) {\n                //     fullNames.push(fullNameModified);\n                // }\n            } else {\n                // If 'contact' is missing, set 'Full Name Modified' as an empty string or handle accordingly\n                item.json['Full Name Modified'] = '';\n            }\n        }\n    } else {\n        // If 'datas' is missing or empty, set 'Full Name Modified' as an empty string or handle accordingly\n        item.json['Full Name Modified'] = '';\n    }\n    \n    // Optional: If handling multiple full names, uncomment and use the following:\n    // item.json['Full Name Modified'] = fullNames.join(', ');\n}\n\n// Return the modified items to n8n\nreturn items;\n"},"id":"684c58aa-645f-4d84-a5e6-21d0a42b639b","name":"Set Full Name","type":"n8n-nodes-base.code","typeVersion":2,"position":[1220,640]},{"parameters":{"authentication":"appToken","operation":"search","filterGroupsUi":{"filterGroupsValues":[{"filtersUi":{"filterValues":[{"propertyName":"email|string","value":"={{ $json['Company Email 1 Modified'] || $json['Personal Email 1 Modified'] }}"}]}}]},"additionalFields":{}},"id":"ca7792cb-fb97-44a3-8982-65ce2b751207","name":"In HubSpot?","type":"n8n-nodes-base.hubspot","typeVersion":2.1,"position":[220,440],"alwaysOutputData":true,"credentials":{"hubspotAppToken":{"id":"B4qJi5bVNVRoRnuV","name":"ispartnersllc.com Hubspot App Token"}},"onError":"continueRegularOutput"},{"parameters":{"method":"POST","url":"https://api.leadmagic.io/email-validate","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"X-API-Key","value":"0a1af248e494d0f8e3a5b3a3b1fa6458"},{"name":"X-API-Key","value":"0a1af248e494d0f8e3a5b3a3b1fa6458"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"email\": \"{{ $json.datas[0].contact.most_probable_email }}\"\n} ","options":{}},"id":"b0f604aa-e85d-4a89-9c7a-e8b82359e43a","name":"Enrich - LeadMagic","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[1480,640],"credentials":{"httpHeaderAuth":{"id":"E3a4c0yQ9M4DqcLH","name":"Header Auth account 2"}}},{"parameters":{"url":"=https://app.fullenrich.com/api/v1/contact/enrich/bulk/{{ $json.enrichment_id }}","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{}]},"options":{}},"id":"ca99657e-d5da-4cf5-802d-d869e9c30708","name":"Full Enrich (Results)","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[700,660],"credentials":{"httpHeaderAuth":{"id":"pHHyIzsitrgPhcLu","name":"FullEnrich Header Auth"}}},{"parameters":{"method":"POST","url":"https://app.fullenrich.com/api/v1/contact/enrich/bulk","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendBody":true,"specifyBody":"=json","bodyParameters":{"parameters":[{}]},"jsonBody":"={\n  \"name\": \"Enrichment Request {{ $('Washing Machine').item.json[\"Timestamp Modified\"] }}\",\n  \"webhook_url\": \"https://app.fullenrich.com/api/v1/contact/enrich/bulk\",\n  \"datas\": [\n    {\n      \"firstname\": \"{{ $('Washing Machine').item.json['First Name Modified'] }}\",\n      \"lastname\": \"{{ $('Washing Machine').item.json['Last Name Modified'] }}\",\n      \"domain\": \"{{ $('Washing Machine').item.json['Root Domain Modified'] }}\",\n      \"company_name\": \"{{ $('Washing Machine').item.json['Company Name Modified'] }}\",\n      \"linkedin_url\": \"{{ $('Washing Machine').item.json['LinkedIn Profile Modified'] }}\",\n      \"enrich_fields\": [\"contact.emails\", \"contact.phones\"],\n      \"custom\": {\n        \"user_id\": \"fadfb09b-02c7-4655-b852-9381248d35a2\"\n      }\n    }\n  ]\n}","options":{}},"id":"e462389f-1787-4e7b-b9ef-10dc9bb095d2","name":"Full Enrich (Verify POST)","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[520,440],"credentials":{"httpHeaderAuth":{"id":"pHHyIzsitrgPhcLu","name":"FullEnrich Header Auth"}}},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"id":"6c72eb50-4c7a-46ca-b124-7911a9238c74","name":"Merge","type":"n8n-nodes-base.merge","typeVersion":3,"position":[1580,-20]},{"parameters":{"jsCode":"// Function Node: Structure Enriched Data\n\n// Import necessary modules if needed (n8n automatically provides required modules)\n\n// Iterate over each incoming item\nreturn items.map(item => {\n    const data = item.json;\n\n    // Initialize the structured output\n    const structuredData = {\n        work: {\n            \"work-name\": \"\",\n            \"work-industry\": \"\",\n            \"work-size\": \"\",\n            \"work-founded-year\": \"\",\n            \"work-location\": \"\",\n            \"work-type\": \"\",\n            \"work-domain\": \"\",\n            \"work-title\": \"\",\n            \"work-organization\": \"\",\n            \"work-name-normalized\": \"\",\n            \"work-name-verified\": false,\n            \"work-location-name\": \"\",\n            \"work-location-locality\": \"\",\n            \"work-location-region\": \"\",\n            \"work-location-country\": \"\",\n            \"work-email\": \"\",\n            \"work-email-most-probable\": \"\",\n            \"work-phone\": \"\",\n            \"work-phone-most-probable\": \"\",\n            \"work-url-linkedin\": \"\",\n            \"work-id-linkedin\": \"\",\n            \"work-url-website\": \"\",\n            \"work-name-modified\": \"\",\n            \"work-industry-modified\": \"\",\n            \"work-domain-modified\": \"\",\n            \"work-title-modified\": \"\",\n            \"work-location-country-modified\": \"\",\n            \"work-location-city-modified\": \"\",\n            \"work-location-state-modified\": \"\",\n            \"work-email-modified\": \"\",\n            \"work-phone-modified\": \"\",\n            \"work-page-visited-modified\": \"\"\n        },\n        personal: {\n            \"personal-firstname\": \"\",\n            \"personal-lastname\": \"\",\n            \"personal-avatar\": \"\",\n            \"personal-email\": \"\",\n            \"personal-geolocation\": \"\",\n            \"personal-phone\": \"\",\n            \"personal-url-linkedin\": \"\",\n            \"personal-url-facebook\": \"\",\n            \"personal-url-twitter\": \"\",\n            \"personal-firstname-modified\": \"\",\n            \"personal-lastname-modified\": \"\",\n            \"personal-email-modified\": \"\",\n            \"personal-phone-modified\": \"\",\n            \"personal-url-linkedin-modified\": \"\"\n        },\n        technical: {\n            \"technical-email-status\": \"\",\n            \"technical-domain-catch-all\": \"\",\n            \"technical-mx-record\": \"\",\n            \"technical-mx-provider\": \"\",\n            \"technical-mx-security-gateway\": \"\",\n            \"technical-user-id\": \"\",\n            \"technical-source-domain\": \"\",\n            \"technical-user-agent\": \"\",\n            \"technical-user-ip\": \"\",\n            \"technical-source-url\": \"\",\n            \"technical-timestamp\": \"\",\n            \"technical-data-provider\": \"\",\n            \"technical-data-source\": \"\",\n            \"technical-timestamp-modified\": \"\"\n        }\n    };\n\n    // Helper function to safely access nested fields\n    const getNested = (obj, path, defaultValue = \"\") => {\n        return path.split('.').reduce((acc, part) => acc && acc[part] !== undefined ? acc[part] : defaultValue, obj);\n    };\n\n    // Populate 'work' section\n    structuredData.work[\"work-name\"] = data[\"Company Name Modified\"] || getNested(data, \"organization.name\");\n    structuredData.work[\"work-industry\"] = data[\"Industry Modified\"] || getNested(data, \"organization.industry\");\n    structuredData.work[\"work-size\"] = data[\"organization.company_size\"] || data[\"company_size\"] || \"\";\n    structuredData.work[\"work-founded-year\"] = data[\"company_founded\"] || \"\";\n    structuredData.work[\"work-location\"] = data[\"organization.location.address\"] || `${data[\"City Modified\"]}, ${data[\"State Modified\"]}` || \"\";\n    structuredData.work[\"work-type\"] = data[\"organization.company_type\"] || \"\";\n    structuredData.work[\"work-domain\"] = data[\"Root Domain Modified\"] || \"\";\n    structuredData.work[\"work-title\"] = data[\"Job Title Modified\"] || \"\";\n    structuredData.work[\"work-organization\"] = data[\"organization.name\"] || \"\";\n    structuredData.work[\"work-name-normalized\"] = data[\"normalized_company_name\"] || \"\";\n    structuredData.work[\"work-name-verified\"] = data[\"company_name_verified\"] || false;\n    structuredData.work[\"work-location-name\"] = getNested(data, \"organization.location.name\");\n    structuredData.work[\"work-location-locality\"] = getNested(data, \"organization.location.locality\");\n    structuredData.work[\"work-location-region\"] = getNested(data, \"organization.location.region\");\n    structuredData.work[\"work-location-country\"] = getNested(data, \"organization.location.country\") || data[\"Country Modified\"] || \"\";\n    structuredData.work[\"work-email\"] = data[\"Company Email 1 Modified\"] || \"\";\n    structuredData.work[\"work-email-most-probable\"] = getNested(data, \"contact.most_probable_email\") || \"\";\n    structuredData.work[\"work-phone\"] = data[\"Phone - Company Modified\"] || \"\";\n    structuredData.work[\"work-phone-most-probable\"] = getNested(data, \"contact.most_probable_phone\") || \"\";\n    structuredData.work[\"work-url-linkedin\"] = data[\"LinkedIn Profile Modified\"] || \"\";\n    structuredData.work[\"work-id-linkedin\"] = data[\"company_linkedin_id\"] || getNested(data, \"company_linkedin_id\") || \"\";\n    structuredData.work[\"work-url-website\"] = getNested(data, \"organization.urls.website\") || data[\"sourceDomain\"] || \"\";\n    structuredData.work[\"work-name-modified\"] = data[\"Full Name Modified\"] || \"\";\n    structuredData.work[\"work-industry-modified\"] = data[\"company_industry\"] || \"\";\n    structuredData.work[\"work-domain-modified\"] = data[\"Root Domain Modified\"] || \"\";\n    structuredData.work[\"work-title-modified\"] = data[\"Job Title Modified\"] || \"\";\n    structuredData.work[\"work-location-country-modified\"] = data[\"Country Modified\"] || \"\";\n    structuredData.work[\"work-location-city-modified\"] = data[\"City Modified\"] || \"\";\n    structuredData.work[\"work-location-state-modified\"] = data[\"State Modified\"] || \"\";\n    structuredData.work[\"work-email-modified\"] = data[\"Company Email 1 Modified\"] || \"\";\n    structuredData.work[\"work-phone-modified\"] = data[\"Phone - Company Modified\"] || \"\";\n    structuredData.work[\"work-page-visited-modified\"] = data[\"Page Visited Modified\"] || \"\";\n\n    // Populate 'personal' section\n    structuredData.personal[\"personal-firstname\"] = data[\"First Name Modified\"] || getNested(data, \"contact.firstname\") || \"\";\n    structuredData.personal[\"personal-lastname\"] = data[\"Last Name Modified\"] || getNested(data, \"contact.lastname\") || \"\";\n    structuredData.personal[\"personal-avatar\"] = data[\"person.avatar\"] || \"\";\n    structuredData.personal[\"personal-email\"] = data[\"Personal Email 1 Modified\"] || \"\";\n    structuredData.personal[\"personal-geolocation\"] = data[\"userGeolocation\"] || \"\";\n    structuredData.personal[\"personal-phone\"] = data[\"Phone - Personal Modified\"] || \"\";\n    structuredData.personal[\"personal-url-linkedin\"] = getNested(data, \"person.urls.linkedin\") || \"\";\n    structuredData.personal[\"personal-url-facebook\"] = getNested(data, \"person.urls.facebook\") || \"\";\n    structuredData.personal[\"personal-url-twitter\"] = getNested(data, \"person.urls.twitter\") || \"\";\n    structuredData.personal[\"personal-firstname-modified\"] = data[\"First Name Modified\"] || \"\";\n    structuredData.personal[\"personal-lastname-modified\"] = data[\"Last Name Modified\"] || \"\";\n    structuredData.personal[\"personal-email-modified\"] = data[\"Personal Email 1 Modified\"] || \"\";\n    structuredData.personal[\"personal-phone-modified\"] = data[\"Phone - Personal Modified\"] || \"\";\n    structuredData.personal[\"personal-url-linkedin-modified\"] = getNested(data, \"person.urls.linkedin\") || \"\";\n\n    // Populate 'technical' section\n    structuredData.technical[\"technical-email-status\"] = data[\"email_status\"] || \"\";\n    structuredData.technical[\"technical-domain-catch-all\"] = data[\"is_domain_catch_all\"] || \"\";\n    structuredData.technical[\"technical-mx-record\"] = data[\"mx_record\"] || \"\";\n    structuredData.technical[\"technical-mx-provider\"] = data[\"mx_provider\"] || \"\";\n    structuredData.technical[\"technical-mx-security-gateway\"] = data[\"mx_security_gateway\"] || \"\";\n    structuredData.technical[\"technical-user-id\"] = getNested(data, \"custom.user_id\") || \"\";\n    structuredData.technical[\"technical-source-domain\"] = data[\"sourceDomain\"] || \"\";\n    structuredData.technical[\"technical-user-agent\"] = data[\"userAgent\"] || \"\";\n    structuredData.technical[\"technical-user-ip\"] = data[\"userIp\"] || \"\";\n    structuredData.technical[\"technical-source-url\"] = data[\"sourceUrl\"] || \"\";\n    structuredData.technical[\"technical-timestamp\"] = data[\"timestamp\"] || \"\";\n    structuredData.technical[\"technical-data-provider\"] = data[\"data_provider\"] || \"\";\n    structuredData.technical[\"technical-data-source\"] = data[\"sourceDomain\"] || \"\";\n    structuredData.technical[\"technical-timestamp-modified\"] = data[\"Timestamp Modified\"] || \"\";\n\n    // Handle Lead Magic Data if present\n    // Assuming Lead Magic data is merged into the same item\n    if (data[\"email\"] && data[\"email_status\"]) {\n        structuredData.technical[\"technical-email-status\"] = data[\"email_status\"];\n        structuredData.technical[\"technical-domain-catch-all\"] = data[\"is_domain_catch_all\"];\n        structuredData.technical[\"technical-mx-record\"] = data[\"mx_record\"];\n        structuredData.technical[\"technical-mx-provider\"] = data[\"mx_provider\"];\n        structuredData.technical[\"technical-mx-security-gateway\"] = data[\"mx_security_gateway\"];\n        structuredData.technical[\"technical-timestamp\"] = data[\"timestamp\"];\n    }\n\n    // Optionally, handle additional nested data or specific provider data\n    // Example: Vector-specific fields\n    if (data[\"data_provider\"] === \"Vector\") {\n        structuredData.work[\"work-type\"] = data[\"type\"] || \"\";\n        structuredData.work[\"work-id-linkedin\"] = data[\"vvid\"] || \"\";\n        structuredData.technical[\"technical-user-id\"] = data[\"hem\"] || \"\";\n    }\n\n    // Example: OpenSend-specific fields can be handled similarly\n    if (data[\"data_provider\"] === \"OpenSend\") {\n        // Assign OpenSend-specific fields if any\n        // For instance, if there are additional fields\n    }\n\n    return {\n        json: structuredData\n    };\n});\n"},"id":"e53762d2-e0d0-4207-bb12-d77d80a6b32c","name":"Structure Enriched Data","type":"n8n-nodes-base.code","typeVersion":2,"position":[1800,340]},{"parameters":{"method":"POST","url":"https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-fb02a29a-873b-41a7-886d-9191013a9751","sendBody":true,"bodyParameters":{"parameters":[{"name":"timestamp","value":"={{ $('Washing Machine').item.json['Timestamp Modified'] }}"},{"name":"First Name","value":"={{ $('Washing Machine').item.json['First Name Modified'] }}"},{"name":"Last Name","value":"={{$('Washing Machine').item.json['Last Name Modified'] }}"},{"name":"Page Visited","value":"={{$('Washing Machine').item.json['Page Visited Modified']||$('Washing Machine').item.json[\"pageUrl\"] || $('Washing Machine').item.json[\"sourceUrl\"] || $('Washing Machine').item.json[\"webPageUrl\"] || $('Washing Machine').item.json[\"Page Visited Modified\"] || \"No URL available\"}}\n"},{"name":"Page Title (Webhook)","value":"={{$('Washing Machine').item.json[\"pageTitle\"] ||$('Washing Machine').item.json[\"Page Title\"] || $('Washing Machine').item.json[\"page title\"] || $('Washing Machine').item.json[\"Page Title Modified\"] || null}}\n"},{"name":"LinkedIn - Person","value":"=\n{{ $json['LinkedIn Profile Modified'] }}"},{"name":"Job Title - Person","value":"={{ $json['Job Title Modified'] }}"},{"name":"Website","value":"={{ $json['organization.urls.website'] }}"},{"name":"Work Email","value":"={{ $('Email Exists and is Deliverable?').item.json.datas[0].contact.most_probable_email || $json['Company Email 1 Modified'] || $('Washing Machine').item.json.email }}\n"},{"name":"Company Name","value":"={{ $json.normalized_company_name }}"},{"name":"Company (Normalized)","value":"={{ $json.normalized_company_name }}\n"},{"name":"LinkedIn - Company","value":"={{ $('Enrich - LeadMagic').item.json.company_linkedin_url }}"},{"name":"Source","value":"={{ $json.data_provider }}"},{"name":"Country","value":"={{ $('Washing Machine').item.json['Country Modified'] }}"},{"name":"Vvid","value":"={{ $json.vvid }}"},{"name":"Facebook - Person","value":"={{ $('Webhook').item.json.body['person.urls.facebook'] }}"},{"name":"Twitter - Person","value":"={{ $('Webhook').item.json.body['person.urls.twitter'] }}"},{"name":"Github - Person","value":"={{ $('Webhook').item.json.body['person.urls.github'] }}"},{"name":"Phone - Person","value":"={{ $('Email Exists and is Deliverable?').item.json.datas[0].contact.most_probable_phone || $('Webhook').item.json.body.person.phone_numbers[0] }}"},{"name":"Phone 2 - Person","value":"={{ $('Webhook').item.json.body.person.phone_numbers[1] }}"},{"name":"Facebook - Company","value":"={{ $('Webhook').item.json.body['organization.urls.facebook'] }}"},{"name":"Instagram - Company","value":"={{ $('Webhook').item.json.body['organization.urls.instagram'] }}"},{"name":"Monster - Company","value":"={{ $('Webhook').item.json.body['organization.urls.monster'] }}"},{"name":"Company - Pitchbook","value":"={{ $('Webhook').item.json.body['organization.urls.pitchbook'] }}"},{"name":"Company - Crunchbase","value":"={{ $('Webhook').item.json.body['organization.urls.crunchbase'] }}"},{"name":"Company - Angellist","value":"={{ $('Webhook').item.json.body['organization.urls.angellist'] }}"},{"name":"Company - Indeed","value":"={{ $('Webhook').item.json.body['organization.urls.indeed'] }}"},{"name":"Company - Glassdoor","value":"={{ $('Webhook').item.json.body['organization.urls.glassdoor'] }}"},{"name":"Phone - Company","value":"={{ $('Webhook').item.json.body.organization.phone_numbers[0] }}"},{"name":"Phone 2 - Company","value":"={{ $('Webhook').item.json.body.organization.phone_numbers[1] }}"},{"name":"Company Size","value":"={{ $('Webhook').item.json.body.organization.company_size }}"},{"name":"oir_source","value":"={{ $('Webhook').item.json.body.oir_source }}"},{"name":"Industry","value":"={{ $json['Industry Modified'] }}"}]},"options":{}},"id":"3cf183a8-b781-4ce3-b600-c7ec3c7a68a2","name":"HTTP Request","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2020,-20]}],"connections":{"Wait":{"main":[[{"node":"Full Enrich (Results)","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"Washing Machine","type":"main","index":0}]]},"Washing Machine":{"main":[[{"node":"In HubSpot?","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"Email Exists and is Deliverable?":{"main":[[{"node":"Set Full Name","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"Set Full Name":{"main":[[{"node":"Enrich - LeadMagic","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"In HubSpot?":{"main":[[{"node":"Full Enrich (Verify POST)","type":"main","index":0}]]},"Enrich - LeadMagic":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Full Enrich (Results)":{"main":[[{"node":"Email Exists and is Deliverable?","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"Full Enrich (Verify POST)":{"main":[[{"node":"Wait","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"Merge":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true,"templateId":"1750"},"pinData":{},"versionId":"d27d6915-fb92-48b2-a6bd-883b3782e084","triggerCount":1,"tags":[{"createdAt":"2024-09-15T22:18:06.078Z","updatedAt":"2024-09-15T22:19:25.444Z","id":"BBZbUycIv0KFUxjV","name":"visitor identification"},{"createdAt":"2024-09-16T17:47:31.046Z","updatedAt":"2024-09-16T17:47:31.046Z","id":"S6G5nzOVVSQAgvEd","name":"ispartnersllc.com"}]}