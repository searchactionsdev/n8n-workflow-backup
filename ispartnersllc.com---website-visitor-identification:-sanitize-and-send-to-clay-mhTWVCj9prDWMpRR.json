{"createdAt":"2024-09-16T17:47:33.411Z","updatedAt":"2024-12-19T18:01:58.000Z","id":"mhTWVCj9prDWMpRR","name":"ispartnersllc.com - Website Visitor Identification: Sanitize and send to Clay","active":true,"nodes":[{"parameters":{"jsCode":"// Iterate through each incoming item\nfor (let item of items) {\n    // Access 'First Name' and 'Last Name' directly from the top-level of the item\n    const firstName = item.json['First Name'] ? item.json['First Name'].trim() : '';\n    const lastName = item.json['Last Name'] ? item.json['Last Name'].trim() : '';\n    \n    // Combine first name and last name to create 'Full Name Modified'\n    let fullNameModified = `${firstName} ${lastName}`.trim();\n    \n    // Assign 'Full Name Modified' to the top-level of the item\n    item.json['Full Name Modified'] = fullNameModified;\n    \n    // If either first name or last name is missing, handle it (e.g., by setting to empty or log)\n    if (!firstName && !lastName) {\n        item.json['Full Name Modified'] = '';\n    }\n}\n\n// Return the modified items to n8n\nreturn items;\n"},"id":"103f11fd-693a-43ac-87e2-86adfc7b64c6","name":"Set Full Name","type":"n8n-nodes-base.code","typeVersion":2,"position":[1180,-60]},{"parameters":{"language":"python","pythonCode":"import re\nfrom datetime import datetime, timezone\nfrom urllib.parse import urlparse, urlunparse\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.DEBUG, format='%(message)s')\n\n# Helper Functions\ndef preprocess(name):\n    \"\"\"Strip leading and trailing whitespace from a name.\"\"\"\n    return name.strip()\n\ndef remove_legal_designations(name):\n    \"\"\"Remove legal designations from company names.\"\"\"\n    patterns = [\n        r',?\\s*(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\.?$',\n        r'^(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\s+',\n        r'\\s+\\(.*\\)$'\n    ]\n    for pattern in patterns:\n        name = re.sub(pattern, '', name, flags=re.IGNORECASE)\n    return name.strip()\n\ndef remove_generic_descriptors(name):\n    \"\"\"Remove generic descriptors from company names.\"\"\"\n    generic_terms = [\n        \"Group\", \"Holdings\", \"Media\", \"Solutions\", \"Services\", \"Systems\",\n        \"Technologies\", \"International\", \"Incorporated\", \"Associates\", \"Partners\",\n        \"Enterprises\", \"Industries\", \"Limited\", \"Global\", \"Network\", \"Corporation\",\n        \"Investment\", \"Ventures\", \"Consulting\", \"Logistics\", \"Management\"\n    ]\n    words = name.split()\n    while words and words[-1].strip().lower() in [term.lower() for term in generic_terms]:\n        words.pop()\n    return \" \".join(words)\n\ndef simplify_educational_institution(name):\n    \"\"\"Simplify names of educational institutions.\"\"\"\n    EDUCATIONAL_KEYWORDS = {\"university\", \"college\", \"institute\", \"school\"}\n    words = name.lower().split()\n    for i, word in enumerate(words):\n        if word in EDUCATIONAL_KEYWORDS:\n            return \" \".join(words[:i+1]).title()\n    return name\n\ndef handle_religious_organizations(name):\n    \"\"\"Handle names of religious organizations.\"\"\"\n    RELIGIOUS_KEYWORDS = {\"church\", \"temple\", \"mosque\", \"synagogue\", \"ministry\", \"chapel\"}\n    words = name.split()\n    if any(keyword in name.lower() for keyword in RELIGIOUS_KEYWORDS):\n        return \" \".join(words[:6])\n    return name\n\ndef handle_government_departments(name):\n    \"\"\"Handle names of government departments.\"\"\"\n    GOVERNMENT_KEYWORDS = {\"department\", \"agency\", \"bureau\", \"office\", \"administration\"}\n    words = name.split()\n    if any(keyword in name.lower() for keyword in GOVERNMENT_KEYWORDS):\n        return \" \".join(words[:8])\n    return name\n\ndef normalize_capitalization(name):\n    \"\"\"Normalize capitalization of words in a name.\"\"\"\n    words = name.split()\n    normalized_words = []\n    for word in words:\n        if word.isupper() and len(word) > 1:\n            if word.upper() in [\"NYC\", \"IBM\", \"USA\", \"UK\"]:\n                normalized_words.append(word.upper())\n            else:\n                normalized_words.append(word.capitalize())\n        else:\n            normalized_words.append(word)\n    return \" \".join(normalized_words)\n\ndef modify_company_name(name):\n    \"\"\"Modify company name by applying various normalization functions.\"\"\"\n    name = preprocess(name)\n    name = remove_legal_designations(name)\n    name = remove_generic_descriptors(name)\n    name = simplify_educational_institution(name)\n    name = handle_religious_organizations(name)\n    name = handle_government_departments(name)\n    name = normalize_capitalization(name)\n    return name.strip()\n\ndef remove_trailing_phrases(title):\n    \"\"\"Remove trailing phrases starting with specific prepositions.\"\"\"\n    words = title.split()\n    for i, word in enumerate(words):\n        if word.lower() in ['at', 'for', 'with', 'by', 'in'] and i > 0:\n            return ' '.join(words[:i])\n    return title\n\ndef extract_main_area(area_text):\n    \"\"\"Extract the main area of responsibility from a text.\"\"\"\n    keywords = [\n        'Cloud Infrastructure', 'Cloud', 'Infrastructure', 'Security', 'Compliance',\n        'Growth', 'Marketing', 'Finance', 'Operations', 'Recreation', 'Communications',\n        'Outreach', 'Employee Benefits', 'Well-Being'\n    ]\n    matched_keywords = [keyword for keyword in keywords if keyword.lower() in area_text.lower()]\n    if matched_keywords:\n        return matched_keywords[0]\n    else:\n        phrases = area_text.split()\n        return ' '.join(phrases[:2])\n\ndef normalize_job_title(title):\n    \"\"\"Normalize job titles to a consistent format.\"\"\"\n    if not title or not isinstance(title, str):\n        logging.debug(\"Title is empty, None, or not a string.\")\n        return ''\n    logging.debug(f\"Original title: '{title}'\")\n    \n    # Convert to title case\n    title = title.title()\n    logging.debug(f\"Title case: '{title}'\")\n    \n    # Remove any text before '|'\n    if '|' in title:\n        parts = [part.strip() for part in title.split('|')]\n        # Keywords that indicate a job title\n        job_keywords = ['Founder', 'CEO', 'Manager', 'Director', 'Engineer', 'Officer', 'VP', 'Head', 'Chief', 'Partner']\n        for part in parts:\n            if any(keyword.lower() in part.lower() for keyword in job_keywords):\n                title = part\n                logging.debug(f\"Selected job title part: '{title}'\")\n                break\n        else:\n            title = parts[-1]\n            logging.debug(f\"No job keyword found. Defaulted to last part: '{title}'\")\n    \n    # Remove trailing phrases starting with prepositions\n    original_title = title\n    title = remove_trailing_phrases(title)\n    if title != original_title:\n        logging.debug(f\"Removed trailing phrase: '{title}'\")\n    \n    # Remove common prefixes\n    prefixes = [\n        'Senior', 'Sr\\.?', 'Junior', 'Jr\\.?', 'Lead', 'Principal', 'Global',\n        'Collaborator', 'Associate', 'Assistant'\n    ]\n    for prefix in prefixes:\n        pattern = r'^' + prefix + r'\\s+'\n        new_title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Removed prefix '{prefix}': '{new_title}'\")\n            title = new_title\n    \n    # Split at commas and rearrange if needed\n    if ',' in title:\n        parts = [part.strip() for part in title.split(',')]\n        if len(parts) >= 2:\n            role = parts[0]\n            area = ', '.join(parts[1:])\n            # Extract main area\n            main_area = extract_main_area(area)\n            # Construct the title\n            title = f\"{role} of {main_area}\"\n            logging.debug(f\"Constructed title: '{title}'\")\n        else:\n            title = parts[0]\n            logging.debug(f\"Removed text after comma: '{title}'\")\n    \n    # Simplify specific titles\n    title_mappings = [\n        (r'Head,?\\s+(.*)', r'Head of \\1'),\n        (r'Vice President\\s+(.*)', r'VP of \\1'),\n        (r'Vice President$', 'Vice President'),\n        (r'Vp', 'VP'),\n        (r'^(Manager|Director)\\s+Of\\s+(.*)', r'\\1 of \\2'),\n        (r'^(Manager|Director)\\s+(.*)', r'\\1 of \\2'),\n        # Retain 'Chief X Officer' as is\n        # (r'Chief\\s+(\\w+)\\s+Officer$', r'Chief \\1 Officer'),\n        (r'Global\\s+(.*)', r'\\1'),\n    ]\n    for pattern, replacement in title_mappings:\n        new_title = re.sub(pattern, replacement, title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Applied mapping '{pattern}' -> '{replacement}': '{new_title}'\")\n            title = new_title\n    \n    # Remove redundant words only if they are standalone\n    redundant_words = ['The', 'I&D', 'Licensed', 'Va']\n    for word in redundant_words:\n        pattern = r'\\b' + re.escape(word) + r'\\b'\n        new_title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n        if new_title != title:\n            logging.debug(f\"Removed redundant word '{word}': '{new_title}'\")\n            title = new_title\n    \n    # Handle taglines\n    if re.search(r'\\b(Helping|Building|Creating|Providing)\\b', title, flags=re.IGNORECASE):\n        logging.debug(\"Title appears to be a tagline. Normalizing to empty string.\")\n        return ''\n    \n    # Remove extra spaces\n    title = re.sub(r'\\s+', ' ', title).strip()\n    logging.debug(f\"Cleaned up extra spaces: '{title}'\")\n    \n    # Capitalize proper nouns\n    title = ' '.join([word if word.isupper() else word.capitalize() for word in title.split()])\n    \n    # Limit to first five words\n    words = title.split()\n    if len(words) > 5:\n        title = ' '.join(words[:5])\n        logging.debug(f\"Limited to first five words: '{title}'\")\n    \n    logging.debug(f\"Final normalized title: '{title}'\")\n    logging.debug(\"===================================\")\n    \n    return title\n\ndef normalize_state(state):\n    \"\"\"Convert full state names to their abbreviations.\"\"\"\n    state_dict = {\n        'Alabama': 'AL', 'Alaska': 'AK', 'Arizona': 'AZ', 'Arkansas': 'AR', 'California': 'CA',\n        'Colorado': 'CO', 'Connecticut': 'CT', 'Delaware': 'DE', 'Florida': 'FL', 'Georgia': 'GA',\n        'Hawaii': 'HI', 'Idaho': 'ID', 'Illinois': 'IL', 'Indiana': 'IN', 'Iowa': 'IA',\n        'Kansas': 'KS', 'Kentucky': 'KY', 'Louisiana': 'LA', 'Maine': 'ME', 'Maryland': 'MD',\n        'Massachusetts': 'MA', 'Michigan': 'MI', 'Minnesota': 'MN', 'Mississippi': 'MS', 'Missouri': 'MO',\n        'Montana': 'MT', 'Nebraska': 'NE', 'Nevada': 'NV', 'New Hampshire': 'NH', 'New Jersey': 'NJ',\n        'New Mexico': 'NM', 'New York': 'NY', 'North Carolina': 'NC', 'North Dakota': 'ND', 'Ohio': 'OH',\n        'Oklahoma': 'OK', 'Oregon': 'OR', 'Pennsylvania': 'PA', 'Rhode Island': 'RI', 'South Carolina': 'SC',\n        'South Dakota': 'SD', 'Tennessee': 'TN', 'Texas': 'TX', 'Utah': 'UT', 'Vermont': 'VT',\n        'Virginia': 'VA', 'Washington': 'WA', 'West Virginia': 'WV', 'Wisconsin': 'WI', 'Wyoming': 'WY',\n        'District of Columbia': 'DC'\n    }\n    \n    state = state.strip().title()\n    \n    if len(state) == 2 and state.isalpha():\n        return state.upper()\n    \n    if state in state_dict:\n        return state_dict[state]\n    \n    return state\n\ndef is_us_state(state):\n    \"\"\"Check if the state abbreviation is a valid US state.\"\"\"\n    us_states = set([\n        'AL', 'AK', 'AZ', 'AR', 'CA', 'CO', 'CT', 'DE', 'FL', 'GA',\n        'HI', 'ID', 'IL', 'IN', 'IA', 'KS', 'KY', 'LA', 'ME', 'MD',\n        'MA', 'MI', 'MN', 'MS', 'MO', 'MT', 'NE', 'NV', 'NH', 'NJ',\n        'NM', 'NY', 'NC', 'ND', 'OH', 'OK', 'OR', 'PA', 'RI', 'SC',\n        'SD', 'TN', 'TX', 'UT', 'VT', 'VA', 'WA', 'WV', 'WI', 'WY',\n        'DC'\n    ])\n    return state.upper() in us_states\n\ndef format_phone_number(phone):\n    \"\"\"Format phone numbers to a standardized format.\"\"\"\n    if not phone or not isinstance(phone, str):\n        return ''\n    digits = re.sub(r'\\D', '', phone)\n    \n    if len(digits) < 10:\n        return ''\n    \n    if len(digits) == 10:\n        return f'+1-{digits[:3]}-{digits[3:6]}-{digits[6:]}'\n    elif len(digits) == 11 and digits[0] == '1':\n        return f'+{digits[0]}-{digits[1:4]}-{digits[4:7]}-{digits[7:]}'\n    \n    return f'+{digits[:2]}-{digits[2:5]}-{digits[5:8]}-{digits[8:]}'\n\ndef extract_domain(url):\n    \"\"\"Extract the domain from a URL.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    if not url.startswith(('http://', 'https://')):\n        url = 'http://' + url\n    match = re.search(r'://(www\\.)?([^/:]+)', url)\n    if match:\n        domain = match.group(2)\n        return domain.lower()\n    else:\n        return ''\n\ndef extract_root_domain(url):\n    \"\"\"Extract the root domain from a URL.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    if not url.startswith(('http://', 'https://')):\n        url = 'http://' + url\n    parsed_url = urlparse(url)\n    domain_parts = parsed_url.netloc.split('.')\n    if len(domain_parts) > 2:\n        return '.'.join(domain_parts[-2:])\n    return parsed_url.netloc\n\ndef clean_url(url):\n    \"\"\"Clean a URL by removing query parameters and fragments.\"\"\"\n    if not url or not isinstance(url, str):\n        return ''\n    parsed_url = urlparse(url)\n    # Remove query parameters and fragments\n    cleaned_url = urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path.rstrip('/'), '', '', ''))\n    return cleaned_url\n\ndef identify_provider(data):\n    \"\"\"Identify the data provider based on unique fields.\"\"\"\n    if 'vvid' in data and 'companyDomain' in data:\n        return 'Vector'\n    elif 'Company Name' in data and 'Website' in data:\n        return 'RB2B'\n    elif 'oir_source' in data:\n        return 'OpenSend'\n    else:\n        # Additional check for OpenSend based on presence of 'person' and 'organization'\n        if 'person' in data and 'organization' in data:\n            return 'OpenSend'\n        return 'Unknown'\n\ndef get_unified_fields(data, provider, timestamp):\n    \"\"\"Extract and unify fields from different providers.\"\"\"\n    unified = {}\n    \n    unified['In Hubspot'] = 'hs_object_id' in data.get('properties', {})\n    \n    # Normalize the job title\n    if provider == 'Vector':\n        original_title = data.get('title', '')\n    elif provider == 'RB2B':\n        original_title = data.get('Title', '')\n    elif provider == 'OpenSend':\n        original_title = data.get('person', {}).get('title', '')\n    else:\n        original_title = ''\n    \n    normalized_title = normalize_job_title(original_title)\n    unified['Job Title Modified'] = normalized_title\n\n    # Clean the Page Visited URL\n    if provider == 'Vector':\n        page_url = data.get('pageUrl', '')\n    elif provider == 'RB2B':\n        page_url = data.get('Captured URL', '')\n    elif provider == 'OpenSend':\n        page_url = data.get('sourceUrl', '')\n    else:\n        page_url = ''\n    \n    cleaned_page_url = clean_url(page_url)\n    unified['Page Visited Modified'] = cleaned_page_url\n\n    # Initialize variables for first name and last name\n    first_name = ''\n    last_name = ''\n\n    if provider == 'Vector':\n        first_name = data.get('firstName', '')\n        last_name = data.get('lastName', '')\n        unified['Company Name Modified'] = data.get('company', '')\n        unified['Company Email 1 Modified'] = data.get('externalId', '')\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = format_phone_number(data.get('phone', ''))\n        unified['LinkedIn Profile Modified'] = data.get('linkedinUrl', '')\n        location = data.get('location', '').split(', ')\n        unified['City Modified'] = location[0] if len(location) > 0 else ''\n        unified['State Modified'] = normalize_state(location[1] if len(location) > 1 else '')\n        unified['Country Modified'] = 'United States' if is_us_state(unified['State Modified']) else ''\n        unified['Root Domain Modified'] = extract_root_domain(data.get('companyDomain', ''))\n        unified['Industry Modified'] = data.get('industry', '')\n\n    elif provider == 'RB2B':\n        first_name = data.get('First Name', '')\n        last_name = data.get('Last Name', '')\n        unified['Company Name Modified'] = data.get('Company Name', '')\n        unified['Company Email 1 Modified'] = data.get('Business Email', '')\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = format_phone_number(data.get('Phone', ''))\n        unified['LinkedIn Profile Modified'] = data.get('Linked In URL', '')\n        unified['City Modified'] = data.get('City', '')\n        unified['State Modified'] = normalize_state(data.get('State', ''))\n        unified['Country Modified'] = 'United States' if is_us_state(unified['State Modified']) else ''\n        unified['Root Domain Modified'] = extract_root_domain(data.get('Website', ''))\n        unified['Industry Modified'] = data.get('Industry', '')\n\n    elif provider == 'OpenSend':\n        person_data = data.get('person', {})\n        first_name = person_data.get('first_name', '')\n        last_name = person_data.get('last_name', '')\n        unified['Company Name Modified'] = data.get('organization', {}).get('name', '')\n        \n        emails = data.get('emails', [])\n        work_emails = [email['email'] for email in emails if email.get('label', '').lower() == 'work']\n        \n        if work_emails and data.get('email') == work_emails[0]:\n            unified['Company Email 1 Modified'] = work_emails[0]\n        elif work_emails:\n            unified['Company Email 1 Modified'] = work_emails[0]\n        else:\n            unified['Company Email 1 Modified'] = next((email['email'] for email in emails if 'email' in email), '')\n        \n        personal_emails = [email['email'] for email in emails if email.get('label', '').lower() == 'personal']\n        unified['Personal Email 1 Modified'] = personal_emails[0] if personal_emails else ''\n        \n        # Extract phone numbers from organization and person\n        org_phone_numbers = data.get('organization', {}).get('phone_numbers', [])\n        if isinstance(org_phone_numbers, list):\n            org_phone = org_phone_numbers[0] if len(org_phone_numbers) > 0 else ''\n        else:\n            org_phone = org_phone_numbers\n        unified['Phone - Company Modified'] = format_phone_number(org_phone)\n        \n        person_phone_numbers = person_data.get('phone_numbers', [])\n        if isinstance(person_phone_numbers, list):\n            person_phone = person_phone_numbers[0] if len(person_phone_numbers) > 0 else ''\n        else:\n            person_phone = person_phone_numbers\n        unified['Phone - Personal Modified'] = format_phone_number(person_phone)\n        \n        unified['LinkedIn Profile Modified'] = person_data.get('urls', {}).get('linkedin', '')\n        unified['City Modified'] = person_data.get('location', {}).get('city', '')\n        unified['State Modified'] = normalize_state(person_data.get('location', {}).get('state', ''))\n        unified['Country Modified'] = person_data.get('location', {}).get('country', '')\n        if not unified['Country Modified'] and is_us_state(unified['State Modified']):\n            unified['Country Modified'] = 'United States'\n        unified['Root Domain Modified'] = extract_root_domain(data.get('organization', {}).get('domain', ''))\n        unified['Industry Modified'] = data.get('organization', {}).get('industry', '')\n    \n    else:\n        # Default case if provider is unknown\n        first_name = ''\n        last_name = ''\n        # Set other fields to empty or default values as needed\n        unified['Company Name Modified'] = ''\n        unified['Company Email 1 Modified'] = ''\n        unified['Personal Email 1 Modified'] = ''\n        unified['Phone - Company Modified'] = ''\n        unified['Phone - Personal Modified'] = ''\n        unified['LinkedIn Profile Modified'] = ''\n        unified['City Modified'] = ''\n        unified['State Modified'] = ''\n        unified['Country Modified'] = ''\n        unified['Root Domain Modified'] = ''\n        unified['Industry Modified'] = ''\n    \n    # Create the Full Name Modified field\n    if provider in ['Vector', 'RB2B', 'OpenSend']:\n        full_name = f\"{first_name.strip()} {last_name.strip()}\".strip()\n        unified['First Name Modified'] = first_name.strip()\n        unified['Last Name Modified'] = last_name.strip()\n        unified['Full Name Modified'] = full_name\n    else:\n        unified['Full Name Modified'] = ''\n    \n    unified['Timestamp Modified'] = timestamp\n\n    return unified\n\ndef get_company_info(data):\n    \"\"\"Retrieve company name and domain based on the provider.\"\"\"\n    provider = identify_provider(data)\n    \n    if provider == 'Vector':\n        company_name = data.get('company', '')\n        domain = data.get('companyDomain', '')\n    elif provider == 'RB2B':\n        company_name = data.get('Company Name', '')\n        domain = data.get('Website', '')\n    elif provider == 'OpenSend':\n        company_name = data.get('organization', {}).get('name', '')\n        domain = data.get('organization', {}).get('domain', '')\n    else:\n        company_name = ''\n        domain = ''\n    \n    return company_name, domain, provider\n\ndef get_current_timestamp():\n    \"\"\"Get the current UTC timestamp in ISO format.\"\"\"\n    return datetime.now(timezone.utc).isoformat()\n\n# Main processing loop\nfor item in items:\n    data = item.get('json', {})\n    \n    # If data is nested under 'body', extract it\n    if 'body' in data:\n        data = data['body']\n    \n    # Retrieve company name, domain, and provider\n    company_name, domain, provider = get_company_info(data)\n    \n    # Extract domain and root domain\n    domain_extracted = extract_domain(domain)\n    root_domain = extract_root_domain(domain_extracted)\n    \n    # Modify company name\n    if company_name:\n        modified_name = modify_company_name(company_name)\n    else:\n        modified_name = ''\n    \n    # Verify if the domain is part of the company name\n    if root_domain and modified_name and root_domain.lower() in modified_name.lower().replace(' ', ''):\n        verified = True\n    else:\n        verified = False\n    \n    # Get the current timestamp\n    timestamp = get_current_timestamp()\n    \n    # Extract and unify fields\n    unified_fields = get_unified_fields(data, provider, timestamp)\n    \n    # Update data with normalized fields\n    data['normalized_company_name'] = modified_name\n    data['company_name_verified'] = verified\n    data['data_provider'] = provider\n    data['timestamp'] = timestamp\n    \n    # Merge unified fields into data\n    for key, value in unified_fields.items():\n        data[key] = value\n    \n    # Assign the updated data back to the item\n    item['json'] = data\n\n# Return the modified items to n8n\nreturn items\n"},"id":"dc65eab7-3e25-4e67-8ae1-a83e490e84d9","name":"Washing Machine","type":"n8n-nodes-base.code","typeVersion":2,"position":[720,-60],"alwaysOutputData":true},{"parameters":{"jsCode":"// Vector Mapping - Structured Output with Comprehensive Field Mapping and Normalization\n\n// Data Normalization Functions\nfunction capitalizeName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase());\n}\n\nfunction normalizePhoneNumber(phone) {\n  if (!phone) return '';\n  return phone.replace(/\\D/g, '');\n}\n\nfunction normalizeCompanySize(size) {\n  if (!size) return '';\n  // Handle values like '80k', '80K', or '80,000'\n  let sizeStr = size.toLowerCase().replace(/,/g, '').trim();\n  let multiplier = 1;\n  if (sizeStr.endsWith('k')) {\n    multiplier = 1000;\n    sizeStr = sizeStr.slice(0, -1);\n  } else if (sizeStr.endsWith('m')) {\n    multiplier = 1000000;\n    sizeStr = sizeStr.slice(0, -1);\n  }\n  let num = parseFloat(sizeStr);\n  if (isNaN(num)) {\n    return '';\n  }\n  return (num * multiplier).toString();\n}\n\nfunction normalizeUrl(url) {\n  if (!url) return '';\n  url = url.trim();\n  url = url.replace(/^http:\\/\\//i, 'https://');\n  if (!url.startsWith('https://')) {\n    url = 'https://' + url.replace(/^\\/\\//, '');\n  }\n  return url;\n}\n\nfunction decodeHtmlEntities(text) {\n  if (!text) return '';\n  return text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n}\n\nfunction normalizeCompanyName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/[^a-z0-9]/g, '');\n}\n\nitems.forEach((item, index) => {\n\n  // Access the data directly under 'item.json'\n  const data = item.json.body || item.json;\n\n  // Check if data is available\n  if (!data) {\n    console.warn(`Vector Item ${index}: No data found in item.json or item.json.body`);\n    return;\n  }\n\n  // Log the incoming data for debugging\n  console.log(`Vector Data for Item ${index}:`, JSON.stringify(data, null, 2));\n\n  // Initialize the structured output with new fields\n  const structuredData = {\n    work: {\n      \"work-title\": \"\",\n      \"work-name\": \"\",\n      \"work-name-normalized\": \"\",\n      \"work-domain\": \"\",\n      \"work-industry\": \"\",\n      \"work-industry-specialization\": \"\",\n      \"work-size\": \"\",\n      \"work-revenue\": \"\",\n      \"work-founded-year\": \"\",\n      \"work-location-address\": \"\",\n      \"work-location-city\": \"\",\n      \"work-location-state\": \"\",\n      \"work-location-country\": \"\",\n      \"work-location-zip\": \"\",\n      \"work-phone\": \"\",\n      \"work-email\": \"\",\n      \"work-email-list\": [],\n      \"work-email-labels\": [],\n      \"work-url-linkedin\": \"\",\n      \"work-url-website\": \"\",\n      \"work-url-facebook\": \"\",\n      \"work-url-twitter\": \"\",\n      \"work-url-instagram\": \"\",\n      \"work-url-github\": \"\",\n      \"work-url-blog\": \"\",\n      \"work-url-stackoverflow\": \"\",\n      \"work-url-pitchbook\": \"\",\n      \"work-url-monster\": \"\",\n      \"work-url-crunchbase\": \"\",\n      \"work-url-angellist\": \"\",\n      \"work-url-indeed\": \"\",\n      \"work-url-glassdoor\": \"\",\n      \"work-services-products\": \"\",\n      \"work-is-competitor\": false,\n      \"work-is-partner\": false\n    },\n    personal: {\n      \"personal-firstname\": \"\",\n      \"personal-lastname\": \"\",\n      \"personal-avatar\": \"\",\n      \"personal-email\": \"\",\n      \"personal-email-list\": [],\n      \"personal-email-labels\": [],\n      \"personal-phone\": \"\",\n      \"personal-url-linkedin\": \"\",\n      \"personal-linkedin-headline\": \"\",\n      \"personal-url-facebook\": \"\",\n      \"personal-url-twitter\": \"\",\n      \"personal-url-github\": \"\",\n      \"personal-location-address\": \"\",\n      \"personal-location-city\": \"\",\n      \"personal-location-state\": \"\",\n      \"personal-location-country\": \"\",\n      \"personal-location-zip\": \"\",\n      \"personal-co-workers\": []\n    },\n    technical: {\n      \"technical-vector-id\": \"\",\n      \"technical-data-source\": \"Vector\",\n      \"technical-user-geolocation\": \"\",\n      \"technical-source-domain\": \"\",\n      \"technical-user-agent\": \"\",\n      \"technical-user-ip\": \"\",\n      \"technical-source-url\": \"\",\n      \"technical-timestamp\": \"\",\n      \"technical-page-title\": \"\",\n      \"technical-segment-name\": \"\",\n      \"technical-event-type\": \"\",\n      \"technical-hem\": \"\"\n    },\n    enrichment: {\n      \"enrichment-job-challenges-bullet\": \"\",\n      \"enrichment-job-challenges-sentence\": \"\",\n      \"enrichment-job-responsibilities\": \"\",\n      \"enrichment-social-proof\": \"\",\n      \"enrichment-reason-for-visit\": \"\",\n      \"enrichment-current-solution\": \"\",\n      \"enrichment-icp-tier\": \"\",\n      \"enrichment-is-local\": false\n    }\n  };\n\n  /////////////////////////\n  // Map fields to structured data fields\n  /////////////////////////\n\n  // Work Fields\n  structuredData.work['work-title'] = data.title || \"\";\n  structuredData.work['work-name'] = data.company || \"\";\n  structuredData.work['work-name-normalized'] = normalizeCompanyName(data.company || \"\");\n  structuredData.work['work-domain'] = normalizeUrl(data.companyDomain || \"\");\n  \n  // Work Industry - Vector payload does not provide 'industry', so leave empty or set a default if applicable\n  // structuredData.work['work-industry'] = data.industry || \"\"; // Uncomment if 'industry' exists\n\n  // Work Industry Specialization - Not provided; leave empty\n  structuredData.work['work-industry-specialization'] = \"\";\n\n  // Work Size - Not provided; leave empty\n  structuredData.work['work-size'] = \"\";\n\n  // Work Revenue - Not provided; leave empty\n  structuredData.work['work-revenue'] = \"\";\n\n  // Work Founded Year - Not provided; leave empty\n  structuredData.work['work-founded-year'] = \"\";\n\n  // Work Location Address\n  structuredData.work['work-location-address'] = data.location || \"\";\n\n  // Parse location into city, state, country, zip if possible\n  const locationParts = structuredData.work['work-location-address'].split(',').map(part => part.trim());\n  \n  if (locationParts.length >= 2) {\n    structuredData.work['work-location-city'] = locationParts[0] || '';\n    structuredData.work['work-location-state'] = locationParts[1] || '';\n    // Assuming country and zip are not provided; set to empty or default\n    structuredData.work['work-location-country'] = \"\";\n    structuredData.work['work-location-zip'] = \"\";\n  } else {\n    // Handle cases with fewer parts\n    structuredData.work['work-location-city'] = locationParts[0] || '';\n    structuredData.work['work-location-state'] = \"\";\n    structuredData.work['work-location-country'] = \"\";\n    structuredData.work['work-location-zip'] = \"\";\n  }\n\n  // Work Phone - Not provided; leave empty\n  structuredData.work['work-phone'] = \"\";\n\n  // Work Email - Not provided; leave empty\n  structuredData.work['work-email'] = \"\";\n\n  // Work Email List & Labels - Not provided; leave empty\n  structuredData.work['work-email-list'] = [];\n  structuredData.work['work-email-labels'] = [];\n\n  // Work URLs\n  structuredData.work['work-url-linkedin'] = normalizeUrl(data.linkedinUrl || \"\");\n  structuredData.work['work-url-website'] = normalizeUrl(data.pageUrl || \"\");\n  // Other URLs are not provided in the payload; leave them empty\n\n  // Work Services & Products - Not provided; leave empty\n  structuredData.work['work-services-products'] = \"\";\n\n  // Work Is Competitor & Partner - Set to false as default\n  structuredData.work['work-is-competitor'] = false;\n  structuredData.work['work-is-partner'] = false;\n\n  // Personal Fields\n  structuredData.personal['personal-firstname'] = capitalizeName(data.firstName || \"\");\n  structuredData.personal['personal-lastname'] = capitalizeName(data.lastName || \"\");\n  structuredData.personal['personal-avatar'] = \"\"; // Not provided in payload\n\n  // Personal URLs\n  structuredData.personal['personal-url-linkedin'] = normalizeUrl(data.linkedinUrl || \"\");\n  structuredData.personal['personal-url-facebook'] = \"\"; // Not provided\n  structuredData.personal['personal-url-twitter'] = \"\"; // Not provided\n  structuredData.personal['personal-url-github'] = \"\"; // Not provided\n\n  // Personal Location Address\n  structuredData.personal['personal-location-address'] = data.location || \"\";\n\n  // Parse location into city, state, country, zip if possible\n  if (locationParts.length >= 2) {\n    structuredData.personal['personal-location-city'] = locationParts[0] || '';\n    structuredData.personal['personal-location-state'] = locationParts[1] || '';\n    // Assuming country and zip are not provided; set to empty or default\n    structuredData.personal['personal-location-country'] = \"\";\n    structuredData.personal['personal-location-zip'] = \"\";\n  } else {\n    // Handle cases with fewer parts\n    structuredData.personal['personal-location-city'] = locationParts[0] || '';\n    structuredData.personal['personal-location-state'] = \"\";\n    structuredData.personal['personal-location-country'] = \"\";\n    structuredData.personal['personal-location-zip'] = \"\";\n  }\n\n  // Personal LinkedIn Headline - Not provided; leave empty\n  structuredData.personal['personal-linkedin-headline'] = \"\";\n\n  // Personal Phone - Not provided; leave empty\n  structuredData.personal['personal-phone'] = \"\";\n\n  // Personal Co-workers - Not provided; leave empty\n  structuredData.personal['personal-co-workers'] = [];\n\n  // Technical Fields\n  structuredData.technical['technical-vector-id'] = data.vvid || \"\";\n  structuredData.technical['technical-data-source'] = \"Vector\";\n  structuredData.technical['technical-user-geolocation'] = \"\"; // Not provided\n  structuredData.technical['technical-source-domain'] = \"\"; // Not provided\n  structuredData.technical['technical-user-agent'] = \"\"; // Not provided\n  structuredData.technical['technical-user-ip'] = \"\"; // Not provided\n  structuredData.technical['technical-source-url'] = normalizeUrl(data.pageUrl || \"\");\n  structuredData.technical['technical-timestamp'] = new Date().toISOString(); // Capture current timestamp\n  structuredData.technical['technical-page-title'] = data.pageTitle || \"\";\n  structuredData.technical['technical-segment-name'] = data.segmentName || \"\";\n  structuredData.technical['technical-event-type'] = data.type || \"\";\n  structuredData.technical['technical-hem'] = data.hem || \"\";\n\n  // Enrichment Fields - Not provided; leave empty or set default values\n  structuredData.enrichment = {\n    \"enrichment-job-challenges-bullet\": \"\",\n    \"enrichment-job-challenges-sentence\": \"\",\n    \"enrichment-job-responsibilities\": \"\",\n    \"enrichment-social-proof\": \"\",\n    \"enrichment-reason-for-visit\": \"\",\n    \"enrichment-current-solution\": \"\",\n    \"enrichment-icp-tier\": \"\",\n    \"enrichment-is-local\": false\n  };\n\n  /////////////////////////\n  // Assign the structuredData back to item.json\n  /////////////////////////\n\n  // Apply normalization to company URLs\n  let workUrlFields = [\n    'work-url-linkedin',\n    'work-url-website',\n    'work-url-facebook',\n    'work-url-twitter',\n    'work-url-instagram',\n    'work-url-github',\n    'work-url-blog',\n    'work-url-stackoverflow',\n    'work-url-pitchbook',\n    'work-url-monster',\n    'work-url-crunchbase',\n    'work-url-angellist',\n    'work-url-indeed',\n    'work-url-glassdoor'\n  ];\n\n  workUrlFields.forEach(field => {\n    if (structuredData.work[field]) {\n      structuredData.work[field] = normalizeUrl(structuredData.work[field]);\n    }\n  });\n\n  let personalUrlFields = [\n    'personal-url-linkedin',\n    'personal-url-facebook',\n    'personal-url-twitter',\n    'personal-url-github'\n  ];\n\n  personalUrlFields.forEach(field => {\n    if (structuredData.personal[field]) {\n      structuredData.personal[field] = normalizeUrl(structuredData.personal[field]);\n    }\n  });\n\n  // Assign the structuredData back to item.json\n  item.json = structuredData;\n\n});\n\n// Return the modified items array\nreturn items;\n"},"id":"e1086b55-53e9-42d1-925c-050e54a33a83","name":"Structure Data (Vector)","type":"n8n-nodes-base.code","typeVersion":2,"position":[740,1460]},{"parameters":{"jsCode":"// Helper function to safely access nested properties\nfunction getNestedValue(obj, path) {\n  return path.split('.').reduce((o, key) => (o && o[key] !== undefined) ? o[key] : undefined, obj);\n}\n\n// Data Normalization Functions\nfunction capitalizeName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase());\n}\n\nfunction normalizePhoneNumber(phone) {\n  if (!phone) return '';\n  return phone.replace(/\\D/g, '');\n}\n\nfunction normalizeCompanySize(size) {\n  if (!size) return '';\n  // Handle values like '80k', '80K', or '80,000'\n  let sizeStr = size.toLowerCase().replace(/,/g, '').trim();\n  let multiplier = 1;\n  if (sizeStr.endsWith('k')) {\n    multiplier = 1000;\n    sizeStr = sizeStr.slice(0, -1);\n  } else if (sizeStr.endsWith('m')) {\n    multiplier = 1000000;\n    sizeStr = sizeStr.slice(0, -1);\n  }\n  let num = parseFloat(sizeStr);\n  if (isNaN(num)) {\n    return '';\n  }\n  return (num * multiplier).toString();\n}\n\nfunction normalizeUrl(url) {\n  if (!url) return '';\n  url = url.trim();\n  url = url.replace(/^http:\\/\\//i, 'https://');\n  if (!url.startsWith('https://')) {\n    url = 'https://' + url.replace(/^\\/\\//, '');\n  }\n  return url;\n}\n\nfunction decodeHtmlEntities(text) {\n  if (!text) return '';\n  return text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n}\n\nfunction normalizeCompanyName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/[^a-z0-9]/g, '');\n}\n\nitems.forEach((item, index) => {\n\n  // Try to access the data from various possible locations\n  const data = item.json.body || item.json;\n\n  // Check if data is available\n  if (!data) {\n    console.warn(`Item ${index}: No data found in item.json or item.json.body`);\n    return;\n  }\n\n  // Initialize the structured output with new fields\n  const structuredData = {\n    work: {\n      \"work-title\": \"\",\n      \"work-name\": \"\",\n      \"work-name-normalized\": \"\",\n      \"work-domain\": \"\",\n      \"work-industry\": \"\",\n      \"work-industry-specialization\": \"\",\n      \"work-size\": \"\",\n      \"work-revenue\": \"\",\n      \"work-founded-year\": \"\",\n      \"work-location-address\": \"\",\n      \"work-location-city\": \"\",\n      \"work-location-state\": \"\",\n      \"work-location-country\": \"\",\n      \"work-location-zip\": \"\",\n      \"work-phone\": \"\",\n      \"work-email\": \"\",\n      \"work-email-list\": [],\n      \"work-email-labels\": [],\n      \"work-url-linkedin\": \"\",\n      \"work-url-website\": \"\",\n      \"work-url-facebook\": \"\",\n      \"work-url-twitter\": \"\",\n      \"work-url-instagram\": \"\",\n      \"work-url-github\": \"\",\n      \"work-url-blog\": \"\",\n      \"work-url-stackoverflow\": \"\",\n      \"work-url-pitchbook\": \"\",\n      \"work-url-monster\": \"\",\n      \"work-url-crunchbase\": \"\",\n      \"work-url-angellist\": \"\",\n      \"work-url-indeed\": \"\",\n      \"work-url-glassdoor\": \"\",\n      \"work-services-products\": \"\",\n      \"work-is-competitor\": false,\n      \"work-is-partner\": false\n    },\n    personal: {\n      \"personal-firstname\": \"\",\n      \"personal-lastname\": \"\",\n      \"personal-avatar\": \"\",\n      \"personal-email\": \"\",\n      \"personal-email-list\": [],\n      \"personal-email-labels\": [],\n      \"personal-phone\": \"\",\n      \"personal-url-linkedin\": \"\",\n      \"personal-linkedin-headline\": \"\",\n      \"personal-url-facebook\": \"\",\n      \"personal-url-twitter\": \"\",\n      \"personal-url-github\": \"\",\n      \"personal-location-address\": \"\",\n      \"personal-location-city\": \"\",\n      \"personal-location-state\": \"\",\n      \"personal-location-country\": \"\",\n      \"personal-location-zip\": \"\",\n      \"personal-co-workers\": []\n    },\n    technical: {\n      \"technical-opensend-id\": \"\",\n      \"technical-data-source\": \"OpenSend\",\n      \"technical-user-geolocation\": \"\",\n      \"technical-source-domain\": \"\",\n      \"technical-user-agent\": \"\",\n      \"technical-user-ip\": \"\",\n      \"technical-source-url\": \"\",\n      \"technical-timestamp\": \"\"\n    },\n    enrichment: {\n      \"enrichment-job-challenges-bullet\": \"\",\n      \"enrichment-job-challenges-sentence\": \"\",\n      \"enrichment-job-responsibilities\": \"\",\n      \"enrichment-social-proof\": \"\",\n      \"enrichment-reason-for-visit\": \"\",\n      \"enrichment-current-solution\": \"\",\n      \"enrichment-icp-tier\": \"\",\n      \"enrichment-is-local\": false\n    }\n  };\n\n  /////////////////////////\n  // Map fields to structured data fields with error handling\n  /////////////////////////\n\n  // Personal Fields\n  structuredData.personal['personal-firstname'] = getNestedValue(data, 'person.first_name');\n  structuredData.personal['personal-lastname'] = getNestedValue(data, 'person.last_name');\n  structuredData.personal['personal-avatar'] = getNestedValue(data, 'person.avatar');\n  structuredData.personal['personal-url-linkedin'] = getNestedValue(data, 'person.urls.linkedin');\n  structuredData.personal['personal-url-facebook'] = getNestedValue(data, 'person.urls.facebook');\n  structuredData.personal['personal-url-twitter'] = getNestedValue(data, 'person.urls.twitter');\n  structuredData.personal['personal-url-github'] = getNestedValue(data, 'person.urls.github');\n  structuredData.personal['personal-location-address'] = getNestedValue(data, 'person.location.address');\n  structuredData.personal['personal-location-city'] = getNestedValue(data, 'person.location.city');\n  structuredData.personal['personal-location-state'] = getNestedValue(data, 'person.location.state');\n  structuredData.personal['personal-location-country'] = getNestedValue(data, 'person.location.country');\n  structuredData.personal['personal-location-zip'] = getNestedValue(data, 'person.location.zip');\n\n  // Handle 'person.phone_numbers'\n  const personPhoneNumbers = getNestedValue(data, 'person.phone_numbers');\n  console.log('personPhoneNumbers:', personPhoneNumbers);\n\n  if (personPhoneNumbers) {\n    if (typeof personPhoneNumbers === 'string') {\n      // If it's a string, split it\n      const phoneNumbers = personPhoneNumbers.split(' | ').map(num => num.trim());\n      if (phoneNumbers.length > 0) {\n        structuredData.personal['personal-phone'] = normalizePhoneNumber(phoneNumbers[0]);\n      }\n    } else if (Array.isArray(personPhoneNumbers)) {\n      // If it's an array, use the first element\n      structuredData.personal['personal-phone'] = normalizePhoneNumber(personPhoneNumbers[0]);\n    } else if (typeof personPhoneNumbers === 'object') {\n      // If it's an object, extract the phone number from known properties\n      const phoneNumber = personPhoneNumbers.primary || personPhoneNumbers.number || '';\n      if (phoneNumber) {\n        structuredData.personal['personal-phone'] = normalizePhoneNumber(phoneNumber);\n      }\n    } else {\n      console.warn('Unexpected data type for personPhoneNumbers:', typeof personPhoneNumbers);\n    }\n  }\n\n  // Work Fields\n  structuredData.work['work-title'] = getNestedValue(data, 'person.title');\n  structuredData.work['work-name'] = getNestedValue(data, 'organization.name');\n  structuredData.work['work-domain'] = getNestedValue(data, 'organization.domain');\n  structuredData.work['work-industry'] = getNestedValue(data, 'organization.industry');\n  structuredData.work['work-location-address'] = getNestedValue(data, 'organization.location.address');\n  structuredData.work['work-location-city'] = getNestedValue(data, 'organization.location.city');\n  structuredData.work['work-location-state'] = getNestedValue(data, 'organization.location.state');\n  structuredData.work['work-location-country'] = getNestedValue(data, 'organization.location.country');\n  structuredData.work['work-size'] = getNestedValue(data, 'organization.company_size');\n  structuredData.work['work-revenue'] = getNestedValue(data, 'organization.estimated_revenue');\n\n  // Handle 'organization.phone_numbers'\n  const orgPhoneNumbers = getNestedValue(data, 'organization.phone_numbers');\n  if (orgPhoneNumbers) {\n    if (typeof orgPhoneNumbers === 'string') {\n      const phoneNumbers = orgPhoneNumbers.split(' | ').map(num => num.trim());\n      if (phoneNumbers.length > 0) {\n        structuredData.work['work-phone'] = normalizePhoneNumber(phoneNumbers[0]);\n      }\n    } else if (Array.isArray(orgPhoneNumbers)) {\n      structuredData.work['work-phone'] = normalizePhoneNumber(orgPhoneNumbers[0]);\n    } else if (typeof orgPhoneNumbers === 'object') {\n      const phoneNumber = orgPhoneNumbers.primary || orgPhoneNumbers.number || '';\n      if (phoneNumber) {\n        structuredData.work['work-phone'] = normalizePhoneNumber(phoneNumber);\n      }\n    } else {\n      console.warn('Unexpected data type for orgPhoneNumbers:', typeof orgPhoneNumbers);\n    }\n  }\n\n  // Map organization URLs\n  const orgUrls = [\n    'twitter',\n    'website',\n    'blog',\n    'facebook',\n    'instagram',\n    'linkedin',\n    'stackoverflow',\n    'pitchbook',\n    'monster',\n    'crunchbase',\n    'angellist',\n    'indeed',\n    'glassdoor',\n    'github'\n  ];\n\n  orgUrls.forEach(urlKey => {\n    const field = `work-url-${urlKey}`;\n    structuredData.work[field] = getNestedValue(data, `organization.urls.${urlKey}`);\n  });\n\n  // Technical Fields\n  structuredData.technical['technical-opensend-id'] = getNestedValue(data, 'oir_source');\n  structuredData.technical['technical-user-geolocation'] = getNestedValue(data, 'userGeolocation');\n  structuredData.technical['technical-source-domain'] = getNestedValue(data, 'sourceDomain');\n  structuredData.technical['technical-user-agent'] = getNestedValue(data, 'userAgent');\n  structuredData.technical['technical-user-ip'] = getNestedValue(data, 'userIp');\n  structuredData.technical['technical-source-url'] = getNestedValue(data, 'sourceUrl');\n  structuredData.technical['technical-timestamp'] = getNestedValue(data, 'timestamp');\n\n  /////////////////////////\n  // Email Handling\n  /////////////////////////\n\n  // Initialize email lists\n  let workEmailList = [];\n  let personalEmailList = [];\n\n  // Handle top-level 'email' field (generally the work email)\n  const emailField = getNestedValue(data, 'email');\n  if (emailField) {\n    structuredData.work['work-email'] = emailField.toLowerCase();\n    workEmailList.push(structuredData.work['work-email']);\n  }\n\n  // Handle 'emails' array\n  const emailsArray = getNestedValue(data, 'emails');\n  if (emailsArray && Array.isArray(emailsArray) && emailsArray.length > 0) {\n    structuredData.work['work-email-labels'] = [];\n    structuredData.work['work-email-list'] = [];\n    structuredData.personal['personal-email-labels'] = [];\n    structuredData.personal['personal-email-list'] = [];\n\n    emailsArray.forEach(emailObj => {\n      if (!emailObj || !emailObj.email || !emailObj.label) return;\n\n      let emailLabel = emailObj.label.toLowerCase();\n      let emailAddress = emailObj.email.toLowerCase();\n\n      if (emailLabel === 'work') {\n        if (!workEmailList.includes(emailAddress)) {\n          workEmailList.push(emailAddress);\n        }\n        structuredData.work['work-email-labels'].push(emailLabel);\n        structuredData.work['work-email-list'].push(emailAddress);\n      } else if (emailLabel === 'personal') {\n        if (!personalEmailList.includes(emailAddress)) {\n          personalEmailList.push(emailAddress);\n        }\n        structuredData.personal['personal-email-labels'].push(emailLabel);\n        structuredData.personal['personal-email-list'].push(emailAddress);\n      }\n    });\n\n    if (!structuredData.work['work-email'] && workEmailList.length > 0) {\n      structuredData.work['work-email'] = workEmailList[0];\n    }\n    if (personalEmailList.length > 0) {\n      structuredData.personal['personal-email'] = personalEmailList[0];\n    }\n  }\n\n  /////////////////////////\n  // Apply Normalization\n  /////////////////////////\n\n  structuredData.personal['personal-firstname'] = capitalizeName(structuredData.personal['personal-firstname']);\n  structuredData.personal['personal-lastname'] = capitalizeName(structuredData.personal['personal-lastname']);\n\n  structuredData.personal['personal-phone'] = normalizePhoneNumber(structuredData.personal['personal-phone']);\n  structuredData.work['work-phone'] = normalizePhoneNumber(structuredData.work['work-phone']);\n\n  structuredData.work['work-size'] = normalizeCompanySize(structuredData.work['work-size']);\n  structuredData.work['work-name-normalized'] = normalizeCompanyName(structuredData.work['work-name']);\n  structuredData.work['work-industry'] = decodeHtmlEntities(structuredData.work['work-industry']);\n\n  // Normalize URLs and enforce HTTPS\n  let workUrlFields = [\n    'work-url-twitter',\n    'work-url-website',\n    'work-url-blog',\n    'work-url-facebook',\n    'work-url-instagram',\n    'work-url-linkedin',\n    'work-url-stackoverflow',\n    'work-url-pitchbook',\n    'work-url-monster',\n    'work-url-crunchbase',\n    'work-url-angellist',\n    'work-url-indeed',\n    'work-url-glassdoor',\n    'work-url-github'\n  ];\n\n  for (let field of workUrlFields) {\n    if (structuredData.work[field]) {\n      structuredData.work[field] = normalizeUrl(structuredData.work[field]);\n    }\n  }\n\n  let personalUrlFields = [\n    'personal-url-linkedin',\n    'personal-url-facebook',\n    'personal-url-twitter',\n    'personal-url-github'\n  ];\n\n  for (let field of personalUrlFields) {\n    if (structuredData.personal[field]) {\n      structuredData.personal[field] = normalizeUrl(structuredData.personal[field]);\n    }\n  }\n\n  // Assign the structuredData back to item.json\n  item.json = structuredData;\n\n});\n\n// Return the modified items array\nreturn items;\n"},"id":"b2919970-391e-4d4b-8232-8fbb7b30281a","name":"Structure Data (OpenSend)","type":"n8n-nodes-base.code","typeVersion":2,"position":[740,1620]},{"parameters":{"jsCode":"// RB2B Mapping and ID Generation - Updated Structured Output with Comprehensive Field Mapping and Normalization\n\n// Data Normalization Functions\nfunction capitalizeName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase());\n}\n\nfunction normalizePhoneNumber(phone) {\n  if (!phone) return '';\n  return phone.replace(/\\D/g, '');\n}\n\nfunction normalizeCompanySize(size) {\n  if (!size) return '';\n  let match = size.match(/(\\d+)-(\\d+)/);\n  if (match) {\n    let lower = parseInt(match[1]);\n    let upper = parseInt(match[2]);\n    return `${lower}-${upper}`;\n  }\n  return size.replace(/\\D/g, '');\n}\n\nfunction extractRevenue(revenue) {\n  if (!revenue) return '';\n  let match = revenue.match(/\\$?([\\d\\.]+)\\s*(M|K)?/i);\n  if (match) {\n    let amount = parseFloat(match[1]);\n    let multiplier = match[2] ? match[2].toUpperCase() : '';\n    if (multiplier === 'M') {\n      amount *= 1_000_000;\n    } else if (multiplier === 'K') {\n      amount *= 1_000;\n    }\n    return amount.toString();\n  }\n  return revenue.replace(/\\D/g, '');\n}\n\nfunction normalizeCompanyName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/[^a-z0-9]/g, '');\n}\n\nfunction normalizeUrl(url) {\n  if (!url) return '';\n  url = url.trim();\n  url = url.replace(/^http:\\/\\//i, 'https://');\n  if (!url.startsWith('https://')) {\n    url = 'https://' + url.replace(/^\\/\\//, '');\n  }\n  return url;\n}\n\nfunction decodeHtmlEntities(text) {\n  if (!text) return '';\n  return text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>');\n}\n\nitems.forEach((item, index) => {\n\n  // Access the data directly under 'item.json'\n  const data = item.json.body || item.json;\n\n  // Check if data is available\n  if (!data) {\n    console.warn(`RB2B Item ${index}: No data found in item.json or item.json.body`);\n    return;\n  }\n\n  // Log the incoming data for debugging\n  console.log(`RB2B Data for Item ${index}:`, JSON.stringify(data, null, 2));\n\n  // Initialize the structured output with new fields\n  const structuredData = {\n    work: {\n      \"work-title\": \"\",\n      \"work-name\": \"\",\n      \"work-name-normalized\": \"\",\n      \"work-domain\": \"\",\n      \"work-industry\": \"\",\n      \"work-industry-specialization\": \"\",\n      \"work-size\": \"\",\n      \"work-revenue\": \"\",\n      \"work-founded-year\": \"\",\n      \"work-location-address\": \"\",\n      \"work-location-city\": \"\",\n      \"work-location-state\": \"\",\n      \"work-location-country\": \"\",\n      \"work-location-zip\": \"\",\n      \"work-phone\": \"\",\n      \"work-email\": \"\",\n      \"work-email-list\": [],\n      \"work-email-labels\": [],\n      \"work-url-linkedin\": \"\",\n      \"work-url-website\": \"\",\n      \"work-url-facebook\": \"\",\n      \"work-url-twitter\": \"\",\n      \"work-url-instagram\": \"\",\n      \"work-url-github\": \"\",\n      \"work-url-blog\": \"\",\n      \"work-url-stackoverflow\": \"\",\n      \"work-url-pitchbook\": \"\",\n      \"work-url-monster\": \"\",\n      \"work-url-crunchbase\": \"\",\n      \"work-url-angellist\": \"\",\n      \"work-url-indeed\": \"\",\n      \"work-url-glassdoor\": \"\",\n      \"work-services-products\": \"\",\n      \"work-is-competitor\": false,\n      \"work-is-partner\": false\n    },\n    personal: {\n      \"personal-firstname\": \"\",\n      \"personal-lastname\": \"\",\n      \"personal-avatar\": \"\",\n      \"personal-email\": \"\",\n      \"personal-email-list\": [],\n      \"personal-email-labels\": [],\n      \"personal-phone\": \"\",\n      \"personal-url-linkedin\": \"\",\n      \"personal-linkedin-headline\": \"\",\n      \"personal-url-facebook\": \"\",\n      \"personal-url-twitter\": \"\",\n      \"personal-url-github\": \"\",\n      \"personal-location-address\": \"\",\n      \"personal-location-city\": \"\",\n      \"personal-location-state\": \"\",\n      \"personal-location-country\": \"\",\n      \"personal-location-zip\": \"\",\n      \"personal-co-workers\": []\n    },\n    technical: {\n      \"technical-rb2b-id\": \"\",\n      \"technical-data-source\": \"\",\n      \"technical-user-geolocation\": \"\",\n      \"technical-source-domain\": \"\",\n      \"technical-user-agent\": \"\",\n      \"technical-user-ip\": \"\",\n      \"technical-source-url\": \"\",\n      \"technical-timestamp\": \"\",\n      \"technical-referrer\": \"\",\n      \"technical-tags\": []\n    },\n    enrichment: {\n      \"enrichment-job-challenges-bullet\": \"\",\n      \"enrichment-job-challenges-sentence\": \"\",\n      \"enrichment-job-responsibilities\": \"\",\n      \"enrichment-social-proof\": \"\",\n      \"enrichment-reason-for-visit\": \"\",\n      \"enrichment-current-solution\": \"\",\n      \"enrichment-icp-tier\": \"\",\n      \"enrichment-is-local\": false\n    }\n  };\n\n  /////////////////////////\n  // Generate technical-rb2b-id\n  /////////////////////////\n\n  // Extract domain from 'Website' field\n  let url = data['Website'] || '';\n  let domainMatch = url.match(/:\\/\\/(www\\.)?(.[^/]+)/);\n  let domain = domainMatch ? domainMatch[2] : 'domain.com';\n\n  // Generate random 6-digit number\n  let randomNumber = Math.floor(100000 + Math.random() * 900000); // Generates a number between 100000 and 999999\n\n  // Generate random 4-letter string\n  let randomLetters = Array(4)\n    .fill(0)\n    .map(() => String.fromCharCode(97 + Math.floor(Math.random() * 26)))\n    .join('');\n\n  // Construct 'technical-rb2b-id'\n  structuredData.technical['technical-rb2b-id'] = `${domain}${randomNumber}${randomLetters}`;\n\n  /////////////////////////\n  // Set technical-data-source\n  /////////////////////////\n\n  structuredData.technical['technical-data-source'] = 'RB2B';\n\n  /////////////////////////\n  // Map source fields to structured data fields\n  /////////////////////////\n\n  // Personal Fields\n  structuredData.personal['personal-firstname'] = data['First Name'] || \"\";\n  structuredData.personal['personal-lastname'] = data['Last Name'] || \"\";\n  structuredData.personal['personal-url-linkedin'] = normalizeUrl(data['LinkedIn URL'] || \"\");\n  structuredData.personal['personal-avatar'] = data['Avatar'] || \"\"; // Assuming 'Avatar' field exists\n  structuredData.personal['personal-email'] = data['Personal Email'] || \"\"; // Assuming such a field exists\n  structuredData.personal['personal-phone'] = data['Personal Phone'] || \"\"; // Assuming such a field exists\n\n  // Work Fields\n  structuredData.work['work-title'] = data['Title'] || \"\";\n  structuredData.work['work-name'] = data['Company Name'] || \"\";\n  structuredData.work['work-email'] = data['Business Email'] ? data['Business Email'].toLowerCase() : \"\";\n  structuredData.work['work-url-website'] = normalizeUrl(data['Website'] || \"\");\n  structuredData.work['work-industry'] = decodeHtmlEntities(data['Industry'] || \"\");\n  structuredData.work['work-size'] = normalizeCompanySize(data['Employee Count'] || \"\");\n  structuredData.work['work-revenue'] = extractRevenue(data['Estimate Revenue'] || \"\");\n  structuredData.work['work-location-address'] = data['Address'] || \"\"; // Assuming 'Address' field exists\n  structuredData.work['work-location-city'] = data['City'] || \"\";\n  structuredData.work['work-location-state'] = data['State'] || \"\";\n  structuredData.work['work-location-zip'] = data['Zipcode'] || \"\";\n  structuredData.work['work-url-linkedin'] = normalizeUrl(data['LinkedIn URL'] || \"\");\n  structuredData.work['work-url-facebook'] = normalizeUrl(data['Facebook URL'] || \"\"); // Assuming such fields exist\n  structuredData.work['work-url-twitter'] = normalizeUrl(data['Twitter URL'] || \"\");\n  structuredData.work['work-url-instagram'] = normalizeUrl(data['Instagram URL'] || \"\");\n  structuredData.work['work-url-github'] = normalizeUrl(data['GitHub URL'] || \"\");\n  structuredData.work['work-url-blog'] = normalizeUrl(data['Blog URL'] || \"\");\n  structuredData.work['work-url-stackoverflow'] = normalizeUrl(data['StackOverflow URL'] || \"\");\n  structuredData.work['work-url-pitchbook'] = normalizeUrl(data['PitchBook URL'] || \"\");\n  structuredData.work['work-url-monster'] = normalizeUrl(data['Monster URL'] || \"\");\n  structuredData.work['work-url-crunchbase'] = normalizeUrl(data['Crunchbase URL'] || \"\");\n  structuredData.work['work-url-angellist'] = normalizeUrl(data['AngelList URL'] || \"\");\n  structuredData.work['work-url-indeed'] = normalizeUrl(data['Indeed URL'] || \"\");\n  structuredData.work['work-url-glassdoor'] = normalizeUrl(data['Glassdoor URL'] || \"\");\n  structuredData.work['work-services-products'] = data['Services Products'] || \"\"; // Assuming such a field exists\n  structuredData.work['work-is-competitor'] = data['Is Competitor'] || false; // Assuming such a field exists\n  structuredData.work['work-is-partner'] = data['Is Partner'] || false; // Assuming such a field exists\n\n  // Technical Fields\n  structuredData.technical['technical-timestamp'] = data['Seen At'] ? new Date(data['Seen At']).toISOString().replace('T', ' ').split('.')[0] : \"\"; // Format to match OpenSend\n  structuredData.technical['technical-referrer'] = normalizeUrl(data['Referrer'] || \"\");\n  structuredData.technical['technical-source-url'] = normalizeUrl(data['Captured URL'] || \"\");\n  structuredData.technical['technical-tags'] = data['Tags'] ? data['Tags'].split(',').map(tag => tag.trim()) : [];\n\n  // Enrichment Fields - Not provided; leave empty or set default values\n  structuredData.enrichment = {\n    \"enrichment-job-challenges-bullet\": \"\",\n    \"enrichment-job-challenges-sentence\": \"\",\n    \"enrichment-job-responsibilities\": \"\",\n    \"enrichment-social-proof\": \"\",\n    \"enrichment-reason-for-visit\": \"\",\n    \"enrichment-current-solution\": \"\",\n    \"enrichment-icp-tier\": \"\",\n    \"enrichment-is-local\": false\n  };\n\n  /////////////////////////\n  // Email Handling\n  /////////////////////////\n\n  // Initialize email lists\n  let workEmailList = [];\n  let personalEmailList = [];\n\n  // Handle top-level 'Business Email' field (generally the work email)\n  const businessEmail = structuredData.work['work-email'];\n  if (businessEmail) {\n    workEmailList.push(businessEmail);\n    structuredData.work['work-email-list'].push(businessEmail);\n    structuredData.work['work-email-labels'].push('work');\n  }\n\n  // Handle 'Emails' array if available\n  const emailsArray = data['Emails']; // Assuming 'Emails' is an array of email objects\n  if (emailsArray && Array.isArray(emailsArray) && emailsArray.length > 0) {\n    emailsArray.forEach(emailObj => {\n      if (!emailObj || !emailObj.email || !emailObj.label) return;\n\n      let emailLabel = emailObj.label.toLowerCase();\n      let emailAddress = emailObj.email.toLowerCase();\n\n      if (emailLabel === 'work') {\n        if (!workEmailList.includes(emailAddress)) {\n          workEmailList.push(emailAddress);\n          structuredData.work['work-email-list'].push(emailAddress);\n          structuredData.work['work-email-labels'].push(emailLabel);\n        }\n      } else if (emailLabel === 'personal') {\n        if (!personalEmailList.includes(emailAddress)) {\n          personalEmailList.push(emailAddress);\n          structuredData.personal['personal-email-list'].push(emailAddress);\n          structuredData.personal['personal-email-labels'].push(emailLabel);\n        }\n      }\n    });\n\n    if (!structuredData.work['work-email'] && workEmailList.length > 0) {\n      structuredData.work['work-email'] = workEmailList[0];\n    }\n    if (personalEmailList.length > 0) {\n      structuredData.personal['personal-email'] = personalEmailList[0];\n    }\n  }\n\n  /////////////////////////\n  // Phone Handling\n  /////////////////////////\n\n  // Handle 'Business Phone'\n  const businessPhone = data['Business Phone'] || \"\";\n  if (businessPhone) {\n    structuredData.work['work-phone'] = normalizePhoneNumber(businessPhone);\n  }\n\n  // Handle 'Personal Phone'\n  const personalPhone = structuredData.personal['personal-phone'] || \"\";\n  if (personalPhone) {\n    structuredData.personal['personal-phone'] = normalizePhoneNumber(personalPhone);\n  }\n\n  /////////////////////////\n  // Apply Normalization\n  /////////////////////////\n\n  // Normalize personal names\n  structuredData.personal['personal-firstname'] = capitalizeName(structuredData.personal['personal-firstname']);\n  structuredData.personal['personal-lastname'] = capitalizeName(structuredData.personal['personal-lastname']);\n\n  // Normalize company name\n  structuredData.work['work-name-normalized'] = normalizeCompanyName(structuredData.work['work-name']);\n\n  // Decode HTML entities in 'work-industry'\n  structuredData.work['work-industry'] = decodeHtmlEntities(structuredData.work['work-industry']);\n\n  // Normalize URLs and enforce HTTPS\n  let workUrlFields = [\n    'work-url-linkedin',\n    'work-url-website',\n    'work-url-facebook',\n    'work-url-twitter',\n    'work-url-instagram',\n    'work-url-github',\n    'work-url-blog',\n    'work-url-stackoverflow',\n    'work-url-pitchbook',\n    'work-url-monster',\n    'work-url-crunchbase',\n    'work-url-angellist',\n    'work-url-indeed',\n    'work-url-glassdoor'\n  ];\n\n  workUrlFields.forEach(field => {\n    if (structuredData.work[field]) {\n      structuredData.work[field] = normalizeUrl(structuredData.work[field]);\n    }\n  });\n\n  let personalUrlFields = [\n    'personal-url-linkedin',\n    'personal-url-facebook',\n    'personal-url-twitter',\n    'personal-url-github'\n  ];\n\n  personalUrlFields.forEach(field => {\n    if (structuredData.personal[field]) {\n      structuredData.personal[field] = normalizeUrl(structuredData.personal[field]);\n    }\n  });\n\n  // Assign the structuredData back to item.json\n  item.json = structuredData;\n\n});\n\n// Return the modified items array\nreturn items;\n"},"id":"a3bf0196-3227-47bf-80c3-da485c710545","name":"Structure Data (RB2B)","type":"n8n-nodes-base.code","typeVersion":2,"position":[740,1820]},{"parameters":{"method":"POST","url":"https://api.leadmagic.io/email-validate","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"X-API-Key","value":"0a1af248e494d0f8e3a5b3a3b1fa6458"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"email\": \"{{ $json.work[\"work-email\"] }}\"\n} ","options":{}},"id":"d335608b-b641-47d8-acbc-1d6521e85bf9","name":"Enrich - LeadMagic1","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2140,1580],"credentials":{"httpHeaderAuth":{"id":"e1rLFjQvoZBZcsF6","name":"searchactions.com (Lead Magic)"}}},{"parameters":{"method":"POST","url":"https://api.leadmagic.io/email-validate","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"X-API-Key","value":"0a1af248e494d0f8e3a5b3a3b1fa6458"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"email\": \"{{ $('Set Full Name').item.json['Company Email 1 Modified'] || $('Set Full Name').item.json['Business Email'] || $('Set Full Name').item.json.email || $json.datas[0].contact.most_probable_email || $('Set Full Name').item.json.emails[0].email || $('Set Full Name').item.json.emails[1].email }}\"\n} ","options":{}},"id":"f6d10aa4-6b7c-4d6a-9a57-04cd9c9f63ee","name":"Enrich - LeadMagic","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2280,-40],"credentials":{"httpHeaderAuth":{"id":"e1rLFjQvoZBZcsF6","name":"searchactions.com (Lead Magic)"}}},{"parameters":{"content":"## Organize\nTransform incoming data into a structured, consistent format.","height":1163.3056263392855,"width":277.90289123092793,"color":7},"id":"fc3ccc1e-49a9-4ae7-b5b7-9759bbaf9739","name":"Sticky Note2","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[680,1180]},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"245a32f2-cca6-4d14-877f-02081b01e9d5","leftValue":"={{ $json['personal-url-linkedin'] || $json.personal[\"personal-url-linkedin\"] }}","rightValue":"","operator":{"type":"string","operation":"exists","singleValue":true}}],"combinator":"or"},"looseTypeValidation":true,"options":{"ignoreCase":true}},"id":"3912ea97-43d5-4d09-a5a8-4d62a7fd025e","name":"LinkedIn (Personal)?","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1540,1340]},{"parameters":{"language":"python","pythonCode":"# N8N Code Node configured to run Python\n# Set to \"Execute Once for All Items\"\n\nimport re\n\n# Functions for normalizing the company name\ndef preprocess(name):\n    return name.strip()\n\ndef remove_legal_designations(name):\n    patterns = [\n        r',?\\s*(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\.?$',\n        r'^(Inc\\.?|LLC|Ltd\\.?|Limited|Corp\\.?|Corporation|Co\\.?|Company|LLP|LP|PLC|PC|PLLC|PA)\\s+',\n        r'\\s+\\(.*\\)$'\n    ]\n    for pattern in patterns:\n        name = re.sub(pattern, '', name, flags=re.IGNORECASE)\n    return name.strip()\n\ndef remove_generic_descriptors(name):\n    generic_terms = [\n        \"Group\", \"Holdings\", \"Media\", \"Solutions\", \"Services\", \"Systems\",\n        \"Technologies\", \"International\", \"Incorporated\", \"Associates\", \"Partners\",\n        \"Enterprises\", \"Industries\", \"Limited\", \"Global\", \"Network\", \"Corporation\",\n        \"Investment\", \"Ventures\", \"Consulting\", \"Logistics\", \"Management\"\n    ]\n    words = name.split()\n    generic_terms_lower = [term.lower() for term in generic_terms]\n    while words and words[-1].strip().lower() in generic_terms_lower:\n        words.pop()\n    return \" \".join(words)\n\ndef simplify_educational_institution(name):\n    EDUCATIONAL_KEYWORDS = {\"university\", \"college\", \"institute\", \"school\"}\n    words = name.lower().split()\n    for i, word in enumerate(words):\n        if word in EDUCATIONAL_KEYWORDS:\n            return \" \".join(words[:i+1]).title()\n    return name\n\ndef handle_religious_organizations(name):\n    RELIGIOUS_KEYWORDS = {\"church\", \"temple\", \"mosque\", \"synagogue\", \"ministry\", \"chapel\"}\n    if any(keyword in name.lower() for keyword in RELIGIOUS_KEYWORDS):\n        words = name.split()\n        return \" \".join(words[:6])\n    return name\n\ndef handle_government_departments(name):\n    GOVERNMENT_KEYWORDS = {\"department\", \"agency\", \"bureau\", \"office\", \"administration\"}\n    if any(keyword in name.lower() for keyword in GOVERNMENT_KEYWORDS):\n        words = name.split()\n        return \" \".join(words[:8])\n    return name\n\ndef normalize_capitalization(name):\n    words = name.split()\n    exceptions = {\"NYC\", \"IBM\", \"USA\", \"UK\"}\n    normalized_words = []\n    for word in words:\n        if word.isupper() and len(word) > 1:\n            if word.upper() in exceptions:\n                normalized_words.append(word.upper())\n            else:\n                normalized_words.append(word.capitalize())\n        else:\n            normalized_words.append(word)\n    return \" \".join(normalized_words)\n\ndef modify_company_name(name):\n    name = preprocess(name)\n    name = remove_legal_designations(name)\n    name = remove_generic_descriptors(name)\n    name = simplify_educational_institution(name)\n    name = handle_religious_organizations(name)\n    name = handle_government_departments(name)\n    name = normalize_capitalization(name)\n    return name.strip()\n\n# Helper functions for normalizing job titles\ndef remove_trailing_phrases(title):\n    \"\"\"Remove trailing phrases starting with specific prepositions.\"\"\"\n    words = title.split()\n    for i, word in enumerate(words):\n        if word.lower() in ['at', 'for', 'with', 'by', 'in'] and i > 0:\n            return ' '.join(words[:i])\n    return title\n\ndef extract_main_area(area_text):\n    \"\"\"Extract the main area of responsibility from a text.\"\"\"\n    keywords = [\n        'Cloud Infrastructure', 'Cloud', 'Infrastructure', 'Security', 'Compliance',\n        'Growth', 'Marketing', 'Finance', 'Operations', 'Recreation', 'Communications',\n        'Outreach', 'Employee Benefits', 'Well-Being'\n    ]\n    matched_keywords = [keyword for keyword in keywords if keyword.lower() in area_text.lower()]\n    if matched_keywords:\n        return matched_keywords[0]\n    else:\n        phrases = area_text.split()\n        return ' '.join(phrases[:2])\n\ndef normalize_job_title(title):\n    \"\"\"Normalize job titles to a consistent format.\"\"\"\n    if not title or not isinstance(title, str):\n        return ''\n    \n    # Convert to title case\n    title = title.title()\n    \n    # Remove any text before '|'\n    if '|' in title:\n        parts = [part.strip() for part in title.split('|')]\n        # Keywords that indicate a job title\n        job_keywords = ['Founder', 'CEO', 'Manager', 'Director', 'Engineer', 'Officer', 'VP', 'Head', 'Chief', 'Partner']\n        for part in parts:\n            if any(keyword.lower() in part.lower() for keyword in job_keywords):\n                title = part\n                break\n        else:\n            title = parts[-1]\n    \n    # Split title on ' and ' or ' & ' and take the first part\n    if ' and ' in title.lower() or ' & ' in title:\n        if ' and ' in title.lower():\n            parts = [part.strip() for part in re.split(r'\\s+and\\s+', title, flags=re.IGNORECASE)]\n        else:\n            parts = [part.strip() for part in title.split('&')]\n        if parts:\n            title = parts[0]\n    \n    # Remove trailing phrases starting with prepositions\n    title = remove_trailing_phrases(title)\n    \n    # Remove common prefixes\n    prefixes = [\n        r'Senior', r'Sr\\.?', r'Junior', r'Jr\\.?', r'Lead', r'Principal', r'Global',\n        r'Collaborator', r'Associate', r'Assistant'\n    ]\n    for prefix in prefixes:\n        pattern = r'^' + prefix + r'\\s+'\n        title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n    \n    # Simplify specific titles\n    title_mappings = [\n        (r'Chief Executive Officer', 'CEO'),\n        (r'Chief Technology Officer', 'CTO'),\n        (r'Chief Financial Officer', 'CFO'),\n        (r'Chief Operating Officer', 'COO'),\n        (r'Chief Marketing Officer', 'CMO'),\n        (r'Chief Information Officer', 'CIO'),\n        (r'Head,?\\s+(.*)', r'Head of \\1'),\n        (r'Vice President\\s+(.*)', r'VP of \\1'),\n        (r'Vice President$', 'VP'),\n        (r'Vp', 'VP'),\n        (r'^(Manager|Director)\\s+Of\\s+(.*)', r'\\1 of \\2'),\n        (r'^(Manager|Director)\\s+(.*)', r'\\1 of \\2'),\n        (r'Global\\s+(.*)', r'\\1'),\n    ]\n    for pattern, replacement in title_mappings:\n        title = re.sub(pattern, replacement, title, flags=re.IGNORECASE)\n    \n    # Split at commas and rearrange if needed\n    if ',' in title:\n        parts = [part.strip() for part in title.split(',')]\n        if len(parts) >= 2:\n            role = parts[0]\n            area = ', '.join(parts[1:])\n            # Extract main area\n            main_area = extract_main_area(area)\n            # Construct the title\n            title = f\"{role} of {main_area}\"\n        else:\n            title = parts[0]\n    \n    # Remove redundant words only if they are standalone\n    redundant_words = ['The', 'I&D', 'Licensed', 'Va']\n    for word in redundant_words:\n        pattern = r'\\b' + re.escape(word) + r'\\b'\n        title = re.sub(pattern, '', title, flags=re.IGNORECASE)\n    \n    # Handle taglines\n    if re.search(r'\\b(Helping|Building|Creating|Providing)\\b', title, flags=re.IGNORECASE):\n        return ''\n    \n    # Remove extra spaces\n    title = re.sub(r'\\s+', ' ', title).strip()\n    \n    # Capitalize proper nouns\n    title = ' '.join([word if word.isupper() else word.capitalize() for word in title.split()])\n    \n    # Limit to first five words\n    words = title.split()\n    if len(words) > 5:\n        title = ' '.join(words[:5])\n    \n    return title\n\n# Main processing loop\nfor item in items:\n    data = item['json']\n\n    # Retrieve the company name from 'work-name'\n    company_name = data.get('work-name', '')\n\n    # Modify company name\n    if company_name:\n        modified_name = modify_company_name(company_name)\n        # Store the modified name back in the item with the key 'work-name-normalized'\n        data['work-name-normalized'] = modified_name\n    else:\n        data['work-name-normalized'] = ''\n\n    # Retrieve the job title from 'work-title'\n    job_title = data.get('work-title', '')\n\n    # Normalize job title\n    if job_title:\n        normalized_title = normalize_job_title(job_title)\n        # Store the normalized title back in the item with the key 'work-title-normalized'\n        data['work-title-normalized'] = normalized_title\n    else:\n        data['work-title-normalized'] = ''\n\n    # Assign the updated data back to the item\n    item['json'] = data\n\n# Return the modified items\nreturn items\n"},"id":"fd431bf9-6df3-4276-babf-22ab617f34b2","name":"Normalize","type":"n8n-nodes-base.code","typeVersion":2,"position":[1080,1340],"alwaysOutputData":true},{"parameters":{"content":"## Normalize\nNromalize the Job Title name and Comapany name","height":1164.494633379452,"width":298.2658078510042,"color":7},"id":"fe3d38f9-136b-4d5d-8c1d-9201ed4c46fc","name":"Sticky Note4","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1000,1180]},{"parameters":{"jsCode":"// Enhanced Combined Script for OpenSend, RB2B, and Vector\n// Helper Functions\nfunction getNestedValue(obj, path) {\n  return path.split('.').reduce((o, key) => (o && o[key] !== undefined) ? o[key] : undefined, obj);\n}\n\nfunction capitalizeName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/\\b\\w/g, c => c.toUpperCase());\n}\n\nfunction normalizePhoneNumber(phone) {\n  if (!phone) return '';\n  return phone.replace(/\\D/g, '');\n}\n\nfunction normalizeCompanySize(size) {\n  if (!size) return '';\n  let sizeStr = size.toLowerCase().replace(/,/g, '').trim();\n  let multiplier = 1;\n  if (sizeStr.endsWith('k')) {\n    multiplier = 1000;\n    sizeStr = sizeStr.slice(0, -1);\n  } else if (sizeStr.endsWith('m')) {\n    multiplier = 1000000;\n    sizeStr = sizeStr.slice(0, -1);\n  }\n  let match = sizeStr.match(/(\\d+)-(\\d+)/);\n  if (match) {\n    let lower = parseInt(match[1]);\n    let upper = parseInt(match[2]);\n    return `${lower}-${upper}`;\n  }\n  let num = parseFloat(sizeStr);\n  if (isNaN(num)) {\n    return '';\n  }\n  return (num * multiplier).toString();\n}\nfunction extractRevenue(revenue) {\n  if (!revenue) return '';\n  let match = revenue.match(/\\$?([\\d\\.]+)\\s*(M|K)?/i);\n  if (match) {\n    let amount = parseFloat(match[1]);\n    let multiplier = match[2] ? match[2].toUpperCase() : '';\n    if (multiplier === 'M') {\n      amount *= 1_000_000;\n    } else if (multiplier === 'K') {\n      amount *= 1_000;\n    }\n    return amount.toString();\n  }\n  return revenue.replace(/\\D/g, '');\n}\n\nfunction normalizeCompanyName(name) {\n  if (!name) return '';\n  return name.toLowerCase().replace(/[^a-z0-9]/g, '');\n}\n\nfunction normalizeUrl(url) {\n  if (!url) return '';\n  url = url.trim();\n  url = url.replace(/^http:\\/\\//i, 'https://');\n  if (!url.startsWith('https://')) {\n    url = 'https://' + url.replace(/^\\/\\//, '');\n  }\n  return url;\n}\n\nfunction decodeHtmlEntities(text) {\n  if (!text) return '';\n  return text.replace(/&amp;/g, '&')\n             .replace(/&lt;/g, '<')\n             .replace(/&gt;/g, '>')\n             .replace(/&quot;/g, '\"')\n             .replace(/&#039;/g, \"'\");\n}\n\nfunction extractDomain(url) {\n  if (!url) return '';\n  url = url.replace(/^https?:\\/\\//, '');\n  url = url.split('/')[0];\n  return url;\n}\n\nfunction standardizeCountry(country) {\n  if (!country) return 'United States';\n  const standardizedCountries = {\n    'usa': 'United States',\n    'us': 'United States',\n    'united states of america': 'United States',\n    'united states': 'United States'\n  };\n  let lowerCountry = country.toLowerCase();\n  return standardizedCountries[lowerCountry] || country;\n}\n\nfunction formatTimestamp(dateInput) {\n  const date = new Date(dateInput);\n  if (isNaN(date.getTime())) {\n    return new Date().toISOString().replace('T', ' ').split('.')[0];\n  }\n  return date.toISOString().replace('T', ' ').split('.')[0];\n}\n\nfunction generateId(prefix = '') {\n  return prefix + Date.now().toString(36) + Math.random().toString(36).substr(2);\n}\nfunction cleanupStructuredData(data, structuredData) {\n  // Only clean specific items but maintain schema structure\n  \n  // Clean empty framework objects\n  if (structuredData.work && structuredData.work['work-single-framework']) {\n    if (structuredData.work['work-single-framework'].has === false) {\n      delete structuredData.work['work-single-framework'].has;\n    }\n  }\n  if (structuredData.work && structuredData.work['work-multiple-frameworks']) {\n    if (structuredData.work['work-multiple-frameworks'].has === false) {\n      delete structuredData.work['work-multiple-frameworks'].has;\n    }\n  }\n\n  // Clean ICP flags but maintain structure\n  if (structuredData.personal && structuredData.personal['personal-icp']) {\n    const icp = structuredData.personal['personal-icp'];\n    // Remove score if 0\n    if (icp.score === 0) {\n      delete icp.score;\n    }\n    // Remove false flags but maintain structure for true ones\n    const icpFlags = [\n      'match-job-title',\n      'match-industry',\n      'match-intent',\n      'match-local',\n      'has-single-framework',\n      'has-multiple-frameworks',\n      'mentions-keywords'\n    ];\n    icpFlags.forEach(flag => {\n      if (icp[flag] === false) {\n        delete icp[flag];\n      }\n    });\n  }\n}\n// Main processing function\nreturn items.map(item => {\n  // Try to access the data from various possible locations\n  const processData = item.json.body || item.json;\n\n  // Check if data is available\n  if (!processData) {\n      console.warn('No data found in item.json or item.json.body');\n      return item;\n  }\n\n  try {\n\n      const structuredData = {\n        work: {\n            \"work-id\": generateId('w_'),\n            \"work-title\": \"\",\n            \"work-name\": \"\",\n            \"work-name-normalized\": \"\",\n            \"work-domain\": \"\",\n            \"work-industry\": \"\",\n            \"work-industry-specialization\": \"\",\n            \"work-size\": \"\",\n            \"work-revenue\": \"\",\n            \"work-founded-year\": \"\",\n            \"work-type\": \"\",\n            \"work-target-audience\": \"\",\n            \"work-serves\": \"\",\n            \"work-services\": [],\n            \"work-products\": [],\n            \"work-compliance-frameworks\": [],\n            \"work-auditors\": [],\n            \"work-grc-tools\": [],\n            \"work-single-framework\": {\n                \"has\": false,\n                \"name\": \"\"\n            },\n            \"work-multiple-frameworks\": {\n                \"has\": false,\n                \"frameworks\": []\n            },\n            \"work-location-address\": \"\",\n            \"work-location-city\": \"\",\n            \"work-location-state\": \"\",\n            \"work-location-country\": \"\",\n            \"work-location-zip\": \"\",\n            \"work-phone\": \"\",\n            \"work-email\": \"\",\n            \"work-email-list\": [],\n            \"work-email-labels\": [],\n            \"work-url-linkedin\": \"\",\n            \"work-url-website\": \"\",\n            \"work-url-facebook\": \"\",\n            \"work-url-twitter\": \"\",\n            \"work-url-instagram\": \"\",\n            \"work-url-github\": \"\",\n            \"work-url-blog\": \"\",\n            \"work-url-stackoverflow\": \"\",\n            \"work-url-pitchbook\": \"\",\n            \"work-url-monster\": \"\",\n            \"work-url-crunchbase\": \"\",\n            \"work-url-angellist\": \"\",\n            \"work-url-indeed\": \"\",\n            \"work-url-glassdoor\": \"\",\n            \"work-is-competitor\": false,\n            \"work-is-partner\": false\n        },\n        personal: {\n            \"personal-id\": generateId('p_'),\n            \"personal-firstname\": \"\",\n            \"personal-lastname\": \"\",\n            \"personal-avatar\": \"\",\n            \"personal-email\": \"\",\n            \"personal-email-list\": [],\n            \"personal-email-labels\": [],\n            \"personal-phone\": \"\",\n            \"personal-url-linkedin\": \"\",\n            \"personal-linkedin-headline\": \"\",\n            \"personal-url-facebook\": \"\",\n            \"personal-url-twitter\": \"\",\n            \"personal-url-github\": \"\",\n            \"personal-location-address\": \"\",\n            \"personal-location-city\": \"\",\n            \"personal-location-state\": \"\",\n            \"personal-location-country\": \"\",\n            \"personal-location-zip\": \"\",\n            \"personal-co-workers\": [],\n            \"personal-latest-posts\": [],\n            \"personal-keywords-mentioned\": [],\n            \"personal-prospect-report\": \"\",\n            \"personal-icp\": {\n                \"score\": 0,\n                \"tier\": \"\",\n                \"analysis\": \"\",\n                \"match-job-title\": false,\n                \"match-industry\": false,\n                \"match-intent\": false,\n                \"match-local\": false,\n                \"has-single-framework\": false,\n                \"has-multiple-frameworks\": false,\n                \"mentions-keywords\": false\n            }\n        },\n        technical: {\n            \"technical-opensend-id\": \"\",\n            \"technical-rb2b-id\": \"\",\n            \"technical-vector-id\": \"\",\n            \"technical-data-source\": \"\",\n            \"technical-user-geolocation\": \"\",\n            \"technical-source-domain\": \"\",\n            \"technical-user-agent\": \"\",\n            \"technical-user-ip\": \"\",\n            \"technical-source-url\": \"\",\n            \"technical-timestamp\": \"\",\n            \"technical-referrer\": \"\",\n            \"technical-tags\": [],\n            \"technical-page-title\": \"\",\n            \"technical-segment-name\": \"\",\n            \"technical-event-type\": \"\",\n            \"technical-hem\": \"\",\n            \"technical-domain-is-catchall\": false,\n            \"technical-email-valid-status\": \"\",\n            \"technical-personal-free-email\": false,\n            \"technical-mail-provider\": \"\"\n        },\n        page: {\n            \"page-visited\": \"\",\n            \"page-title\": \"\",\n            \"page-topic\": \"\",\n            \"page-keywords\": [],\n            \"page-type\": \"\",\n            \"page-intent\": \"\",\n            \"page-content\": \"\"\n        },\n        content: {\n            \"content-customer-names\": \"\",\n            \"content-customer-name\": \"\",\n            \"content-related-customers\": \"\",\n            \"content-single-framework\": \"\",\n            \"content-single-framework-benefits\": \"\",\n            \"content-why-visited\": \"\",\n            \"content-job-challenges-bullets\": [],\n            \"content-job-challenges-sentence\": \"\",\n            \"content-solution-one\": \"\",\n            \"content-solution-two\": \"\"\n        },\n        enrichment: {\n            \"enrichment-job-challenges-bullet\": \"\",\n            \"enrichment-job-challenges-sentence\": \"\",\n            \"enrichment-job-responsibilities\": \"\",\n            \"enrichment-social-proof\": \"\",\n            \"enrichment-reason-for-visit\": \"\",\n            \"enrichment-current-solution\": \"\"\n        }\n    };\n    // Determine the source based on data structure\nlet source = '';\nif (processData.vvid) {\n    source = 'vector';\n} else if (processData['Business Email']) {\n    source = 'rb2b';\n} else if (processData.organization && processData.organization.domain) {\n    source = 'opensend';\n}\n\nif (source === 'vector') {\n    // Vector-specific mapping\n    structuredData.personal['personal-firstname'] = capitalizeName(processData.firstName || '');\n    structuredData.personal['personal-lastname'] = capitalizeName(processData.lastName || '');\n    structuredData.personal['personal-url-linkedin'] = normalizeUrl(processData.linkedinUrl || '');\n    structuredData.personal['personal-location-city'] = processData.location ? processData.location.split(',')[0].trim() : '';\n    structuredData.personal['personal-location-state'] = processData.location ? processData.location.split(',')[1].trim() : '';\n    \n    structuredData.work['work-title'] = processData.title || '';\n    structuredData.work['work-name'] = processData.company || '';\n    structuredData.work['work-domain'] = extractDomain(processData.companyDomain || '');\n    structuredData.work['work-email'] = processData.externalId || '';\n    \n    // Technical fields\n    structuredData.technical['technical-vector-id'] = processData.vvid || '';\n    structuredData.technical['technical-data-source'] = 'vector';\n    structuredData.technical['technical-hem'] = processData.hem || '';\n    structuredData.technical['technical-timestamp'] = formatTimestamp(new Date());\n    \n    // Page fields\n    structuredData.page['page-visited'] = normalizeUrl(processData.pageUrl || '');\n    structuredData.page['page-title'] = processData.pageTitle || '';\n    structuredData.technical['technical-segment-name'] = processData.segmentName || '';\n    structuredData.technical['technical-event-type'] = processData.type || '';\n}\nelse if (source === 'rb2b') {\n  // RB2B-specific mapping\n  structuredData.personal['personal-firstname'] = capitalizeName(processData['First Name'] || '');\n  structuredData.personal['personal-lastname'] = capitalizeName(processData['Last Name'] || '');\n  structuredData.personal['personal-url-linkedin'] = normalizeUrl(processData['LinkedIn URL'] || '');\n  structuredData.personal['personal-location-city'] = processData['City'] || '';\n  structuredData.personal['personal-location-state'] = processData['State'] || '';\n  structuredData.personal['personal-location-zip'] = processData['Zipcode'] || '';\n  \n  structuredData.work['work-title'] = processData['Title'] || '';\n  structuredData.work['work-name'] = processData['Company Name'] || '';\n  structuredData.work['work-domain'] = extractDomain(processData['Website'] || '');\n  structuredData.work['work-email'] = processData['Business Email'] ? processData['Business Email'].toLowerCase() : '';\n  structuredData.work['work-industry'] = decodeHtmlEntities(processData['Industry'] || '');\n  structuredData.work['work-size'] = normalizeCompanySize(processData['Employee Count'] || '');\n  structuredData.work['work-revenue'] = extractRevenue(processData['Estimate Revenue'] || '');\n  \n  // Technical fields\n  structuredData.technical['technical-rb2b-id'] = processData.webhookUrl ? processData.webhookUrl.split('/').pop() : '';\n  structuredData.technical['technical-data-source'] = 'rb2b';\n  structuredData.technical['technical-timestamp'] = formatTimestamp(processData['Seen At'] || new Date());\n  structuredData.technical['technical-referrer'] = normalizeUrl(processData['Referrer'] || '');\n  \n  // Page fields\n  structuredData.page['page-visited'] = normalizeUrl(processData['Captured URL'] || '');\n  \n  // Handle RB2B tags\n  if (processData['Tags']) {\n      structuredData.technical['technical-tags'] = processData['Tags'].split(',').map(tag => tag.trim());\n  }\n}\nelse if (source === 'opensend') {\n  // Personal Fields\n  structuredData.personal['personal-firstname'] = capitalizeName(getNestedValue(processData, 'person.first_name') || '');\n  structuredData.personal['personal-lastname'] = capitalizeName(getNestedValue(processData, 'person.last_name') || '');\n  structuredData.personal['personal-avatar'] = getNestedValue(processData, 'person.avatar') || '';\n  structuredData.personal['personal-url-linkedin'] = normalizeUrl(getNestedValue(processData, 'person.urls.linkedin') || '');\n  structuredData.personal['personal-url-facebook'] = normalizeUrl(getNestedValue(processData, 'person.urls.facebook') || '');\n  structuredData.personal['personal-url-twitter'] = normalizeUrl(getNestedValue(processData, 'person.urls.twitter') || '');\n  structuredData.personal['personal-url-github'] = normalizeUrl(getNestedValue(processData, 'person.urls.github') || '');\n  structuredData.personal['personal-location-address'] = getNestedValue(processData, 'person.location.address') || '';\n  structuredData.personal['personal-location-city'] = getNestedValue(processData, 'person.location.city') || '';\n  structuredData.personal['personal-location-state'] = getNestedValue(processData, 'person.location.state') || '';\n  structuredData.personal['personal-location-country'] = standardizeCountry(getNestedValue(processData, 'person.location.country') || '');\n  structuredData.personal['personal-location-zip'] = getNestedValue(processData, 'person.location.zip') || '';\n  structuredData.personal['personal-linkedin-headline'] = getNestedValue(processData, 'person.title') || '';\n\n  // Handle person phone numbers\n  const personPhoneNumbers = getNestedValue(processData, 'person.phone_numbers');\n  if (personPhoneNumbers) {\n      if (typeof personPhoneNumbers === 'string') {\n          const phoneNumbers = personPhoneNumbers.split(' | ').map(num => num.trim());\n          if (phoneNumbers.length > 0) {\n              structuredData.personal['personal-phone'] = normalizePhoneNumber(phoneNumbers[0]);\n          }\n      } else if (Array.isArray(personPhoneNumbers) && personPhoneNumbers.length > 0) {\n          structuredData.personal['personal-phone'] = normalizePhoneNumber(personPhoneNumbers[0]);\n      }\n  }\n\n  // Work Fields\n  structuredData.work['work-title'] = getNestedValue(processData, 'person.title') || '';\n  structuredData.work['work-name'] = getNestedValue(processData, 'organization.name') || '';\n  structuredData.work['work-domain'] = extractDomain(getNestedValue(processData, 'organization.domain') || '');\n  structuredData.work['work-industry'] = decodeHtmlEntities(getNestedValue(processData, 'organization.industry') || '');\n  structuredData.work['work-size'] = normalizeCompanySize(getNestedValue(processData, 'organization.company_size') || '');\n  structuredData.work['work-location-address'] = getNestedValue(processData, 'organization.location.address') || '';\n  structuredData.work['work-location-city'] = getNestedValue(processData, 'organization.location.city') || '';\n  structuredData.work['work-location-state'] = getNestedValue(processData, 'organization.location.state') || '';\n  structuredData.work['work-location-country'] = standardizeCountry(getNestedValue(processData, 'organization.location.country') || '');\n  structuredData.work['work-location-zip'] = getNestedValue(processData, 'organization.location.zip') || '';\n\n  // Handle work phone numbers\n  const orgPhoneNumbers = getNestedValue(processData, 'organization.phone_numbers');\n  if (orgPhoneNumbers) {\n      if (typeof orgPhoneNumbers === 'string') {\n          const phoneNumbers = orgPhoneNumbers.split(' | ').map(num => num.trim());\n          if (phoneNumbers.length > 0) {\n              structuredData.work['work-phone'] = normalizePhoneNumber(phoneNumbers[0]);\n          }\n      } else if (Array.isArray(orgPhoneNumbers) && orgPhoneNumbers.length > 0) {\n          structuredData.work['work-phone'] = normalizePhoneNumber(orgPhoneNumbers[0]);\n      }\n  }\n\n  // Handle Organization URLs\n  const orgUrlsMap = {\n      'twitter': 'work-url-twitter',\n      'website': 'work-url-website',\n      'blog': 'work-url-blog',\n      'facebook': 'work-url-facebook',\n      'instagram': 'work-url-instagram',\n      'linkedin': 'work-url-linkedin',\n      'stackoverflow': 'work-url-stackoverflow',\n      'pitchbook': 'work-url-pitchbook',\n      'monster': 'work-url-monster',\n      'crunchbase': 'work-url-crunchbase',\n      'angellist': 'work-url-angellist',\n      'indeed': 'work-url-indeed',\n      'glassdoor': 'work-url-glassdoor'\n  };\n\n  Object.entries(orgUrlsMap).forEach(([sourceKey, targetKey]) => {\n      const url = getNestedValue(processData, `organization.urls.${sourceKey}`);\n      if (url) {\n          structuredData.work[targetKey] = normalizeUrl(url);\n      }\n  });\n\n  // Handle emails\n  const emails = getNestedValue(processData, 'emails') || [];\n  emails.forEach(emailObj => {\n      if (emailObj && emailObj.email && emailObj.label) {\n          const email = emailObj.email.toLowerCase();\n          const label = emailObj.label.toLowerCase();\n          \n          if (label === 'work') {\n              if (!structuredData.work['work-email-list'].includes(email)) {\n                  structuredData.work['work-email-list'].push(email);\n                  structuredData.work['work-email-labels'].push('work');\n                  if (!structuredData.work['work-email']) {\n                      structuredData.work['work-email'] = email;\n                  }\n              }\n          } else if (label === 'personal') {\n              if (!structuredData.personal['personal-email-list'].includes(email)) {\n                  structuredData.personal['personal-email-list'].push(email);\n                  structuredData.personal['personal-email-labels'].push('personal');\n                  if (!structuredData.personal['personal-email']) {\n                      structuredData.personal['personal-email'] = email;\n                  }\n              }\n          }\n      }\n  });\n\n  // Set primary email if not already set\n  if (!structuredData.work['work-email'] && processData.email) {\n      const email = processData.email.toLowerCase();\n      structuredData.work['work-email'] = email;\n      if (!structuredData.work['work-email-list'].includes(email)) {\n          structuredData.work['work-email-list'].push(email);\n          structuredData.work['work-email-labels'].push('work');\n      }\n  }\n\n  // Technical Fields\n  structuredData.technical['technical-opensend-id'] = getNestedValue(processData, 'oir_source') || '';\n  structuredData.technical['technical-data-source'] = 'opensend';\n  structuredData.technical['technical-user-geolocation'] = getNestedValue(processData, 'userGeolocation') || '';\n  structuredData.technical['technical-source-domain'] = extractDomain(getNestedValue(processData, 'sourceDomain') || '');\n  structuredData.technical['technical-user-agent'] = getNestedValue(processData, 'userAgent') || '';\n  structuredData.technical['technical-user-ip'] = getNestedValue(processData, 'userIp') || '';\n  structuredData.technical['technical-source-url'] = normalizeUrl(getNestedValue(processData, 'sourceUrl') || '');\n  structuredData.technical['technical-timestamp'] = formatTimestamp(getNestedValue(processData, 'timestamp'));\n\n  // Set work type and serves\n  if (structuredData.work['work-name']) {\n      structuredData.work['work-type'] = 'private';\n  }\n\n  if (structuredData.work['work-industry']) {\n      structuredData.work['work-serves'] = 'businesses';\n  }\n\n  // Clean up the structured data to only include fields we received data for\n  cleanupStructuredData(processData, structuredData); \n}\n// Common post-processing for all sources\nstructuredData.work['work-name-normalized'] = normalizeCompanyName(structuredData.work['work-name']);\n\n// Return the structured data\nreturn { json: structuredData };\n\n} catch (error) {\nconsole.error('Error processing item:', error);\nreturn item;\n}\n});"},"id":"71f3b001-8679-4107-b3fd-994486f70ef5","name":"Structure Data (All)","type":"n8n-nodes-base.code","typeVersion":2,"position":[760,2120],"alwaysOutputData":true,"notesInFlow":false,"onError":"continueRegularOutput"},{"parameters":{"method":"POST","url":"https://api.leadmagic.io/profile-search","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"X-API-Key","value":"0a1af248e494d0f8e3a5b3a3b1fa6458"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"profile_url\": \"{{ $json.personal[\"personal-url-linkedin\"] }}\"\n}","options":{}},"id":"6dcc0ef1-8fd2-4f2b-bfe9-a328f5f9bba0","name":"LeadMagic - Enrich With LinkedIn Profile","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2140,1360],"credentials":{"httpHeaderAuth":{"id":"e1rLFjQvoZBZcsF6","name":"searchactions.com (Lead Magic)"}}},{"parameters":{"content":"## NORMALIZE \nNormalize job title, company name and other attributes to put them into a standardized format. ","height":1122.7830784874247,"width":377.35257732963464,"color":7},"id":"ec58c54e-87b6-4344-9dfe-4d5d6cf9a66d","name":"Sticky Note9","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1040,-280]},{"parameters":{"content":"## FILTER\nFilter out contacts that don't have email address AND a personal linkedin OR are in HubSpot. \n1. We need either an email address (business preferrable) or a linkedin to enrich further.  \n2. We don't target people who are in HuBSpot ","height":1122.7830784874247,"width":611.5778036348646,"color":7},"id":"e7fe849d-0d86-422f-8176-7d2375f93fe6","name":"Sticky Note10","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1500,-260]},{"parameters":{"content":"## ORGANIZE\nStructure the data from RB2B, OpenSend and Vector so that all of the fields are standardized.  ","height":1122.7830784874247,"width":377.35257732963464,"color":7},"id":"42e0d726-af10-4247-a5c6-a9abdc73c4a6","name":"Sticky Note11","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[580,-280]},{"parameters":{"content":"## ENRICH PERSON/COMPANY RECORDS\nEnrich contacts so that we have their business email address, linkedin profile and other online properties and attributes that are known.","height":1122.7830784874247,"width":402.35257732963464,"color":7},"id":"0fc1b0e8-9a2e-42ca-b031-44f21b494bd3","name":"Sticky Note12","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2580,-280]},{"parameters":{"content":"## FIND EMAIL & LINKEDIN\nFind the business email and personal linkedin for contacts that are missing these two pieces of data.  We need one or the other to enrich.  If we have neither, they should not have made it to this stage.","height":1122.7830784874247,"width":377.35257732963464,"color":7},"id":"0aa6e78a-bb68-4865-8502-864323f8bb54","name":"Sticky Note13","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2160,-280]},{"parameters":{"content":"##                              SEND\nEnrich contacts so that we have their business email address, linkedin profile a","height":607.8532227032642,"width":567.3525773296346,"color":3},"id":"62806724-7abd-47ca-b3b7-ba295b4e5ca5","name":"Sticky Note14","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3680,-40]},{"parameters":{"content":"## RECEIVE\n\nData is received to the webhook from Opensend, RB2B and Vector\n","height":445.77591752299224,"width":375.8722359412172,"color":3},"id":"9bc9faa3-060f-489e-9466-462d1eec0f33","name":"Sticky Note15","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[140,20]},{"parameters":{"content":"## VERSION 1 (ACTIVE)","height":1365,"width":4295,"color":4},"id":"3e2789d5-9e04-44d8-a615-caf539ea2709","name":"Sticky Note16","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-40,-320]},{"parameters":{"content":"## VERSION 2 (INACTIVE)\n**Double click** to edit me. [Guide](https://docs.n8n.io/workflows/sticky-notes/)","height":1204.1974570363586,"width":4905,"color":4},"id":"8812a829-fb5a-4d9b-8750-581e47ea90ef","name":"Sticky Note17","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-40,1100]},{"parameters":{"content":"## FILTER\nFilter out contacts that don't have email address AND a personal linkedin OR are in HubSpot. \n1. We need either an email address (business preferrable) or a linkedin to enrich further.  \n2. We don't target people who are in HuBSpot ","height":1150.822621591349,"width":611.5778036348646,"color":7},"id":"3eac6cf0-fbf6-4e9c-83ab-93505e0c5c80","name":"Sticky Note18","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1340,1180]},{"parameters":{"content":"## FIND EMAIL & LINKEDIN\nFind the business email and personal linkedin for contacts that are missing these two pieces of data.  We need one or the other to enrich.  If we have neither, they should not have made it to this stage. ","height":1122.7830784874247,"width":377.35257732963464,"color":7},"id":"b2aa07f0-fe78-487f-adca-559ee479bd70","name":"Sticky Note19","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2000,1180]},{"parameters":{"content":"## ENRICH PERSON/COMPANY RECORDS\nEnrich contacts so that we have their business email address, linkedin profile and other online properties and attributes that are known.","height":1202.9971970851063,"width":471.6267426452116,"color":7},"id":"20cc0506-9452-4529-bca0-c61cea670839","name":"Sticky Note20","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2440,1100]},{"parameters":{"content":"##                              SEND\nEnrich contacts so that we have their business email address, linkedin profile a","height":445.77591752299224,"width":357.35257732963464,"color":3},"id":"a0340d02-7ad4-47f9-9798-ed2a1c3dbe46","name":"Sticky Note21","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3560,1540]},{"parameters":{"content":"## ENRICH TRAITS (AI)\nFind traits about the person and company, such as job responsibilties, daily challenges, etc","height":1122.7830784874247,"width":514.6607441392813,"color":7},"id":"3bc26a86-bd3f-48ed-beeb-c0e4459c98f5","name":"Sticky Note22","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[2980,1180]},{"parameters":{"content":"## RECEIVE\n\nData is received to the webhook from Opensend, RB2B and Vector\n","height":760.7759175229922,"width":375.8722359412172,"color":3},"id":"454886ac-ef2d-4c07-87eb-a8a31609a21d","name":"Sticky Note23","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[240,1280]},{"parameters":{"content":"## ENRICH TRAITS (AI)\nFind traits about the person and company, such as job responsibilties, daily challenges, etc","height":1122.7830784874247,"width":514.6607441392813,"color":7},"id":"9124d815-85d8-4176-8b1f-488d172230c3","name":"Sticky Note24","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[3060,-280]},{"parameters":{"language":"python","pythonCode":"# Get required modules\ndatetime = __import__('datetime').datetime\nre = __import__('re')\ntime = __import__('time')\nurllib = __import__('urllib')\njson = __import__('json')\n\ndef validate_email(email):\n    \"\"\"Enhanced email validation with detailed feedback\"\"\"\n    if not email:\n        return {'is_valid': False, 'error': 'Email is empty'}\n    \n    if not isinstance(email, str):\n        return {'is_valid': False, 'error': f'Invalid type: {type(email)}'}\n    \n    email = email.strip()\n    \n    if len(email) > 254:\n        return {'is_valid': False, 'error': 'Email exceeds maximum length'}\n    \n    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return {\n        'is_valid': bool(re.match(email_pattern, email)),\n        'error': None if re.match(email_pattern, email) else 'Invalid email format'\n    }\n\ndef get_email_domain(email):\n    \"\"\"Extract and validate domain from email\"\"\"\n    try:\n        parts = email.strip().split('@')\n        if len(parts) != 2:\n            return '', 'Invalid email format'\n        domain = parts[1].lower()\n        return domain, None\n    except Exception as e:\n        return '', f'Domain extraction error: {str(e)}'\n\ndef check_zerobounce(email, api_key):\n    \"\"\"Validate email using ZeroBounce API\"\"\"\n    result = {\n        'success': False,\n        'data': None,\n        'error': None,\n        'timestamp': datetime.now().isoformat(),\n        'alert': None\n    }\n    \n    try:\n        base_url = \"https://api-us.zerobounce.net/v2/validate\"\n        params = {\n            'api_key': api_key,\n            'email': email,\n            'ip_address': ''\n        }\n        url = f\"{base_url}?{urllib.parse.urlencode(params)}\"\n        \n        req = urllib.request.Request(url)\n        with urllib.request.urlopen(req, timeout=10) as response:\n            result['data'] = json.loads(response.read().decode())\n            result['success'] = True\n            print(f\"ZeroBounce validation successful for {email}\")\n            \n    except Exception as e:\n        error_msg = str(e)\n        result['error'] = error_msg\n        result['alert'] = {\n            'type': 'error',\n            'priority': 'high',\n            'title': 'ZeroBounce API Error',\n            'message': f\"Failed to validate email: {email}\\nError: {error_msg}\",\n            'suggestion': 'Check API connectivity and credentials'\n        }\n        print(f\"ZeroBounce validation failed for {email}: {error_msg}\")\n    \n    return result\n\ndef process_emails(item, free_domains, api_key):\n    \"\"\"Process emails with nested structure handling\"\"\"\n    start_time = time.time()\n    \n    processing_status = {\n        'timestamp': datetime.now().isoformat(),\n        'success': False,\n        'has_valid_work_email': False,\n        'processing_time_ms': 0,\n        'errors': [],\n        'warnings': [],\n        'alerts': [],\n        'zerobounce_status': None,\n        'metrics': {\n            'validation_attempts': 0,\n            'successful_validations': 0,\n            'failed_validations': 0\n        },\n        'structure_info': {\n            'work_section_present': 'work' in item,\n            'personal_section_present': 'personal' in item\n        }\n    }\n    \n    try:\n        # Validate structure\n        if 'work' not in item:\n            print(\"Warning: 'work' section missing in item\")\n            item['work'] = {}\n        \n        if 'personal' not in item:\n            print(\"Warning: 'personal' section missing in item\")\n            item['personal'] = {}\n        \n        # Access work email from nested structure\n        work_email = item['work'].get('work-email', '')\n        print(f\"Processing work email: {work_email}\")\n        \n        if work_email:\n            processing_status['metrics']['validation_attempts'] += 1\n            validation = validate_email(work_email)\n            \n            if validation['is_valid']:\n                domain, domain_error = get_email_domain(work_email)\n                \n                if domain_error:\n                    print(f\"Domain error for {work_email}: {domain_error}\")\n                    processing_status['errors'].append(domain_error)\n                    processing_status['alerts'].append({\n                        'type': 'error',\n                        'priority': 'medium',\n                        'title': 'Domain Extraction Error',\n                        'message': f\"Failed to process email domain: {work_email}\\nError: {domain_error}\"\n                    })\n                elif domain in free_domains:\n                    print(f\"Found free domain email: {work_email}\")\n                    # Ensure personal-email-list exists\n                    if 'personal-email-list' not in item['personal']:\n                        item['personal']['personal-email-list'] = []\n                    \n                    # Move email to personal list\n                    if work_email not in item['personal']['personal-email-list']:\n                        item['personal']['personal-email-list'].append(work_email)\n                        print(f\"Moved {work_email} to personal-email-list\")\n                    \n                    # Clear work email\n                    item['work']['work-email'] = ''\n                    processing_status['warnings'].append(f\"Moved free domain email to personal list: {work_email}\")\n                else:\n                    print(f\"Validating work email with ZeroBounce: {work_email}\")\n                    zerobounce_result = check_zerobounce(work_email, api_key)\n                    processing_status['zerobounce_status'] = zerobounce_result\n                    \n                    if zerobounce_result['alert']:\n                        processing_status['alerts'].append(zerobounce_result['alert'])\n                        processing_status['metrics']['failed_validations'] += 1\n                    \n                    if zerobounce_result['success']:\n                        processing_status['metrics']['successful_validations'] += 1\n                        zb_data = zerobounce_result['data']\n                        \n                        if zb_data['status'] == 'valid':\n                            processing_status['has_valid_work_email'] = True\n                            print(f\"Valid work email confirmed: {work_email}\")\n                        else:\n                            print(f\"Invalid work email per ZeroBounce: {work_email}\")\n                            # Move to personal list\n                            if 'personal-email-list' not in item['personal']:\n                                item['personal']['personal-email-list'] = []\n                            \n                            if work_email not in item['personal']['personal-email-list']:\n                                item['personal']['personal-email-list'].append(work_email)\n                                print(f\"Moved invalid work email to personal list: {work_email}\")\n                            \n                            item['work']['work-email'] = ''\n                            \n                            processing_status['warnings'].append(\n                                f\"Moved invalid work email to personal list: {work_email} \"\n                                f\"(ZeroBounce status: {zb_data['status']})\"\n                            )\n                            \n                            processing_status['alerts'].append({\n                                'type': 'warning',\n                                'priority': 'low',\n                                'title': 'Invalid Work Email Detected',\n                                'message': (f\"Email {work_email} was marked as invalid by ZeroBounce \"\n                                          f\"(Status: {zb_data['status']}) and moved to personal list\")\n                            })\n            else:\n                print(f\"Invalid email format: {work_email}\")\n                processing_status['errors'].append(\n                    f\"Invalid email format: {work_email} - {validation['error']}\"\n                )\n                processing_status['metrics']['failed_validations'] += 1\n                processing_status['alerts'].append({\n                    'type': 'error',\n                    'priority': 'medium',\n                    'title': 'Invalid Email Format',\n                    'message': f\"Email validation failed for: {work_email}\\nError: {validation['error']}\"\n                })\n        \n        processing_status['success'] = True\n        \n    except Exception as e:\n        error_msg = str(e)\n        print(f\"Error processing emails: {error_msg}\")\n        processing_status['errors'].append(f\"Processing error: {error_msg}\")\n        processing_status['alerts'].append({\n            'type': 'error',\n            'priority': 'critical',\n            'title': 'Critical Processing Error',\n            'message': f\"Failed to process emails\\nError: {error_msg}\",\n            'suggestion': 'Check system logs and input data format'\n        })\n    \n    finally:\n        processing_status['processing_time_ms'] = round(\n            (time.time() - start_time) * 1000, 2\n        )\n        \n        if processing_status['processing_time_ms'] > 5000:\n            print(f\"Slow processing detected: {processing_status['processing_time_ms']}ms\")\n            processing_status['alerts'].append({\n                'type': 'warning',\n                'priority': 'medium',\n                'title': 'Slow Processing Detected',\n                'message': f\"Email processing took {processing_status['processing_time_ms']}ms\",\n                'suggestion': 'Monitor system performance and API response times'\n            })\n    \n    return item, processing_status\n\n# Main execution\noverall_stats = {\n    'start_time': datetime.now().isoformat(),\n    'processed': 0,\n    'successful': 0,\n    'failed': 0,\n    'errors': [],\n    'warnings': [],\n    'alerts': [],\n    'performance': {\n        'total_time_ms': 0,\n        'average_time_ms': 0\n    }\n}\n\ntry:\n    print(\"Starting email processing...\")\n    domains_csv = items[0].json.get('domains_csv', '')\n    api_key = \"0e852e8f1263491991aa8137c94e1244\"\n    \n    # Load free domains\n    free_domains = {domain.strip().lower() for domain in domains_csv.split('\\n') if domain.strip()}\n    print(f\"Loaded {len(free_domains)} free domains\")\n    \n    if not free_domains:\n        raise ValueError(\"No valid domains loaded from CSV\")\n    \n    # Process items\n    for item in items:\n        overall_stats['processed'] += 1\n        print(f\"\\nProcessing item {overall_stats['processed']}\")\n        \n        # Process the item's json data\n        processed_item, status = process_emails(item.json, free_domains, api_key)\n        \n        if status['success']:\n            overall_stats['successful'] += 1\n        else:\n            overall_stats['failed'] += 1\n        \n        overall_stats['errors'].extend(status['errors'])\n        overall_stats['warnings'].extend(status['warnings'])\n        overall_stats['alerts'].extend(status['alerts'])\n        overall_stats['performance']['total_time_ms'] += status['processing_time_ms']\n        \n        # Update item's json data\n        item.json = processed_item\n        item.json['processing_status'] = status\n        \n    # Calculate final statistics\n    overall_stats['performance']['average_time_ms'] = round(\n        overall_stats['performance']['total_time_ms'] / max(overall_stats['processed'], 1), 2\n    )\n    \n    # Add summary alert if there were failures\n    if overall_stats['failed'] > 0:\n        print(f\"Processing completed with {overall_stats['failed']} failures\")\n        overall_stats['alerts'].append({\n            'type': 'warning',\n            'priority': 'medium',\n            'title': 'Processing Run Summary',\n            'message': (\n                f\"Completed with {overall_stats['failed']} failures\\n\"\n                f\"Success rate: {(overall_stats['successful'] / overall_stats['processed']) * 100:.1f}%\\n\"\n                f\"Average processing time: {overall_stats['performance']['average_time_ms']}ms\"\n            ),\n            'suggestion': 'Review individual error messages for details'\n        })\n    \n    # Add overall stats to first item\n    if items:\n        items[0].json['overall_stats'] = overall_stats\n        print(\"Processing completed successfully\")\n\nexcept Exception as e:\n    error_msg = str(e)\n    print(f\"Critical error: {error_msg}\")\n    critical_error = {\n        'timestamp': datetime.now().isoformat(),\n        'error': error_msg,\n        'type': 'critical_failure',\n        'alert': {\n            'type': 'error',\n            'priority': 'critical',\n            'title': 'System Critical Error',\n            'message': f\"Email processing system failure\\nError: {error_msg}\",\n            'suggestion': 'Immediate attention required - check system logs'\n        }\n    }\n    \n    for item in items:\n        item.json['processing_status'] = critical_error\n\nreturn items"},"id":"ed68f051-4383-4078-b8e0-d372f129db0c","name":"Free or Work Email?","type":"n8n-nodes-base.code","typeVersion":2,"position":[1160,1800]},{"parameters":{"content":"## To Send Notifications to Slack\nTo use with N8N's Slack integration:\n\n1. After this node, add an 'IF' node:\n\njavascript\n// Check for alerts in processing status\nreturn $input.item.json.processing_status.alerts.length > 0\n\n2. Connect to a Slack node:\n\njavascript\n// For individual alerts\n{\n  \"channel\": \"your-channel\",\n  \"text\": `*${$input.item.json.processing_status.alerts[0].title}*\\n${$input.item.json.processing_status.alerts[0].message}`,\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": `*${$input.item.json.processing_status.alerts[0].title}*\\n${$input.item.json.processing_status.alerts[0].message}`\n      }\n    },\n    {\n      \"type\": \"context\",\n      \"elements\": [\n        {\n          \"type\": \"mrkdwn\",\n          \"text\": `Priority: ${$input.item.json.processing_status.alerts[0].priority}`\n        }\n      ]\n    }\n  ]\n}\n\n// Or for summary alerts\n{\n  \"channel\": \"your-channel\",\n  \"text\": `*${$input.first().json.overall_stats.alerts[0].title}*\\n${$input.first().json.overall_stats.alerts[0].message}`,\n  \"blocks\": [\n    {\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": `*${$input.first().json.overall_stats.alerts[0].title}*\\n${$input.first().json.overall_stats.alerts[0].message}`\n      }\n    }\n  ]\n}","height":244.46128604424246,"width":553.4970447735445},"id":"63bf0bc4-cba5-4fb1-be63-8b7973d9e0a4","name":"Sticky Note3","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[1160,1980]},{"parameters":{"method":"POST","url":"https://api.leadmagic.io/email-finder","authentication":"genericCredentialType","genericAuthType":"httpHeaderAuth","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Content-Type","value":"application/json"},{"name":"X-API-Key","value":"0a1af248e494d0f8e3a5b3a3b1fa6458"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"first_name\": \"{{ $('Set Full Name').item.json.firstName || $('Set Full Name').item.json['First Name'] || $('Webhook').item.json.body['person.first_name'] || $('Webhook').item.json.body.person.first_name || $('Set Full Name').item.json['First Name Modified'] || $('Set Full Name').item.json['person.first_name'] || $('Set Full Name').item.json.person.first_name || $('Washing Machine').item.json['First Name'] }}\",\n  \"last_name\": \"{{ $('Washing Machine').item.json['Last Name Modified'] || $('Washing Machine').item.json['Last Name'] || $('Set Full Name').item.json[\"First Name Modified\"] || $('Set Full Name').item.json.person.last_name || $('Set Full Name').item.json['person.last_name'] || $('Set Full Name').item.json['Last Name Modified']}}\",\n  \"domain\": \"{{ $('Washing Machine').item.json['Root Domain Modified'] || $('Set Full Name').item.json['Root Domain Modified'] || $('Washing Machine').item.json.organization.domain || $('Washing Machine').item.json['organization.domain'] || $('Set Full Name').item.json['Root Domain Modified'] || $('Set Full Name').item.json.organization.domain || $('Washing Machine').item.json['Root Domain Modified'] }}\",\n  \"company_name\": \"{{ $('Webhook').item.json.body['organization.name'] || $('Washing Machine').item.json['Company Name Modified'] || $('Washing Machine').item.json.organization.name || $('Washing Machine').item.json['organization.name'] || $('Set Full Name').item.json['Company Name Modified'] || $('Set Full Name').item.json.organization.name || $('Set Full Name').item.json['normalized_company_name'] || $('Washing Machine').item.json['Company Name'] }}\"\n}","options":{}},"id":"986be0d8-31f6-4d33-89b1-87ba9b4251e2","name":"Enrich - LeadMagic4","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[2280,160],"credentials":{"httpHeaderAuth":{"id":"e1rLFjQvoZBZcsF6","name":"searchactions.com (Lead Magic)"}}},{"parameters":{"authentication":"appToken","operation":"search","filterGroupsUi":{"filterGroupsValues":[{"filtersUi":{"filterValues":[{"propertyName":"email|string","value":"={{ $('Webhook').item.json.body.email || $json['Company Email 1 Modified'] || $json['Personal Email 1 Modified'] }}"}]}}]},"additionalFields":{}},"id":"41927596-4b4c-4cc6-8644-804ca6beba4c","name":"In HubSpot? (Contact)","type":"n8n-nodes-base.hubspot","typeVersion":2.1,"position":[1560,-60],"alwaysOutputData":true,"credentials":{"hubspotAppToken":{"id":"B4qJi5bVNVRoRnuV","name":"ispartnersllc.com Hubspot App Token"}},"onError":"continueRegularOutput"},{"parameters":{"authentication":"appToken","resource":"company","operation":"searchByDomain","domain":"={{ $('Washing Machine').item.json['Root Domain Modified'] || $('Set Full Name').item.json['Root Domain Modified'] }}","options":{}},"id":"a1e762ce-4dce-4a89-a534-684436b01173","name":"In HubSpot? (Company)","type":"n8n-nodes-base.hubspot","typeVersion":2.1,"position":[1560,160],"alwaysOutputData":true,"credentials":{"hubspotAppToken":{"id":"B4qJi5bVNVRoRnuV","name":"ispartnersllc.com Hubspot App Token"}},"onError":"continueRegularOutput"},{"parameters":{"httpMethod":"POST","path":"acdb1c3f-8825-483e-a22b-3e1da644ac0e","options":{}},"id":"1a6a9faf-2fb7-425f-9aaf-2f444ba2091d","name":"OpenSend","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[340,1620],"webhookId":"ddb88312-9bc7-4ed8-bc99-ce1dafe60df8"},{"parameters":{"httpMethod":"POST","path":"f9f611b4-2e3e-4aa6-8207-3d24b4ff5ab5","options":{}},"id":"4b68467b-9cfd-46a7-9eb5-6496727ae537","name":"RB2B","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[340,1800],"webhookId":"1c3e4f52-63ed-49a2-a0a1-8a09990d16b2"},{"parameters":{"httpMethod":"POST","path":"06dccdf9-b7d4-4cc9-b1cf-9a0528249f7c","options":{}},"id":"97be78b4-ee98-4e8d-88c2-6814cbe3466f","name":"Vector","type":"n8n-nodes-base.webhook","typeVersion":2,"position":[340,1460],"webhookId":"297ece99-5773-4af4-b23a-747c6c24fb19"},{"parameters":{"method":"POST","url":"https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-9be62fa1-b8c9-4474-a26b-b36ebad8dcbb","sendBody":true,"bodyParameters":{"parameters":[{"name":"timestamp","value":"={{ $('Washing Machine').item.json['Timestamp Modified'] }}"},{"name":"First Name","value":"={{ $('Washing Machine').item.json['First Name Modified'] || $('Enrich - LeadMagic4').item.json.first_name }}"},{"name":"Last Name","value":"={{$('Washing Machine').item.json['Last Name Modified'] || $('Enrich - LeadMagic4').item.json.last_name }}"},{"name":"Page Visited","value":"={{$('Washing Machine').item.json['Page Visited Modified']||$('Washing Machine').item.json[\"pageUrl\"] || $('Washing Machine').item.json[\"sourceUrl\"] || $('Washing Machine').item.json[\"webPageUrl\"] || $('Washing Machine').item.json[\"Page Visited Modified\"] || \"No URL available\"}}\n"},{"name":"Page Title (Webhook)","value":"={{$('Washing Machine').item.json[\"pageTitle\"] ||$('Washing Machine').item.json[\"Page Title\"] || $('Washing Machine').item.json[\"page title\"] || $('Washing Machine').item.json[\"Page Title Modified\"] || null}}\n"},{"name":"LinkedIn - Person","value":"={{ $('Washing Machine').item.json['LinkedIn Profile Modified'] || $('Washing Machine').item.json['LinkedIn URL'] || $('Washing Machine').item.json['person.urls.linkedin'] || $('Washing Machine').item.json['organization.urls.linkedin'] || $json['LinkedIn Profile Modified'] || $('Webhook').item.json.body.person.urls.linkedin || $('Webhook').item.json.body['person.urls.linkedin'] || $('Webhook').item.json.body.linkedinUrl }}"},{"name":"Job Title - Person","value":"={{ $json['Job Title Modified'] || $('Washing Machine').item.json['Job Title Modified'] }}"},{"name":"Website","value":"={{ $('Washing Machine').item.json.attributes.company_domain ? $('Washing Machine').item.json.attributes.company_domain : \n    $json['organization.urls.website'] ? $json['organization.urls.website'] : \n    $('Washing Machine').item.json.Website ? $('Washing Machine').item.json.Website : \n    $('Washing Machine').item.json['organization.urls.website'] ? $('Washing Machine').item.json['organization.urls.website'] : \n    $('Washing Machine').item.json.organization.urls.website ? $('Washing Machine').item.json.organization.urls.website : \n    $('Webhook').item.json.body['organization.urls.website'] ? $('Webhook').item.json.body['organization.urls.website'] : \n    $('Webhook').item.json.body.organization.urls.website }}"},{"name":"Work Email","value":"={{ $json.email  ||  $('Washing Machine').item.json.email }}\n"},{"name":"Company Name","value":"={{ $('Set Full Name').item.json['Company Name Modified'] || $('Set Full Name').item.json.organization.name || $('Washing Machine').item.json['organization.name'] || $json.company_name || $('Webhook').item.json.body.company || $('Webhook').item.json.body.attributes.company_name }}"},{"name":"Company (Normalized)","value":"={{ $json.normalized_company_name || $('Washing Machine').item.json.normalized_company_name }}\n"},{"name":"LinkedIn - Company","value":"={{ $('Enrich - LeadMagic4').item.json.company_linkedin_url || $json.company_linkedin_url || $('Webhook').item.json.body.organization.urls.linkedin || $('Set Full Name').item.json['organization.urls.linkedin'] || $('Set Full Name').item.json.organization.urls.linkedin || $('Washing Machine').item.json['organization.urls.linkedin'] || $('Washing Machine').item.json.organization.urls.linkedin || $('Webhook').item.json.body['organization.urls.linkedin'] }}"},{"name":"Source","value":"={{ $('Set Full Name').item.json.data_provider || $json.data_provider || $('Washing Machine').item.json.data_provider }}"},{"name":"Country","value":"={{ $('Webhook').item.json.body['organization.location.country'] || $('Set Full Name').item.json['Country Modified'] || $('Set Full Name').item.json['organization.location.country'] || $json.company_location.country || $('Washing Machine').item.json['Country Modified'] }}"},{"name":"Vvid","value":"={{ $json.vvid || $('Washing Machine').item.json.vvid || $('Webhook').item.json.body.vvid }}"},{"name":"Facebook - Person","value":"={{ $('Webhook').item.json.body.person.urls.facebook || $('Washing Machine').item.json.person.urls.facebook || $('Set Full Name').item.json['person.urls.facebook'] || $('Set Full Name').item.json.person.urls.facebook }}{{ $('Webhook').item.json.body['person.urls.facebook'] }}"},{"name":"Twitter - Person","value":"={{ $('Webhook').item.json.body.person.urls.twitter || $('Washing Machine').item.json.person.urls.twitter || $('Washing Machine').item.json['person.urls.twitter'] || $('Set Full Name').item.json['person.urls.twitter'] || $('Set Full Name').item.json.person.urls.twitter || $('Webhook').item.json.body['person.urls.twitter'] }}"},{"name":"Github - Person","value":"={{ $('Set Full Name').item.json['person.urls.github'] || $('Webhook').item.json.body['person.urls.github'] || $('Washing Machine').item.json.person.urls.github || $('Washing Machine').item.json['person.urls.github'] }}"},{"name":"Phone - Person","value":"={{ $('Washing Machine').item.json['Phone - Personal Modified'] || $('Washing Machine').item.json.person.phone_numbers[0] || $('Email is Deliverable?').item.json.datas[0].contact.most_probable_phone || $('Webhook').item.json.body.person.phone_numbers[0] || $('Set Full Name').item.json['Phone - Personal Modified'] || $('Webhook').item.json.body.attributes.mobile_phone }}"},{"name":"Phone 2 - Person","value":"={{ $('Washing Machine').item.json.person.phone_numbers[1] || $('Set Full Name').item.json.person.phone_numbers[1] || $('Webhook').item.json.body.person.phone_numbers[1] }}"},{"name":"Facebook - Company","value":"={{ $('Washing Machine').item.json['organization.urls.facebook'] || $('Set Full Name').item.json.organization.urls.facebook || $('Set Full Name').item.json['organization.urls.facebook'] || $('Webhook').item.json.body['organization.urls.facebook'] || $json.company_facebook_url || $json.company_facebook_url || $('Enrich - LeadMagic4').item.json.company_facebook_url }}"},{"name":"Instagram - Company","value":"={{ $('Set Full Name').item.json.organization.urls.instagram || $('Washing Machine').item.json.organization.urls.instagram || $('Washing Machine').item.json['organization.urls.instagram'] || $('Set Full Name').item.json['organization.urls.instagram'] || $('Webhook').item.json.body['organization.urls.instagram'] }}"},{"name":"Monster - Company","value":"={{ $('Washing Machine').item.json.organization.urls.monster || $('Webhook').item.json.body['organization.urls.monster'] }}"},{"name":"Company - Pitchbook","value":"={{ $('Washing Machine').item.json['organization.urls.pitchbook'] || $('Set Full Name').item.json.organization.urls.pitchbook || $('Set Full Name').item.json['organization.urls.pitchbook'] || $('Webhook').item.json.body['organization.urls.pitchbook'] }}"},{"name":"Company - Crunchbase","value":"={{ $('Webhook').item.json.body['organization.urls.crunchbase'] }}"},{"name":"Company - Angellist","value":"={{ $('Webhook').item.json.body['organization.urls.angellist'] }}"},{"name":"Company - Indeed","value":"={{ $('Webhook').item.json.body['organization.urls.indeed'] || $('Washing Machine').item.json['organization.urls.indeed'] || $('Webhook').item.json.body['organization.urls.indeed'] }}"},{"name":"Company - Glassdoor","value":"={{ $('Washing Machine').item.json['organization.urls.glassdoor'] || $('Set Full Name').item.json['organization.urls.glassdoor'] || $('Webhook').item.json.body['organization.urls.glassdoor'] }}"},{"name":"Phone - Company","value":"={{ $('Webhook').item.json.body.organization.phone_numbers[0] || $('Washing Machine').item.json['Phone - Company Modified'] }}"},{"name":"Phone 2 - Company","value":"={{ $('Washing Machine').item.json.organization.phone_numbers[0] || $('Set Full Name').item.json.organization.phone_numbers[0] || $('Webhook').item.json.body.organization.phone_numbers[1] }}"},{"name":"Company Size","value":"={{ $json.company_size || $('Enrich - LeadMagic4').item.json.company_size }}"},{"name":"oir_source","value":"={{ $('Washing Machine').item.json.oir_source || $('Set Full Name').item.json.oir_source || $('Webhook').item.json.body.oir_source}}"},{"name":"Industry","value":"={{$json.company_industry || $json['Industry Modified'] || $('Set Full Name').item.json['Industry Modified'] || $('Washing Machine').item.json['Industry Modified'] || $('Webhook').item.json.body.organization.industry || $('Enrich - LeadMagic4').item.json.company_industry}}"},{"name":"In Hubspot","value":"={{ $('Washing Machine').item.json['In Hubspot'] || $('Set Full Name').item.json['In Hubspot'] }}"},{"name":"Twitter Company","value":"={{ $json.company_twitter_url || $('Set Full Name').item.json.person.urls.twitter || $('Set Full Name').item.json.organization.urls.twitter || $('Washing Machine').item.json.organization.urls.twitter || $('Webhook').item.json.body.person.urls.twitter || $('Enrich - LeadMagic4').item.json.company_twitter_url }}"},{"name":"Domain is Catchall","value":"={{ $json.is_domain_catch_all || $json.status }}"},{"name":"Company Type","value":"={{ $json.company_type || $('Enrich - LeadMagic4').item.json.company_type }}"},{"name":"Company Founded","value":"={{ $json.company_founded || $('Enrich - LeadMagic4').item.json.company_founded }}"},{"name":"City","value":"={{ $json.company_location.locality }}"},{"name":"State","value":"={{ $json.company_location.region }}"},{"name":"Country","value":"={{ $json.company_location.country }}"},{"name":"Zip","value":"={{ $json.company_location.postal_code }}"},{"name":"=GEO","value":"={{ $json.company_location.geo }}"},{"name":"Technical - IP","value":"={{ $('Webhook').item.json.body.attributes.ip_info.query || $('Washing Machine').item.json.userIp || $('Set Full Name').item.json.userIp }}"},{"name":"Technical - Email Status","value":"={{ $json.status }}"},{"name":"Technical - MX Record","value":"={{ $json.mx_record || $('Enrich - LeadMagic4').item.json.mx_record }}"},{"name":"Technical - Mail Provider","value":"={{ $json.mx_provider || $('Enrich - LeadMagic4').item.json.mx_provider }}"},{"name":"Technical - MX Security Gate","value":"={{ $('Enrich - LeadMagic4').item.json.mx_security_gateway }}"},{"name":"Email Verification Warning","value":"={{ $json.message || $('Enrich - LeadMagic4').item.json.message }}"},{"name":"Domain","value":"={{ $('Enrich - LeadMagic4').item.json.domain || $json.domain || $('Washing Machine').item.json.organization.domain || $('Webhook').item.json.body['organization.domain'] || $('Webhook').item.json.body.organization.domain }}"},{"name":"Full Name","value":"={{ $('Webhook').item.json.body.firstName + ' ' + $('Webhook').item.json.body.lastName || $('Enrich - LeadMagic4').item.json.first_name + ' ' + $('Enrich - LeadMagic4').item.json.last_name }}"}]},"options":{}},"id":"456a2b35-5f9c-48b5-a790-d267bf4a4211","name":"Clay - Table 1 (NEW)","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4060,320],"alwaysOutputData":true},{"parameters":{"conditions":{"options":{"caseSensitive":false,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"87654353-3a28-4379-8139-145f02a0c935","leftValue":"={{ $('Washing Machine').item.json['Page Visited Modified'] || $('Set Full Name').item.json['Page Visited Modified'] }}","rightValue":"=data-breach-2024\n","operator":{"type":"string","operation":"contains"}}],"combinator":"and"},"looseTypeValidation":true,"options":{"ignoreCase":true}},"id":"606da2b1-094e-4342-b205-1318aa69d053","name":"Healthcare Article?","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[3760,200],"retryOnFail":true,"maxTries":5,"notesInFlow":false,"alwaysOutputData":false},{"parameters":{"method":"POST","url":"https://api.clay.com/v3/sources/webhook/pull-in-data-from-a-webhook-e15bc196-47b6-40f7-adf2-094a23bcc8df","sendBody":true,"bodyParameters":{"parameters":[{"name":"timestamp","value":"={{ $('Washing Machine').item.json['Timestamp Modified'] }}"},{"name":"First Name","value":"={{ $('Washing Machine').item.json['First Name Modified'] }}"},{"name":"Last Name","value":"={{$('Washing Machine').item.json['Last Name Modified'] }}"},{"name":"Page Visited","value":"={{$('Washing Machine').item.json['Page Visited Modified']||$('Washing Machine').item.json[\"pageUrl\"] || $('Washing Machine').item.json[\"sourceUrl\"] || $('Washing Machine').item.json[\"webPageUrl\"] || $('Washing Machine').item.json[\"Page Visited Modified\"] || \"No URL available\"}}\n"},{"name":"Page Title (Webhook)","value":"={{$('Washing Machine').item.json[\"pageTitle\"] ||$('Washing Machine').item.json[\"Page Title\"] || $('Washing Machine').item.json[\"page title\"] || $('Washing Machine').item.json[\"Page Title Modified\"] || null}}\n"},{"name":"LinkedIn - Person","value":"=\n{{ $('Washing Machine').item.json['LinkedIn Profile Modified'] || $json['LinkedIn Profile Modified'] || $('Washing Machine').item.json['LinkedIn URL'] || $('Washing Machine').item.json['person.urls.linkedin'] || $('Washing Machine').item.json['organization.urls.linkedin'] || $('Webhook').item.json.body.person.urls.linkedin || $('Webhook').item.json.body['person.urls.linkedin'] }}"},{"name":"Job Title - Person","value":"={{ $json['Job Title Modified'] || $('Washing Machine').item.json['Job Title Modified'] }}"},{"name":"Website","value":"={{  $json['organization.urls.website'] || $('Washing Machine').item.json.Website || $('Washing Machine').item.json['organization.urls.website'] || $('Washing Machine').item.json.organization.urls.website || $('Webhook').item.json.body['organization.urls.website'] || $('Webhook').item.json.body.organization.urls.website }}"},{"name":"Work Email","value":"={{ $json.email  ||  $('Washing Machine').item.json.email }}\n"},{"name":"Company Name","value":"={{ $('Washing Machine').item.json['organization.name'] || $('Set Full Name').item.json.organization.name || $('Set Full Name').item.json['Company Name Modified'] || $json.company_name }}"},{"name":"Company (Normalized)","value":"={{ $json.normalized_company_name || $('Washing Machine').item.json.normalized_company_name }}\n"},{"name":"LinkedIn - Company","value":"={{ $json.company_linkedin_url || $('Enrich - LeadMagic').item.json.company_linkedin_url || $json.company_linkedin_url || $('Webhook').item.json.body.organization.urls.linkedin || $('Set Full Name').item.json['organization.urls.linkedin'] || $('Set Full Name').item.json.organization.urls.linkedin || $('Washing Machine').item.json['organization.urls.linkedin'] || $('Washing Machine').item.json.organization.urls.linkedin || $('Webhook').item.json.body['organization.urls.linkedin'] }}"},{"name":"Source","value":"={{ $('Set Full Name').item.json.data_provider || $json.data_provider || $('Washing Machine').item.json.data_provider }}"},{"name":"Country","value":"={{ $('Webhook').item.json.body['organization.location.country'] || $('Set Full Name').item.json['Country Modified'] || $('Set Full Name').item.json['organization.location.country'] || $json.company_location.country || $('Washing Machine').item.json['Country Modified'] }}"},{"name":"Vvid","value":"={{ $json.vvid }}"},{"name":"Facebook - Person","value":"={{ $('Webhook').item.json.body.person.urls.facebook || $('Washing Machine').item.json.person.urls.facebook || $('Set Full Name').item.json['person.urls.facebook'] || $('Set Full Name').item.json.person.urls.facebook }}{{ $('Webhook').item.json.body['person.urls.facebook'] }}"},{"name":"Twitter - Person","value":"={{ $('Webhook').item.json.body.person.urls.twitter || $('Washing Machine').item.json.person.urls.twitter || $('Washing Machine').item.json['person.urls.twitter'] || $('Set Full Name').item.json['person.urls.twitter'] || $('Set Full Name').item.json.person.urls.twitter || $('Webhook').item.json.body['person.urls.twitter'] }}"},{"name":"Github - Person","value":"={{ $('Set Full Name').item.json['person.urls.github'] || $('Webhook').item.json.body['person.urls.github'] || $('Washing Machine').item.json.person.urls.github || $('Washing Machine').item.json['person.urls.github'] }}"},{"name":"Phone - Person","value":"={{ $('Washing Machine').item.json['Phone - Personal Modified']  || $('Washing Machine').item.json.person.phone_numbers[0]  || $('Email is Deliverable?').item.json.datas[0].contact.most_probable_phone || $('Webhook').item.json.body.person.phone_numbers[0] || $('Washing Machine').item.json['Phone - Personal Modified'] || $('Set Full Name').item.json['Phone - Personal Modified'] || $('Washing Machine').item.json.person.phone_numbers[0] }}"},{"name":"Phone 2 - Person","value":"={{ $('Washing Machine').item.json.person.phone_numbers[1] || $('Set Full Name').item.json.person.phone_numbers[1] || $('Webhook').item.json.body.person.phone_numbers[1] }}"},{"name":"Facebook - Company","value":"={{ $('Washing Machine').item.json['organization.urls.facebook'] || $('Set Full Name').item.json.organization.urls.facebook || $('Set Full Name').item.json['organization.urls.facebook'] || $('Webhook').item.json.body['organization.urls.facebook'] || $json.company_facebook_url || $json.company_facebook_url }}"},{"name":"Instagram - Company","value":"={{ $('Set Full Name').item.json.organization.urls.instagram || $('Washing Machine').item.json.organization.urls.instagram || $('Washing Machine').item.json['organization.urls.instagram'] || $('Set Full Name').item.json['organization.urls.instagram'] || $('Webhook').item.json.body['organization.urls.instagram'] }}"},{"name":"Monster - Company","value":"={{ $('Washing Machine').item.json.organization.urls.monster || $('Webhook').item.json.body['organization.urls.monster'] }}"},{"name":"Company - Pitchbook","value":"={{ $('Washing Machine').item.json['organization.urls.pitchbook'] || $('Set Full Name').item.json.organization.urls.pitchbook || $('Set Full Name').item.json['organization.urls.pitchbook'] || $('Webhook').item.json.body['organization.urls.pitchbook'] }}"},{"name":"Company - Crunchbase","value":"={{ $('Webhook').item.json.body['organization.urls.crunchbase'] }}"},{"name":"Company - Angellist","value":"={{ $('Webhook').item.json.body['organization.urls.angellist'] }}"},{"name":"Company - Indeed","value":"={{ $('Webhook').item.json.body['organization.urls.indeed'] || $('Washing Machine').item.json['organization.urls.indeed'] || $('Webhook').item.json.body['organization.urls.indeed'] }}"},{"name":"Company - Glassdoor","value":"={{ $('Washing Machine').item.json['organization.urls.glassdoor'] || $('Set Full Name').item.json['organization.urls.glassdoor'] || $('Webhook').item.json.body['organization.urls.glassdoor'] }}"},{"name":"Phone - Company","value":"={{ $('Webhook').item.json.body.organization.phone_numbers[0] || $('Washing Machine').item.json['Phone - Company Modified'] }}"},{"name":"Phone 2 - Company","value":"={{ $('Washing Machine').item.json.organization.phone_numbers[0] || $('Set Full Name').item.json.organization.phone_numbers[0] || $('Webhook').item.json.body.organization.phone_numbers[1] }}"},{"name":"Company Size","value":"={{ $json.company_size }}"},{"name":"oir_source","value":"={{ $('Washing Machine').item.json.oir_source }}{{ $('Set Full Name').item.json.oir_source }}{{ $('Webhook').item.json.body.oir_source }}"},{"name":"Industry","value":"={{ $json.company_industry || $json['Industry Modified'] || $('Set Full Name').item.json['Industry Modified'] || $('Washing Machine').item.json['Industry Modified'] || $('Webhook').item.json.body.organization.industry }}"},{"name":"In Hubspot","value":"={{ $('Washing Machine').item.json['In Hubspot'] || $('Set Full Name').item.json['In Hubspot'] }}"},{"name":"Twitter Company","value":"={{ $json.company_twitter_url || $('Set Full Name').item.json.person.urls.twitter || $('Set Full Name').item.json.organization.urls.twitter || $('Washing Machine').item.json.organization.urls.twitter || $('Webhook').item.json.body.person.urls.twitter }}"},{"name":"Domain is Catchall","value":"={{ $json.is_domain_catch_all || $json.status }}"},{"name":"Company Type","value":"={{ $json.company_type }}"},{"name":"Company Founded","value":"={{ $json.company_founded }}"},{"name":"City","value":"={{ $json.company_location.locality }}"},{"name":"State","value":"={{ $json.company_location.region }}"},{"name":"Country","value":"={{ $json.company_location.country }}"},{"name":"Zip","value":"={{ $json.company_location.postal_code }}"},{"name":"=GEO","value":"={{ $json.company_location.geo }}"},{"name":"Technical - IP","value":"={{ $('Washing Machine').item.json.userIp || $('Set Full Name').item.json.userIp }}"},{"name":"Technical - Email Status","value":"={{ $json.status }}"},{"name":"Technical - MX Record","value":"={{ $json.mx_record }}"},{"name":"Technical - Mail Provider","value":"={{ $json.mx_provider }}"},{"name":"Technical - MX Security Gate","value":"={{ $json.mx_record || $json.mx_record }}"},{"name":"Email Verification Warning","value":"={{ $json.message }}"},{"name":"Domain","value":"={{ $json.domain || $('Washing Machine').item.json.organization.domain || $('Webhook').item.json.body['organization.domain'] || $('Webhook').item.json.body.organization.domain }}"}]},"options":{}},"id":"d93a60ca-8404-4877-82a0-d22867cdb823","name":"Clay - Table - Non ICP","type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[4060,80],"alwaysOutputData":true},{"parameters":{"httpMethod":"POST","path":"2be613b0-50ed-4cfc-9ee4-62aa795ecfba","responseMode":"lastNode","responseData":"allEntries","options":{}},"type":"n8n-nodes-base.webhook","typeVersion":2,"position":[220,260],"id":"a4c20403-d1e5-4525-9df1-f4e087e3d6fb","name":"Webhook","webhookId":"2be613b0-50ed-4cfc-9ee4-62aa795ecfba"}],"connections":{"Set Full Name":{"main":[[{"node":"In HubSpot? (Contact)","type":"main","index":0}]]},"Washing Machine":{"main":[[{"node":"Set Full Name","type":"main","index":0}]]},"Structure Data (Vector)":{"main":[[{"node":"Normalize","type":"main","index":0}]]},"Structure Data (OpenSend)":{"main":[[{"node":"Normalize","type":"main","index":0}]]},"Structure Data (RB2B)":{"main":[[{"node":"Normalize","type":"main","index":0}]]},"LinkedIn (Personal)?":{"main":[[{"node":"Enrich - LeadMagic1","type":"main","index":0},{"node":"LeadMagic - Enrich With LinkedIn Profile","type":"main","index":0}]]},"Normalize":{"main":[[{"node":"LinkedIn (Personal)?","type":"main","index":0},{"node":"Free or Work Email?","type":"main","index":0}]]},"Structure Data (All)":{"main":[[{"node":"Normalize","type":"main","index":0}]]},"Enrich - LeadMagic4":{"main":[[{"node":"Healthcare Article?","type":"main","index":0}]]},"In HubSpot? (Contact)":{"main":[[{"node":"In HubSpot? (Company)","type":"main","index":0}]]},"In HubSpot? (Company)":{"main":[[{"node":"Enrich - LeadMagic4","type":"main","index":0}]]},"OpenSend":{"main":[[{"node":"Structure Data (OpenSend)","type":"main","index":0},{"node":"Structure Data (All)","type":"main","index":0}]]},"RB2B":{"main":[[{"node":"Structure Data (RB2B)","type":"main","index":0},{"node":"Structure Data (All)","type":"main","index":0}]]},"Vector":{"main":[[{"node":"Structure Data (Vector)","type":"main","index":0},{"node":"Structure Data (All)","type":"main","index":0}]]},"Healthcare Article?":{"main":[[{"node":"Clay - Table - Non ICP","type":"main","index":0}],[{"node":"Clay - Table 1 (NEW)","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"Washing Machine","type":"main","index":0}]]}},"settings":{"executionOrder":"v1","saveExecutionProgress":true,"saveManualExecutions":true,"callerPolicy":"workflowsFromSameOwner"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true,"templateId":"1750"},"pinData":{},"versionId":"34be83ea-7aa6-4bd0-ad57-2669dbebb6d3","triggerCount":4,"tags":[{"createdAt":"2024-09-15T22:18:06.078Z","updatedAt":"2024-09-15T22:19:25.444Z","id":"BBZbUycIv0KFUxjV","name":"visitor identification"},{"createdAt":"2024-09-16T17:47:31.046Z","updatedAt":"2024-09-16T17:47:31.046Z","id":"S6G5nzOVVSQAgvEd","name":"ispartnersllc.com"}]}